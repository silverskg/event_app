#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby20Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-524,596,596,281,596,596,281,-524,-524,-524,228,596,-524,-524,-524,281',
'-524,277,-111,231,-113,3,222,223,-524,825,-524,-524,-524,642,769,-110',
'825,645,770,-108,-524,-524,228,-524,-524,-524,-524,-524,229,227,222',
'223,-109,121,-102,-116,-115,853,225,232,222,223,-524,824,-111,-113,219',
'-110,757,-524,824,-524,-524,-524,-524,-524,-524,-524,-524,-524,-524',
'-524,-524,-524,-524,95,-112,-524,-524,-524,-107,-524,-524,96,283,-524',
'641,283,-524,-524,644,-524,-116,-524,220,-524,283,-524,-524,-524,-524',
'-524,-524,-524,221,-524,232,-524,224,125,125,-102,125,125,124,124,958',
'124,124,125,-524,-524,-524,-524,124,-524,-111,-524,-113,-527,232,-111',
'-524,-113,-99,-524,-527,-527,-527,-110,232,-527,-527,-527,-110,-527',
'-102,-100,-104,-102,-107,-106,852,-527,-617,-527,-527,-527,125,-102',
'-104,-102,-101,124,281,-527,-527,-538,-527,-527,-527,-527,-527,272,-527',
'269,270,-112,-114,-94,746,-527,575,574,573,-539,576,473,125,333,-112',
'-80,-444,124,-614,-112,-527,-527,-527,-527,-527,-527,-527,-527,-527',
'-527,-527,-527,-527,-527,268,267,-527,-527,-527,-104,-527,-527,742,842',
'-527,-108,334,-527,-527,843,-527,626,-527,-435,-527,229,-527,-527,-527',
'-527,-527,-527,-527,-109,-527,-116,-527,-617,-618,-444,722,-524,-538',
'721,-104,283,-444,-104,-524,-527,-527,-527,-527,-614,-527,-444,-527',
'-524,-303,-104,878,-527,603,125,-527,-303,-303,-303,124,582,-539,-303',
'-303,-444,-303,-614,-103,-105,-534,-116,584,-533,628,627,-99,-534,-615',
'420,-533,232,-213,787,422,421,-303,-303,-108,-303,-303,-303,-303,-303',
'746,-535,575,574,573,369,576,393,-535,396,-100,592,591,398,746,-621',
'575,574,573,816,576,-621,-109,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,-527,401,-303,-303,-303,-115,668,-527',
'585,418,-303,423,-615,-303,626,817,-527,472,-303,626,-303,474,-303,-303',
'-303,-303,-303,-303,-303,923,-303,-621,-303,662,-615,-213,-111,-621',
'-621,626,584,871,626,-617,-621,-303,-303,-621,-105,-617,-303,626,663',
'-621,-621,1006,626,-303,475,125,-114,-621,-621,-621,124,-621,662,-621',
'-621,-113,-621,-621,231,592,591,628,627,-106,125,-621,628,627,624,124',
'904,626,504,-111,631,-115,-621,-621,-532,-621,-621,-621,-621,-621,663',
'-532,628,627,629,628,627,634,-113,585,-102,-529,911,286,628,627,646',
'803,-529,628,627,790,-111,-621,-621,-621,-621,-621,-621,-621,-621,-621',
'-621,-621,-621,-621,-621,-347,803,-621,-621,-621,-104,669,-347,-530',
'514,-621,628,627,-621,-531,-530,-347,-113,-621,517,-621,-531,-621,-621',
'-621,-621,-621,-621,-621,-110,-621,-621,-621,519,-110,-79,578,228,575',
'574,573,582,576,-101,470,-621,-621,232,-103,-536,-621,621,584,471,-621',
'-110,-536,-621,622,125,-112,-621,-621,-621,124,-536,-621,-621,-621,722',
'-621,125,724,528,580,564,124,529,252,-621,-621,-621,-621,589,588,592',
'591,222,223,722,-621,-621,724,-621,-621,-621,-621,-621,746,536,575,574',
'573,722,576,746,724,575,574,573,249,576,335,336,251,250,247,248,289',
'585,232,-621,-621,-621,-621,-621,-621,-621,-621,-621,-621,-621,-621',
'-621,-621,286,742,-621,-621,-621,-537,818,-621,742,540,-621,544,-537',
'-621,-621,545,-621,745,-621,252,-621,-537,-621,-621,-621,-621,-621,-621',
'-621,252,-621,-621,-621,232,538,539,1037,578,232,575,574,573,582,576',
'603,-621,-621,-621,-621,411,-621,249,-621,584,-303,251,250,-621,228',
'608,-112,-303,-303,-303,609,535,-303,-303,-303,633,-303,637,-294,640',
'533,580,228,643,252,-294,-303,-303,-303,547,589,588,592,591,-294,650',
'-303,-303,471,-303,-303,-303,-303,-303,746,-278,575,574,573,652,576',
'746,653,575,574,573,249,576,222,223,251,250,247,248,592,591,585,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,232',
'742,-303,-303,-303,228,819,-303,742,660,-303,661,607,-303,-303,286,-303',
'745,-303,252,-303,605,-303,-303,-303,-303,-303,-303,-303,673,-303,252',
'-303,578,252,575,574,573,582,576,128,129,130,131,132,-303,-303,-303',
'-303,584,-303,249,-303,252,-303,251,250,-303,874,878,-114,-303,-303',
'-303,222,223,252,-303,-303,252,-303,580,746,680,575,574,573,232,576',
'232,589,588,592,591,232,262,263,874,878,-94,-303,-303,698,-303,-303',
'-303,-303,-303,232,550,709,249,228,255,710,251,250,247,248,656,742,253',
'715,254,718,232,585,725,654,951,726,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,519,730,-303,-303,-303,746,668,575',
'574,573,-303,576,733,-303,734,736,738,740,-303,749,-303,750,-303,-303',
'-303,-303,-303,-303,-303,751,-303,753,-303,578,718,575,574,573,582,576',
'-304,718,603,742,718,-303,-303,-304,-303,584,-303,776,781,791,-621,792',
'-304,-303,-279,804,-114,-621,-621,-621,504,504,232,-621,-621,252,-621',
'580,746,821,575,574,573,272,576,-621,589,588,592,591,830,262,263,832',
'517,519,-621,-621,709,-621,-621,-621,-621,-621,232,286,286,249,228,255',
'709,251,250,247,248,772,742,253,252,254,252,232,585,869,774,232,878',
'-621,-621,-621,-621,-621,-621,-621,-621,-621,-621,-621,-621,-621,-621',
'-303,-304,-621,-621,-621,718,669,-303,-304,232,-621,905,-618,-621,-280',
'232,-303,-304,-621,910,-621,927,-621,-621,-621,-621,-621,-621,-621,709',
'-621,-621,-621,746,-278,575,574,573,582,576,-303,932,937,232,733,-621',
'-621,-303,-621,584,-621,940,-618,942,-443,944,-303,-621,228,946,-112',
'-443,-443,-443,946,1028,-443,-443,-443,252,-443,580,899,900,774,232',
'901,119,120,-443,-443,-443,592,591,952,262,263,718,718,718,-443,-443',
'232,-443,-443,-443,-443,-443,718,232,970,249,-536,255,-537,251,250,247',
'248,-536,-281,-537,971,733,974,977,585,979,-536,981,-537,-443,-443,-443',
'-443,-443,-443,-443,-443,-443,-443,-443,-443,-443,-443,232,228,-443',
'-443,-443,-294,983,-443,1034,286,-443,995,-294,-443,-443,996,-443,1032',
'-443,1008,-443,-294,-443,-443,-443,-443,-443,-443,-443,718,-443,-443',
'-443,228,718,-304,781,1026,1029,842,1028,1035,-304,1038,946,-443,-443',
'-312,-443,774,-443,-304,946,946,-312,-312,-312,-443,1043,-312,-312,-312',
'578,-312,575,574,573,582,576,-303,1008,733,1052,-312,-312,1054,-303',
'1056,584,1058,1058,-618,715,-312,-312,-303,-312,-312,-312,-312,-312',
'999,1008,575,574,573,718,576,718,999,580,575,574,573,-618,576,-617,232',
'946,589,588,592,591,1008,-312,-312,-312,-312,-312,-312,-312,-312,-312',
'-312,-312,-312,-312,-312,1081,1058,-312,-312,-312,1058,1058,-312,1058',
'289,-312,,,-312,-312,,-312,585,-312,,-312,,-312,-312,-312,-312,-312',
'-312,-312,,-312,,-312,128,129,130,131,132,128,129,130,131,132,,,-312',
'-312,-295,-312,,-312,,,,-295,-295,-295,-312,,-295,-295,-295,578,-295',
'575,574,573,582,576,,,,,-295,-295,-295,,,584,,,,,-295,-295,,-295,-295',
'-295,-295,-295,128,129,130,131,132,,,,,580,,,,,,,,,589,588,592,591,',
'-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295',
',,-295,-295,-295,,,-295,,,-295,,,-295,-295,,-295,585,-295,,-295,,-295',
'-295,-295,-295,-295,-295,-295,,-295,,-295,922,,575,574,573,923,576,',
',,,,-295,-295,-295,-295,584,-295,-642,-295,,,,,-295,-642,-642,-642,',
',-642,-642,-642,,-642,252,,,580,,,,,-642,-642,-642,,589,588,592,591',
'262,263,,-642,-642,,-642,-642,-642,-642,-642,,,,,,249,,255,,251,250',
'247,248,232,,,,,,,,585,,-642,-642,-642,-642,-642,-642,-642,-642,-642',
'-642,-642,-642,-642,-642,,,-642,-642,-642,,,-642,,286,-642,,,-642,-642',
',-642,,-642,,-642,,-642,-642,-642,-642,-642,-642,-642,,-642,-642,-642',
',,,,,,,,,,,,-642,-642,-622,-642,,-642,,,,-622,-622,-622,-642,,-622,-622',
'-622,578,-622,575,574,573,582,576,,,,-622,-622,-622,-622,,,584,,,,,-622',
'-622,,-622,-622,-622,-622,-622,,,,,,,,,,580,,,,,,,,,589,588,592,591',
',-622,-622,-622,-622,-622,-622,-622,-622,-622,-622,-622,-622,-622,-622',
',,-622,-622,-622,,,-622,,,-622,,,-622,-622,,-622,585,-622,,-622,,-622',
'-622,-622,-622,-622,-622,-622,,-622,-622,-622,746,,575,574,573,582,576',
',,,,,-622,-622,-622,-622,584,-622,-623,-622,,,,,-622,-623,-623,-623',
',,-623,-623,-623,,-623,252,,,580,,,,,-623,-623,-623,-623,,,592,591,262',
'263,,-623,-623,,-623,-623,-623,-623,-623,,,,,,249,,,,251,250,247,248',
',,,,,,,,585,,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623',
'-623,-623,-623,,,-623,-623,-623,,,-623,,,-623,,,-623,-623,,-623,,-623',
',-623,,-623,-623,-623,-623,-623,-623,-623,,-623,-623,-623,746,,575,574',
'573,582,576,,,,,,-623,-623,-623,-623,584,-623,-642,-623,,,,,-623,-642',
'-642,-642,,,-642,-642,-642,,-642,,,,580,,,,,-642,-642,,,,,592,591,,',
',-642,-642,,-642,-642,-642,-642,-642,746,,575,574,573,582,576,922,,575',
'574,573,923,576,,,584,,,,,585,,584,,,,,,,,,,,-642,,,,580,,,-642,,,,580',
'286,-642,,592,591,,,,589,588,592,591,,,,,,,,,,,-642,-642,,,,,,,,,,,',
',-642,585,,,,-642,,,585,,,,-642,186,197,187,210,183,203,193,192,213',
'214,208,191,190,185,211,215,216,195,184,198,202,204,196,189,,,,205,212',
'207,206,199,209,194,182,201,200,,,,,,181,188,179,180,176,177,178,136',
'138,135,,137,,,,,,,,,170,171,,166,148,149,150,157,154,156,,,151,152',
',,,172,173,158,159,,,,,,,,,,,,,,163,162,,147,169,165,164,160,161,155',
'153,145,168,146,,,174,103,,,,,,,,,,104,,,,,,,,,167,,,,,175,186,197,187',
'210,183,203,193,192,213,214,208,191,190,185,211,215,216,195,184,198',
'202,204,196,189,,,,205,212,207,206,199,209,194,182,201,200,,,,,,181',
'188,179,180,176,177,178,136,138,,,137,,,,,,,,,170,171,,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,,,,,,,,,163,162,,147,169',
'165,164,160,161,155,153,145,168,146,,,174,103,,,,,,,,,,104,,,,,,,,,167',
',,,,175,186,197,187,210,183,203,193,192,213,214,208,191,190,185,211',
'215,216,195,184,198,202,204,196,189,,,,205,212,207,378,377,379,376,182',
'201,200,,,,,,181,188,179,180,373,374,375,371,138,109,108,372,,111,,',
',,,,170,171,,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,385,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,,,,,,,,,,,,,,,,167,,,,,175,186,197,187,210,183,203,193,192',
'213,214,208,191,190,185,211,215,216,195,184,198,202,204,196,189,,,,205',
'212,207,206,199,209,194,182,201,200,,,,,,181,188,179,180,176,177,178',
'136,138,408,407,137,,409,,,,,,,170,171,,166,148,149,150,157,154,156',
',,151,152,,,,172,173,158,159,,,,,,,,,,,,,,163,162,,147,169,165,164,160',
'161,155,153,145,168,146,,,174,,,,,,,,,,,,,,,,,,,,167,,,,,175,186,197',
'187,210,183,203,193,192,213,214,208,191,190,185,211,215,216,195,184',
'198,202,204,196,189,,,,205,212,207,206,199,209,194,182,201,200,,,,,',
'181,188,179,180,176,177,178,136,138,,,137,,,,,,,,,170,171,,166,148,149',
'150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,103,,,,,,,,,,104,,,,,',
',,,167,,,,,175,186,197,187,210,183,203,193,192,213,214,208,191,190,185',
'211,215,216,195,184,198,202,204,196,189,,,,205,212,207,206,199,209,194',
'182,201,200,,,,,,181,188,179,180,176,177,178,136,138,,,137,,,,,,,,,170',
'171,,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,',
',,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,103',
',,,,,,,,,104,,,,,,,,,167,,,,,175,186,197,187,210,183,203,193,192,213',
'214,208,191,190,185,211,215,216,195,184,198,202,204,196,189,,,,205,212',
'207,206,199,209,194,182,201,200,,,,,,181,188,179,180,176,177,178,136',
'138,,,137,,,,,,,,,170,171,,166,148,149,150,157,154,156,,,151,152,,,',
'172,173,158,159,,,,,,,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,,174,,,,,,,,,,,,8,85,86,87,12,78,,,167,79,80,,,175,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,657,11,49',
'10,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
'252,256,257,258,259,269,270,264,265,260,261,,245,246,,,262,263,,43,',
',36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254',
',,,103,95,97,98,99,101,,,,96,104,,266,,-253,,,66,,,93,100,102,307,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,657,11,49,309,13,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,252,256,257,258,259,269,270,264,265,260,261',
',245,246,,,262,263,,43,,,311,,,62,63,,,64,,38,249,,255,48,251,250,247',
'248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,266,,,,,66',
',,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,252,256,257,258,259,269',
'270,264,265,260,261,,245,246,,,262,263,,43,,,36,,,62,63,,,64,,38,249',
',255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101,,',
',96,104,,266,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309',
'13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252',
'256,257,258,259,269,270,264,265,260,261,,245,246,,,262,263,,43,,,36',
',,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103',
'95,97,98,99,101,,,,96,104,,266,,,,,66,,,93,100,102,307,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,252,256,257,258,259,269,270,264,265,260,261,,245,246,',
',262,263,,43,,,311,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268',
'267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,232,266,,,,,66,,,93',
'100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,252,256,257,258,259,269',
'270,264,265,260,261,,245,246,,,262,263,,43,,,311,,,62,63,,,64,,38,249',
',255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101,,',
',96,104,,266,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309',
'13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252',
'256,257,258,259,269,270,264,265,260,261,,245,246,,,262,263,,43,,,36',
',,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103',
'95,97,98,99,101,,,,96,104,,266,,,,,66,,,93,100,102,307,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,252,256,257,258,259,269,270,264,265,260,261,,245,246,',
',262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267',
'253,23,254,,,,103,95,97,98,99,101,,,,96,104,,266,,,,,66,,,93,100,102',
'307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,252,256,257,258,259,269,270,264,265',
'260,261,,-643,-643,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251',
'250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252,256,257,258,259',
'269,270,264,265,260,261,,-643,-643,,,262,263,,43,,,36,,,62,63,,,64,',
'38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49',
'309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
'252,-643,-643,-643,-643,269,270,,,-643,-643,,,,,,262,263,,43,,,36,,',
'62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,8,85,86,87,12,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22',
',,,,,11,49,10,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,252,-643,-643,-643,-643,269,270,,,-643,-643,,,,,,262,263,',
'43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23',
'254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,252,-643,-643,-643,-643,269,270,,,-643,-643,',
',,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268',
'267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,252,-643,-643,-643,-643,269,270,,,-643',
'-643,,,,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247',
'248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,252,-643,-643,-643,-643',
'269,270,,,-643,-643,,,,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255',
'48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252,-643,-643',
'-643,-643,269,270,,,-643,-643,,,,,,262,263,,43,,,36,,,62,63,,,64,,38',
'249,,255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309',
'13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252',
'256,257,258,259,269,270,,,260,261,,,,,,262,263,,43,,,36,,,62,63,,,64',
',38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49',
'309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
'252,256,257,258,259,269,270,264,,260,261,,,,,,262,263,,43,,,36,,,62',
'63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,',
',,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114',
'115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,',
'38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309',
'13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,',
',,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114',
'115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,',
'38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,10,13,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,',
'117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,',
',,,,,,,,,,,,,,237,,,243,,,62,63,,746,64,575,574,573,923,576,48,,,,,',
',,242,584,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,580,,93,100,102',
'85,86,87,,78,,592,591,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,244,,,,585,,,49,,,117,116,118,107,60,109,108,110,300',
'111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60',
'109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116',
'118,107,60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,',
',,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,,',
'330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,,64,,315,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,,',
'330,,,,,,,,,,,,,,,,,,,,320,,,243,,,62,63,,746,64,575,574,573,582,576',
',,,,,,,,,584,,,,103,95,97,98,99,101,,,,96,104,,,,332,,,66,580,,93,100',
'102,85,86,87,,78,,592,591,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88',
'323,329,113,112,114,115,,,244,,,,585,,,49,,,117,116,118,107,60,109,108',
'110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,746,64,575,574,573,923,576,48,,,,,,,,242,584,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,580,,93,100,102,85,86,87,,78,,592,591,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,585,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,746,64,575,574,573,923,576',
'48,,,,,,,,242,584,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,580,,93',
'100,102,85,86,87,,78,,592,591,79,80,,,,83,,81,82,84,326,327,76,77,,',
',,,88,323,329,113,112,114,115,,,244,,,,585,,,49,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,',
',243,,,62,63,,746,64,575,574,573,923,576,48,,,,,,,,242,584,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,580,,93,100,102,85,86,87,12,78,,592',
'591,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115',
',,22,,,,585,,11,49,,13,117,116,118,107,60,109,108,110,,111,119,120,',
'105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,746,64,575',
'574,573,923,576,48,,,,,,,,23,584,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,580,,93,100,102,85,86,87,,78,,592,591,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,585,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,125,,,,,124,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324',
',,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,,,330,,,,,,',
',,,,,,,,,,,,,363,,,36,,,62,63,,,64,,38,,,,,,,,,,,,,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49',
'10,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,411,66,,,93,100,102,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,',
',,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,',
',49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,',
',49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,',
',49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,',
',,,11,49,,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,',
'244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,428,,,,48,,,,,',
',,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114',
'115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,428,,,,48,',
',,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298',
',296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301',
'93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,',
'93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,232,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,',
',,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76',
'77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326',
'327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,',
',,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,',
',117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,',
',,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,',
'243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,',
',96,104,232,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,',
',117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,',
',,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115',
',,22,,,,,,11,49,,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112',
'114,115,,,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,,,330,,,,,,,,,,,,,,,,,,,,320,,,243,,,62,63,,,64,,,,,,,,,,',
',,,,,,,,103,95,97,98,99,101,,,,96,104,,,,531,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112',
'114,115,,,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,,,330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,,64,,,,,,,,,,',
',,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114',
'115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,',
',,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112',
'114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,550,,62,63,,,64,,,,',
',48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300',
'111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,298,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77',
',,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60',
'109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327',
'76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117,116,118',
'610,60,109,108,611,,111,119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,612',
',,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76',
'77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117,116,118,610',
'60,109,108,611,,111,119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,612,',
',243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76',
'77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,',
',237,,,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49',
',,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,',
',,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,693,,296,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300',
'111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77',
',,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,',
',243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,411,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,,,330,,,,,,,,,,,,',
',,,,,,,320,,,316,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,',
',,,,,237,,,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,',
'324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,,,330,,',
',,,,,,,,,,,,,,,,,320,,,316,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,',
'49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',796,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,',
'111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
'300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327',
'76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326',
'327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,',
',,,,,237,,,243,,,62,63,,,64,,693,,296,,48,,,,,,,,242,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,',
'49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,296,,48,,,,,,,,242,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',,,330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,,',
'330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,428,,,,48,,,,,',
',,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112',
'114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,693',
',,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93',
'100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88',
'323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108',
'110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327',
'76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326',
'327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,298,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,',
',,,,,237,,,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,',
'49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,',
',,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,296,,48,',
',,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323',
'329,113,112,114,115,,,244,,,,,,,324,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,985,,,243,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323',
'329,113,112,114,115,,,244,,,,,,,324,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,992,,,243,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323',
'329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,693,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,',
',,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,985,,,243,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108',
'110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,450,454,,,451,,66,,301,93,100,102,,170,171,,166,148,149,150,157',
'154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147,169',
'165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,457,461,,,456,,,',
',,167,,,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172,173',
'158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145',
'168,146,,922,174,575,574,573,923,576,,,,,502,454,,,503,584,,,,,167,',
',170,171,175,166,148,149,150,157,154,156,,,151,152,580,,,172,173,158',
'159,,,589,588,592,591,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,,174,,,,,,,,,585,674,454,,,675,,,,,,167,,,170,171,175,166',
'148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,',
',163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,',
',676,461,,,677,,,,,,167,,,170,171,175,166,148,149,150,157,154,156,,',
'151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164',
'160,161,155,153,145,168,146,,,174,,,,,,,,,,702,454,,,703,,,,,,167,,',
'170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,,,,,,705,461,,,706,,,,,,167,,,170,171,175,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,674,454,,,675',
',,,,,167,,,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,,174,,,,,,,,,,676,461,,,677,,,,,,167,,,170,171,175,166',
'148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,',
',163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,',
',764,454,,,765,,,,,,167,,,170,171,175,166,148,149,150,157,154,156,,',
'151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164',
'160,161,155,153,145,168,146,,,174,,,,,,,,,,766,461,,,767,,,,,,167,,',
'170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,,,,,,798,454,,,799,,,,,,167,,,170,171,175,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,801,461,,,800',
',,,,,167,,,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,,174,,,,,,,,,,885,461,,,886,,,,,,167,,,170,171,175,166',
'148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,',
',163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,',
',502,454,,,503,,,,,,167,,,170,171,175,166,148,149,150,157,154,156,,',
'151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164',
'160,161,155,153,145,168,146,,,174,,,,,,,,,,1062,461,,,1061,,,,,,167',
',,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,,,,,,1065,454,,,1066,,,,,,167,,,170,171,175,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,1067,461,,,1068',
',,,,,167,,,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,922,174,575,574,573,923,576,,,,,,,,,,584,,,,,167,,,,,175',
',,,,,,,,,,,580,,,,,,,,,589,588,592,591,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,585' ]
        racc_action_table = arr = ::Array.new(25435, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'107,352,353,65,931,882,325,107,107,107,27,955,107,107,107,683,107,27',
'1065,22,1066,1,466,466,107,681,107,107,107,399,612,1079,831,402,612',
'360,107,107,19,107,107,107,107,107,20,19,713,713,361,3,702,364,608,728',
'19,22,784,784,371,681,764,765,13,883,598,371,831,107,107,107,107,107',
'107,107,107,107,107,107,107,107,107,92,1067,107,107,107,20,107,107,92',
'65,107,399,325,107,107,402,107,20,107,15,107,683,107,107,107,107,107',
'107,107,16,107,466,107,18,352,353,702,931,882,352,353,882,931,882,955',
'107,107,107,107,955,107,1065,107,1066,110,713,1065,107,1066,360,107',
'110,110,110,1079,784,110,110,110,1079,110,702,361,703,702,364,608,728',
'110,1067,110,110,110,598,764,765,702,883,598,29,110,110,235,110,110',
'110,110,110,25,372,47,47,766,767,697,871,372,871,871,871,236,871,238',
'5,40,1067,697,836,5,610,1067,110,110,110,110,110,110,110,110,110,110',
'110,110,110,110,47,47,110,110,110,703,110,110,871,714,110,235,43,110',
'110,714,110,635,110,29,110,434,110,110,110,110,110,110,110,236,110,238',
'110,766,767,836,556,610,41,556,703,29,836,703,610,110,110,110,110,610',
'110,836,110,610,456,703,1011,110,1011,304,110,456,456,456,304,730,42',
'456,456,836,456,610,766,767,373,434,730,374,635,635,41,373,611,135,374',
'49,472,635,135,135,456,456,41,456,456,456,456,456,745,375,745,745,745',
'73,745,99,375,100,42,730,730,101,951,705,951,951,951,674,951,885,42',
'456,456,456,456,456,456,456,456,456,456,456,456,456,456,611,102,456',
'456,456,472,456,611,730,133,456,217,611,456,789,675,611,237,456,387',
'456,239,456,456,456,456,456,456,456,971,456,705,456,798,611,334,674',
'885,705,389,971,745,394,705,885,456,456,705,456,885,456,404,799,885',
'457,951,638,456,240,357,456,457,457,457,357,705,450,457,457,675,457',
'885,244,971,971,789,789,334,891,457,387,387,387,891,789,391,278,798',
'391,334,457,457,376,457,457,457,457,457,451,376,389,389,389,394,394',
'394,799,971,450,377,820,282,404,404,404,907,377,638,638,638,450,457',
'457,457,457,457,457,457,457,457,457,457,457,457,457,50,658,457,457,457',
'451,457,50,378,293,457,391,391,457,379,378,50,451,457,294,457,379,457',
'457,457,457,457,457,457,820,457,457,457,297,907,310,350,234,350,350',
'350,350,350,658,234,457,457,312,457,317,457,381,350,234,676,658,317',
'457,381,895,457,676,676,676,895,317,676,676,676,557,676,963,557,313',
'350,350,963,314,493,676,676,676,676,350,350,350,350,17,17,561,676,676',
'561,676,676,676,676,676,952,320,952,952,952,850,952,580,850,580,580',
'580,493,580,44,44,493,493,493,493,323,350,324,676,676,676,676,676,676',
'676,676,676,676,676,676,676,676,329,952,676,676,676,318,676,676,580',
'331,676,335,318,676,676,336,676,580,676,478,676,318,676,676,676,676',
'676,676,676,339,676,676,676,997,330,330,997,564,345,564,564,564,564',
'564,358,676,676,676,676,359,676,478,676,564,677,478,478,676,319,363',
'676,677,677,677,365,319,677,677,677,393,677,396,321,398,319,564,337',
'401,494,321,677,677,677,337,564,564,564,564,321,424,677,677,337,677',
'677,677,677,677,1006,426,1006,1006,1006,429,1006,742,431,742,742,742',
'494,742,351,351,494,494,494,494,733,733,564,677,677,677,677,677,677',
'677,677,677,677,677,677,677,677,445,1006,677,677,677,362,677,677,742',
'448,677,449,362,677,677,458,677,742,677,479,677,362,677,677,677,677',
'677,677,677,468,677,480,677,734,481,734,734,734,734,734,9,9,9,9,9,677',
'677,677,677,734,677,479,677,482,800,479,479,677,752,752,677,800,800',
'800,778,778,483,800,800,498,800,734,869,499,869,869,869,510,869,511',
'734,734,734,734,526,498,498,1045,1045,527,800,800,530,800,800,800,800',
'800,532,537,541,498,433,498,543,498,498,498,498,433,869,498,551,498',
'552,553,734,558,433,869,559,800,800,800,800,800,800,800,800,800,800',
'800,800,800,800,562,566,800,800,800,1008,800,1008,1008,1008,800,1008',
'567,800,569,570,571,578,800,586,800,590,800,800,800,800,800,800,800',
'593,800,595,800,736,599,736,736,736,736,736,536,600,601,1008,602,800',
'800,536,800,736,800,616,619,642,801,645,536,800,651,659,800,801,801',
'801,664,670,678,801,801,548,801,736,1043,679,1043,1043,1043,682,1043',
'801,736,736,736,736,685,548,548,687,690,692,801,801,699,801,801,801',
'801,801,701,704,707,548,614,548,708,548,548,548,548,614,1043,548,711',
'548,712,729,736,744,614,747,754,801,801,801,801,801,801,801,801,801',
'801,801,801,801,801,706,770,801,801,801,760,801,706,770,763,801,793',
'706,801,795,797,706,770,801,805,801,829,801,801,801,801,801,801,801',
'835,801,801,801,738,846,738,738,738,738,738,886,847,854,855,856,801',
'801,886,801,738,801,860,886,861,30,863,886,801,984,864,801,30,30,30',
'866,984,30,30,30,484,30,738,785,785,984,868,785,785,785,30,30,30,738',
'738,870,484,484,873,879,884,30,30,888,30,30,30,30,30,892,894,903,484',
'989,484,990,484,484,484,484,989,906,990,913,914,916,917,738,918,989',
'920,990,30,30,30,30,30,30,30,30,30,30,30,30,30,30,921,991,30,30,30,993',
'922,30,991,30,30,935,993,30,30,936,30,991,30,953,30,993,30,30,30,30',
'30,30,30,962,30,30,30,1027,966,1035,969,982,985,987,1027,992,1035,1001',
'1002,30,30,31,30,1027,30,1035,1003,1004,31,31,31,30,1005,31,31,31,781',
'31,781,781,781,781,781,1068,1007,1017,1020,31,31,1021,1068,1022,781',
'1023,1025,1068,1031,31,31,1068,31,31,31,31,31,937,1044,937,937,937,1049',
'937,1050,1037,781,1037,1037,1037,1061,1037,1062,1064,1070,781,781,781',
'781,1071,31,31,31,31,31,31,31,31,31,31,31,31,31,31,1075,1076,31,31,31',
'1077,1078,31,1086,31,31,,,31,31,,31,781,31,,31,,31,31,31,31,31,31,31',
',31,,31,308,308,308,308,308,344,344,344,344,344,,,31,31,60,31,,31,,',
',60,60,60,31,,60,60,60,782,60,782,782,782,782,782,,,,,60,60,60,,,782',
',,,,60,60,,60,60,60,60,60,525,525,525,525,525,,,,,782,,,,,,,,,782,782',
'782,782,,60,60,60,60,60,60,60,60,60,60,60,60,60,60,,,60,60,60,,,60,',
',60,,,60,60,,60,782,60,,60,,60,60,60,60,60,60,60,,60,,60,824,,824,824',
'824,824,824,,,,,,60,60,60,60,824,60,452,60,,,,,60,452,452,452,,,452',
'452,452,,452,485,,,824,,,,,452,452,452,,824,824,824,824,485,485,,452',
'452,,452,452,452,452,452,,,,,,485,,485,,485,485,485,485,824,,,,,,,,824',
',452,452,452,452,452,452,452,452,452,452,452,452,452,452,,,452,452,452',
',,452,,452,452,,,452,452,,452,,452,,452,,452,452,452,452,452,452,452',
',452,452,452,,,,,,,,,,,,,452,452,461,452,,452,,,,461,461,461,452,,461',
'461,461,940,461,940,940,940,940,940,,,,461,461,461,461,,,940,,,,,461',
'461,,461,461,461,461,461,,,,,,,,,,940,,,,,,,,,940,940,940,940,,461,461',
'461,461,461,461,461,461,461,461,461,461,461,461,,,461,461,461,,,461',
',,461,,,461,461,,461,940,461,,461,,461,461,461,461,461,461,461,,461',
'461,461,942,,942,942,942,942,942,,,,,,461,461,461,461,942,461,462,461',
',,,,461,462,462,462,,,462,462,462,,462,486,,,942,,,,,462,462,462,462',
',,942,942,486,486,,462,462,,462,462,462,462,462,,,,,,486,,,,486,486',
'486,486,,,,,,,,,942,,462,462,462,462,462,462,462,462,462,462,462,462',
'462,462,,,462,462,462,,,462,,,462,,,462,462,,462,,462,,462,,462,462',
'462,462,462,462,462,,462,462,462,944,,944,944,944,944,944,,,,,,462,462',
'462,462,944,462,501,462,,,,,462,501,501,501,,,501,501,501,,501,,,,944',
',,,,501,501,,,,,944,944,,,,501,501,,501,501,501,501,501,946,,946,946',
'946,946,946,974,,974,974,974,974,974,,,946,,,,,944,,974,,,,,,,,,,,501',
',,,946,,,501,,,,974,501,501,,946,946,,,,974,974,974,974,,,,,,,,,,,501',
'501,,,,,,,,,,,,,501,946,,,,501,,,974,,,,501,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11',
'11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11',
'11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11',
'11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,,,,,11,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,',
',12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12',
',,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,',
',,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,',
',,,,12,,,,,12,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,,,,75,75,75,75,75,75,75,75,75,75,,,,,,75,75,75,75',
'75,75,75,75,75,75,75,75,,75,,,,,,,75,75,,75,75,75,75,75,75,75,,,75,75',
',,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75,75,75,75,75,75,75,75,75,75,75',
',,75,,,,,,,,,,,,,,,,,,,,75,,,,,75,103,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,,,,103,103',
'103,103,103,103,103,103,103,103,,,,,,103,103,103,103,103,103,103,103',
'103,103,103,103,,103,,,,,,,103,103,,103,103,103,103,103,103,103,,,103',
'103,,,,103,103,103,103,,,,,,,,,,,,,,103,103,,103,103,103,103,103,103',
'103,103,103,103,103,,,103,,,,,,,,,,,,,,,,,,,,103,,,,,103,419,419,419',
'419,419,419,419,419,419,419,419,419,419,419,419,419,419,419,419,419',
'419,419,419,419,,,,419,419,419,419,419,419,419,419,419,419,,,,,,419',
'419,419,419,419,419,419,419,419,,,419,,,,,,,,,419,419,,419,419,419,419',
'419,419,419,,,419,419,,,,419,419,419,419,,,,,,,,,,,,,,419,419,,419,419',
'419,419,419,419,419,419,419,419,419,,,419,419,,,,,,,,,,419,,,,,,,,,419',
',,,,419,649,649,649,649,649,649,649,649,649,649,649,649,649,649,649',
'649,649,649,649,649,649,649,649,649,,,,649,649,649,649,649,649,649,649',
'649,649,,,,,,649,649,649,649,649,649,649,649,649,,,649,,,,,,,,,649,649',
',649,649,649,649,649,649,649,,,649,649,,,,649,649,649,649,,,,,,,,,,',
',,,649,649,,649,649,649,649,649,649,649,649,649,649,649,,,649,649,,',
',,,,,,,649,,,,,,,,,649,,,,,649,783,783,783,783,783,783,783,783,783,783',
'783,783,783,783,783,783,783,783,783,783,783,783,783,783,,,,783,783,783',
'783,783,783,783,783,783,783,,,,,,783,783,783,783,783,783,783,783,783',
',,783,,,,,,,,,783,783,,783,783,783,783,783,783,783,,,783,783,,,,783',
'783,783,783,,,,,,,,,,,,,,783,783,,783,783,783,783,783,783,783,783,783',
'783,783,,,783,,,,,,,,,,,,2,2,2,2,2,2,,,783,2,2,,,783,2,,2,2,2,2,2,2',
'2,,,,,,2,2,2,2,2,2,2,,,2,,,,,438,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2',
',2,2,2,438,438,438,438,438,438,438,438,438,438,438,,438,438,,,438,438',
',2,,,2,,,2,2,,,2,,2,438,,438,2,438,438,438,438,438,438,438,2,438,,,',
'2,2,2,2,2,2,,,,2,2,,438,,438,,,2,,,2,2,2,36,36,36,36,36,36,,,,36,36',
',,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,444,36',
'36,36,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,444,444',
'444,444,444,444,444,444,444,444,444,,444,444,,,444,444,,36,,,36,,,36',
'36,,,36,,36,444,,444,36,444,444,444,444,444,444,444,36,444,,,,36,36',
'36,36,36,36,,,,36,36,,444,,,,,36,,,36,36,36,219,219,219,219,219,219',
',,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219,219,219',
'219,219,219,,,219,,,,,,219,219,219,219,219,219,219,219,219,219,219,219',
',219,219,219,,219,219,,219,219,219,24,24,24,24,24,24,24,24,24,24,24',
',24,24,,,24,24,,219,,,219,,,219,219,,,219,,219,24,,24,219,24,24,24,24',
'24,24,24,219,24,,,,219,219,219,219,219,219,,,,219,219,,24,,,,,219,,',
'219,219,219,243,243,243,243,243,243,,,,243,243,,,,243,,243,243,243,243',
'243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,243,243,243',
'243,243,243,243,243,243,243,243,243,,243,243,243,,243,243,,243,243,243',
'291,291,291,291,291,291,291,291,291,291,291,,291,291,,,291,291,,243',
',,243,,,243,243,,,243,,243,291,,291,243,291,291,291,291,291,291,291',
'243,291,,,,243,243,243,243,243,243,,,,243,243,,291,,,,,243,,,243,243',
'243,311,311,311,311,311,311,,,,311,311,,,,311,,311,311,311,311,311,311',
'311,,,,,,311,311,311,311,311,311,311,,,311,,,,,,311,311,311,311,311',
'311,311,311,311,311,311,311,,311,311,311,,311,311,,311,311,311,497,497',
'497,497,497,497,497,497,497,497,497,,497,497,,,497,497,,311,,,311,,',
'311,311,,,311,,311,497,,497,311,497,497,497,497,497,497,497,311,497',
',,,311,311,311,311,311,311,,,,311,311,497,497,,,,,311,,,311,311,311',
'316,316,316,316,316,316,,,,316,316,,,,316,,316,316,316,316,316,316,316',
',,,,,316,316,316,316,316,316,316,,,316,,,,,,316,316,316,316,316,316',
'316,316,316,316,316,316,,316,316,316,,316,316,,316,316,316,549,549,549',
'549,549,549,549,549,549,549,549,,549,549,,,549,549,,316,,,316,,,316',
'316,,,316,,316,549,,549,316,549,549,549,549,549,549,549,316,549,,,,316',
'316,316,316,316,316,,,,316,316,,549,,,,,316,,,316,316,316,343,343,343',
'343,343,343,,,,343,343,,,,343,,343,343,343,343,343,343,343,,,,,,343',
'343,343,343,343,343,343,,,343,,,,,,343,343,343,343,343,343,343,343,343',
'343,343,343,,343,343,343,,343,343,,343,343,343,802,802,802,802,802,802',
'802,802,802,802,802,,802,802,,,802,802,,343,,,343,,,343,343,,,343,,343',
'802,,802,343,802,802,802,802,802,802,802,343,802,,,,343,343,343,343',
'343,343,,,,343,343,,802,,,,,343,,,343,343,343,355,355,355,355,355,355',
',,,355,355,,,,355,,355,355,355,355,355,355,355,,,,,,355,355,355,355',
'355,355,355,,,355,,,,,,355,355,355,355,355,355,355,355,355,355,355,355',
',355,355,355,,355,355,,355,355,355,912,912,912,912,912,912,912,912,912',
'912,912,,912,912,,,912,912,,355,,,355,,,355,355,,,355,,355,912,,912',
'355,912,912,912,912,912,912,912,355,912,,,,355,355,355,355,355,355,',
',,355,355,,912,,,,,355,,,355,355,355,356,356,356,356,356,356,,,,356',
'356,,,,356,,356,356,356,356,356,356,356,,,,,,356,356,356,356,356,356',
'356,,,356,,,,,,356,356,356,356,356,356,356,356,356,356,356,356,,356',
'356,356,,356,356,,356,356,356,476,476,476,476,476,476,476,476,476,476',
'476,,476,476,,,476,476,,356,,,356,,,356,356,,,356,,356,476,,476,356',
'476,476,476,476,476,476,476,356,476,,,,356,356,356,356,356,356,,,,356',
'356,,,,,,,356,,,356,356,356,594,594,594,594,594,594,,,,594,594,,,,594',
',594,594,594,594,594,594,594,,,,,,594,594,594,594,594,594,594,,,594',
',,,,,594,594,594,594,594,594,594,594,594,594,594,594,,594,594,594,,594',
'594,,594,594,594,477,477,477,477,477,477,477,477,477,477,477,,477,477',
',,477,477,,594,,,594,,,594,594,,,594,,594,477,,477,594,477,477,477,477',
'477,477,477,594,477,,,,594,594,594,594,594,594,,,,594,594,,,,,,,594',
',,594,594,594,597,597,597,597,597,597,,,,597,597,,,,597,,597,597,597',
'597,597,597,597,,,,,,597,597,597,597,597,597,597,,,597,,,,,,597,597',
'597,597,597,597,597,597,597,597,597,597,,597,597,597,,597,597,,597,597',
'597,487,487,487,487,487,487,487,,,487,487,,,,,,487,487,,597,,,597,,',
'597,597,,,597,,597,487,,487,597,487,487,487,487,487,487,487,597,487',
',,,597,597,597,597,597,597,,,,597,597,,,,,,,597,,,597,597,597,647,647',
'647,647,647,647,,,,647,647,,,,647,,647,647,647,647,647,647,647,,,,,',
'647,647,647,647,647,647,647,,,647,,,,,,647,647,647,647,647,647,647,647',
'647,647,647,647,,647,647,647,,647,647,,647,647,647,488,488,488,488,488',
'488,488,,,488,488,,,,,,488,488,,647,,,647,,,647,647,,,647,,647,488,',
'488,647,488,488,488,488,488,488,488,647,488,,,,647,647,647,647,647,647',
',,,647,647,,,,,,,647,,,647,647,647,768,768,768,768,768,768,,,,768,768',
',,,768,,768,768,768,768,768,768,768,,,,,,768,768,768,768,768,768,768',
',,768,,,,,,768,768,768,768,768,768,768,768,768,768,768,768,,768,768',
'768,,768,768,,768,768,768,489,489,489,489,489,489,489,,,489,489,,,,',
',489,489,,768,,,768,,,768,768,,,768,,768,489,,489,768,489,489,489,489',
'489,489,489,768,489,,,,768,768,768,768,768,768,,,,768,768,,,,,,,768',
',,768,768,768,779,779,779,779,779,779,,,,779,779,,,,779,,779,779,779',
'779,779,779,779,,,,,,779,779,779,779,779,779,779,,,779,,,,,,779,779',
'779,779,779,779,779,779,779,779,779,779,,779,779,779,,779,779,,779,779',
'779,490,490,490,490,490,490,490,,,490,490,,,,,,490,490,,779,,,779,,',
'779,779,,,779,,779,490,,490,779,490,490,490,490,490,490,490,779,490',
',,,779,779,779,779,779,779,,,,779,779,,,,,,,779,,,779,779,779,780,780',
'780,780,780,780,,,,780,780,,,,780,,780,780,780,780,780,780,780,,,,,',
'780,780,780,780,780,780,780,,,780,,,,,,780,780,780,780,780,780,780,780',
'780,780,780,780,,780,780,780,,780,780,,780,780,780,491,491,491,491,491',
'491,491,,,491,491,,,,,,491,491,,780,,,780,,,780,780,,,780,,780,491,',
'491,780,491,491,491,491,491,491,491,780,491,,,,780,780,780,780,780,780',
',,,780,780,,,,,,,780,,,780,780,780,786,786,786,786,786,786,,,,786,786',
',,,786,,786,786,786,786,786,786,786,,,,,,786,786,786,786,786,786,786',
',,786,,,,,,786,786,786,786,786,786,786,786,786,786,786,786,,786,786',
'786,,786,786,,786,786,786,492,492,492,492,492,492,492,,,492,492,,,,',
',492,492,,786,,,786,,,786,786,,,786,,786,492,,492,786,492,492,492,492',
'492,492,492,786,492,,,,786,786,786,786,786,786,,,,786,786,,,,,,,786',
',,786,786,786,826,826,826,826,826,826,,,,826,826,,,,826,,826,826,826',
'826,826,826,826,,,,,,826,826,826,826,826,826,826,,,826,,,,,,826,826',
'826,826,826,826,826,826,826,826,826,826,,826,826,826,,826,826,,826,826',
'826,495,495,495,495,495,495,495,,,495,495,,,,,,495,495,,826,,,826,,',
'826,826,,,826,,826,495,,495,826,495,495,495,495,495,495,495,826,495',
',,,826,826,826,826,826,826,,,,826,826,,,,,,,826,,,826,826,826,844,844',
'844,844,844,844,,,,844,844,,,,844,,844,844,844,844,844,844,844,,,,,',
'844,844,844,844,844,844,844,,,844,,,,,,844,844,844,844,844,844,844,844',
'844,844,844,844,,844,844,844,,844,844,,844,844,844,496,496,496,496,496',
'496,496,496,,496,496,,,,,,496,496,,844,,,844,,,844,844,,,844,,844,496',
',496,844,496,496,496,496,496,496,496,844,496,,,,844,844,844,844,844',
'844,,,,844,844,,,,,,,844,,,844,844,844,852,852,852,852,852,852,,,,852',
'852,,,,852,,852,852,852,852,852,852,852,,,,,,852,852,852,852,852,852',
'852,,,852,,,,,,852,852,852,852,852,852,852,852,852,852,852,852,,852',
'852,852,,852,852,,852,852,852,,,,,,,,,,,,,,,,,,,,852,,,852,,,852,852',
',,852,,852,,,,852,,,,,,,,852,,,,,852,852,852,852,852,852,,,,852,852',
',,,,,,852,,,852,852,852,853,853,853,853,853,853,,,,853,853,,,,853,,853',
'853,853,853,853,853,853,,,,,,853,853,853,853,853,853,853,,,853,,,,,',
'853,853,853,853,853,853,853,853,853,853,853,853,,853,853,853,,853,853',
',853,853,853,,,,,,,,,,,,,,,,,,,,853,,,853,,,853,853,,,853,,853,,,,853',
',,,,,,,853,,,,,853,853,853,853,853,853,,,,853,853,,,,,,,853,,,853,853',
'853,878,878,878,878,878,878,,,,878,878,,,,878,,878,878,878,878,878,878',
'878,,,,,,878,878,878,878,878,878,878,,,878,,,,,,878,878,878,878,878',
'878,878,878,878,878,878,878,,878,878,878,,878,878,,878,878,878,,,,,',
',,,,,,,,,,,,,,878,,,878,,,878,878,,,878,,878,,,,878,,,,,,,,878,,,,,878',
'878,878,878,878,878,,,,878,878,,,,,,,878,,,878,878,878,889,889,889,889',
'889,889,,,,889,889,,,,889,,889,889,889,889,889,889,889,,,,,,889,889',
'889,889,889,889,889,,,889,,,,,,889,889,889,889,889,889,889,889,889,889',
'889,889,,889,889,889,,889,889,,889,889,889,,,,,,,,,,,,,,,,,,,,889,,',
'889,,,889,889,,,889,,889,,,,889,,,,,,,,889,,,,,889,889,889,889,889,889',
',,,889,889,,,,,,,889,,,889,889,889,928,928,928,928,928,928,,,,928,928',
',,,928,,928,928,928,928,928,928,928,,,,,,928,928,928,928,928,928,928',
',,928,,,,,,928,928,928,928,928,928,928,928,928,928,928,928,,928,928',
'928,,928,928,,928,928,928,,,,,,,,,,,,,,,,,,,,928,,,928,,,928,928,,,928',
',928,,,,928,,,,,,,,928,,,,,928,928,928,928,928,928,,,,928,928,,,,,,',
'928,,,928,928,928,929,929,929,929,929,929,,,,929,929,,,,929,,929,929',
'929,929,929,929,929,,,,,,929,929,929,929,929,929,929,,,929,,,,,,929',
'929,929,929,929,929,929,929,929,929,929,929,,929,929,929,,929,929,,929',
'929,929,,,,,,,,,,,,,,,,,,,,929,,,929,,,929,929,,,929,,929,,,,929,,,',
',,,,929,,,,,929,929,929,929,929,929,,,,929,929,,,,,,,929,,,929,929,929',
'959,959,959,959,959,959,,,,959,959,,,,959,,959,959,959,959,959,959,959',
',,,,,959,959,959,959,959,959,959,,,959,,,,,,959,959,959,959,959,959',
'959,959,959,959,959,959,,959,959,959,,959,959,,959,959,959,,,,,,,,,',
',,,,,,,,,,959,,,959,,,959,959,,,959,,959,,,,959,,,,,,,,959,,,,,959,959',
'959,959,959,959,,,,959,959,,,,,,,959,,,959,959,959,988,988,988,988,988',
'988,,,,988,988,,,,988,,988,988,988,988,988,988,988,,,,,,988,988,988',
'988,988,988,988,,,988,,,,,,988,988,988,988,988,988,988,988,988,988,988',
'988,,988,988,988,,988,988,,988,988,988,,,,,,,,,,,,,,,,,,,,988,,,988',
',,988,988,,,988,,988,,,,988,,,,,,,,988,,,,,988,988,988,988,988,988,',
',,988,988,,,,,,,988,,,988,988,988,1009,1009,1009,1009,1009,1009,,,,1009',
'1009,,,,1009,,1009,1009,1009,1009,1009,1009,1009,,,,,,1009,1009,1009',
'1009,1009,1009,1009,,,1009,,,,,,1009,1009,1009,1009,1009,1009,1009,1009',
'1009,1009,1009,1009,,1009,1009,1009,,1009,1009,,1009,1009,1009,,,,,',
',,,,,,,,,,,,,,1009,,,1009,,,1009,1009,,,1009,,1009,,,,1009,,,,,,,,1009',
',,,,1009,1009,1009,1009,1009,1009,,,,1009,1009,,,,,,,1009,,,1009,1009',
'1009,1014,1014,1014,1014,1014,1014,,,,1014,1014,,,,1014,,1014,1014,1014',
'1014,1014,1014,1014,,,,,,1014,1014,1014,1014,1014,1014,1014,,,1014,',
',,,,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,,1014',
'1014,1014,,1014,1014,,1014,1014,1014,,,,,,,,,,,,,,,,,,,,1014,,,1014',
',,1014,1014,,,1014,,1014,,,,1014,,,,,,,,1014,,,,,1014,1014,1014,1014',
'1014,1014,,,,1014,1014,,,,,,,1014,,,1014,1014,1014,1016,1016,1016,1016',
'1016,1016,,,,1016,1016,,,,1016,,1016,1016,1016,1016,1016,1016,1016,',
',,,,1016,1016,1016,1016,1016,1016,1016,,,1016,,,,,,1016,1016,1016,1016',
'1016,1016,1016,1016,1016,1016,1016,1016,,1016,1016,1016,,1016,1016,',
'1016,1016,1016,,,,,,,,,,,,,,,,,,,,1016,,,1016,,,1016,1016,,,1016,,1016',
',,,1016,,,,,,,,1016,,,,,1016,1016,1016,1016,1016,1016,,,,1016,1016,',
',,,,,1016,,,1016,1016,1016,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,',
',8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,',
',,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,',
',,8,8,,,,,,,8,,,8,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23',
'23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23',
',23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,979,23',
'979,979,979,979,979,23,,,,,,,,23,979,,,,23,23,23,23,23,23,,,,23,23,',
',,,,,23,979,,23,23,23,32,32,32,,32,,979,979,32,32,,,,32,,32,32,32,32',
'32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,979,,,32,,,32,32,32,32,32',
'32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32',
'32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32',
',32,32,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,',
'33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33',
'33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33',
',33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,34',
'34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34',
'34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,',
',34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,37,37,37,,37,,,,37',
'37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,',
'37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,',
',,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37',
'37,,,,,,,37,,,37,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38',
'38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38',
',38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,1038,38,1038',
'1038,1038,1038,1038,,,,,,,,,,1038,,,,38,38,38,38,38,38,,,,38,38,,,,38',
',,38,1038,,38,38,38,45,45,45,,45,,1038,1038,45,45,,,,45,,45,45,45,45',
'45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,1038,,,45,,,45,45,45,45,45',
'45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45',
'45,,1054,45,1054,1054,1054,1054,1054,45,,,,,,,,45,1054,,,,45,45,45,45',
'45,45,,,,45,45,,,,,,,45,1054,,45,45,45,46,46,46,,46,,1054,1054,46,46',
',,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,1054,',
',46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,',
',,,,,,,,46,,,46,,,46,46,,1056,46,1056,1056,1056,1056,1056,46,,,,,,,',
'46,1056,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,1056,,46,46,46,48,48',
'48,,48,,1056,1056,48,48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48',
'48,48,48,,,48,,,,1056,,,48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48',
',48,48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,1058,48,1058,1058,1058',
'1058,1058,48,,,,,,,,48,1058,,,,48,48,48,48,48,48,,,,48,48,,,,,,,48,1058',
',48,48,48,62,62,62,62,62,,1058,1058,62,62,,,,62,,62,62,62,62,62,62,62',
',,,,,62,62,62,62,62,62,62,,,62,,,,1058,,62,62,,62,62,62,62,62,62,62',
'62,62,,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62',
',,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,,62',
'62,62,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67',
'67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67',
',67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,1081,67,1081,1081,1081',
'1081,1081,67,,,,,,,,67,1081,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,1081',
',67,67,67,68,68,68,,68,,1081,1081,68,68,,,,68,,68,68,68,68,68,68,68',
',,,,,68,68,68,68,68,68,68,,,68,,,,1081,,,68,,,68,68,68,68,68,68,68,68',
',68,68,68,,68,68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,',
',,,,68,,,,,,,,68,,,,,68,68,68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68',
'71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71',
'71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,71,71',
'71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,,71,,,,,71',
'71,71,71,71,71,,,,71,71,71,,,,,71,71,,,71,71,71,72,72,72,,72,,,,72,72',
',,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72',
',,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,,,,,,,,,,,,,,,,,,',
'72,,,72,,,72,72,,,72,,72,,,,,,,,,,,,,,,,,72,72,72,72,72,72,,,,72,72',
',,,,,,72,,,72,72,72,123,123,123,123,123,,,,123,123,,,,123,,123,123,123',
'123,123,123,123,,,,,,123,123,123,123,123,123,123,,,123,,,,,,123,123',
'123,123,123,123,123,123,123,123,123,123,,123,123,123,,123,123,,123,123',
'123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,123,,,,123,,,,,,,',
'123,,,,,123,123,123,123,123,123,,,,123,123,,,,,,123,123,,,123,123,123',
'128,128,128,,128,,,,128,128,,,,128,,128,128,128,128,128,128,128,,,,',
',128,128,128,128,128,128,128,,,128,,,,,,,128,,,128,128,128,128,128,128',
'128,128,,128,128,128,,128,128,,128,128,128,,,,,,,,,,,,,,,,,,,,128,,',
'128,,,128,128,,,128,,,,,,128,,,,,,,,128,,,,,128,128,128,128,128,128',
',,,128,128,,,,,,,128,,,128,128,128,129,129,129,,129,,,,129,129,,,,129',
',129,129,129,129,129,129,129,,,,,,129,129,129,129,129,129,129,,,129',
',,,,,,129,,,129,129,129,129,129,129,129,129,,129,129,129,,129,129,,129',
'129,129,,,,,,,,,,,,,,,,,,,,129,,,129,,,129,129,,,129,,,,,,129,,,,,,',
',129,,,,,129,129,129,129,129,129,,,,129,129,,,,,,,129,,,129,129,129',
'130,130,130,,130,,,,130,130,,,,130,,130,130,130,130,130,130,130,,,,',
',130,130,130,130,130,130,130,,,130,,,,,,,130,,,130,130,130,130,130,130',
'130,130,,130,130,130,,130,130,,130,130,130,,,,,,,,,,,,,,,,,,,,130,,',
'130,,,130,130,,,130,,,,,,130,,,,,,,,130,,,,,130,130,130,130,130,130',
',,,130,130,,,,,,,130,,,130,130,130,131,131,131,,131,,,,131,131,,,,131',
',131,131,131,131,131,131,131,,,,,,131,131,131,131,131,131,131,,,131',
',,,,,,131,,,131,131,131,131,131,131,131,131,,131,131,131,,131,131,,131',
'131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131,131,,,131,,,,,,131,,,,,,',
',131,,,,,131,131,131,131,131,131,,,,131,131,,,,,,,131,,,131,131,131',
'132,132,132,132,132,,,,132,132,,,,132,,132,132,132,132,132,132,132,',
',,,,132,132,132,132,132,132,132,,,132,,,,,,132,132,,132,132,132,132',
'132,132,132,132,132,,132,132,132,,132,132,,132,132,132,,,,,,,,,,,,,',
',,,,,,132,,,132,,,132,132,,,132,,132,,,,132,,,,,,,,132,,,,,132,132,132',
'132,132,132,,,,132,132,,,,,,,132,,,132,132,132,220,220,220,,220,,,,220',
'220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220,220,220',
'220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220,220,',
'220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,220',
',,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,,,,,,,220,',
',220,220,220,221,221,221,,221,,,,221,221,,,,221,,221,221,221,221,221',
'221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221',
'221,221,221,221,221,,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,',
',,,,,,221,,,221,,,221,221,,,221,,221,,,,221,,,,,,,,221,,,,,221,221,221',
'221,221,221,,,,221,221,,,,,,,221,,,221,221,221,222,222,222,,222,,,,222',
'222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222',
'222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222,',
'222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,',
',,,222,,,,,,,,222,,,,,222,222,222,222,222,222,,,,222,222,,,,,,,222,',
',222,222,222,223,223,223,,223,,,,223,223,,,,223,,223,223,223,223,223',
'223,223,,,,,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223,223,223',
'223,223,223,223,223,,223,223,223,,223,223,,223,223,223,,,,,,,,,,,,,',
',,,,,,223,,,223,,,223,223,,,223,,,,,,223,,,,,,,,223,,,,,223,223,223',
'223,223,223,,,,223,223,,,,,,,223,,,223,223,223,224,224,224,,224,,,,224',
'224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224,224,224',
'224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224,224,',
'224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,',
',,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224,,,,,,,224,',
',224,224,224,225,225,225,,225,,,,225,225,,,,225,,225,225,225,225,225',
'225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225,225',
'225,225,225,225,225,225,225,225,225,,225,225,,225,225,225,,,,,,,,,,',
',,,,,,,,,225,,,225,,,225,225,,,225,,225,,225,,225,,,,,,,,225,,,,,225',
'225,225,225,225,225,,,,225,225,,,,,,,225,,225,225,225,225,229,229,229',
',229,,,,229,229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229,229',
'229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229,229,229,229,,229',
'229,229,,229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229',
',,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229,,,',
',,,229,,,229,229,229,230,230,230,,230,,,,230,230,,,,230,,230,230,230',
'230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230',
'230,230,230,230,230,230,230,,230,230,230,,230,230,,230,230,230,,,,,',
',,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,230,,,,,230',
'230,230,230,230,230,,,,230,230,,,,,,,230,,,230,230,230,231,231,231,',
'231,,,,231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231',
'231,231,231,231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231',
'231,231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231',
',,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,231',
',,,,,231,,,231,231,231,242,242,242,,242,,,,242,242,,,,242,,242,242,242',
'242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242',
'242,242,242,242,242,242,242,,242,242,242,,242,242,,242,242,242,,,,,',
',,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242',
'242,242,242,242,242,,,,242,242,,,,,,,242,,,242,242,242,245,245,245,',
'245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245',
'245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245',
'245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245',
',,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,',
',,,245,,,245,245,245,246,246,246,,246,,,,246,246,,,,246,,246,246,246',
'246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246',
'246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,',
',,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246',
'246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246,247,247,247,',
'247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247',
'247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247',
'247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247',
',,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247,247,,,',
',,,247,,,247,247,247,248,248,248,,248,,,,248,248,,,,248,,248,248,248',
'248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248',
'248,248,248,248,248,248,248,,248,248,248,,248,248,,248,248,248,,,,,',
',,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248',
'248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248,248,249,249,249,',
'249,,,,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249',
'249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249',
'249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249',
',,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,',
',,,249,,,249,249,249,250,250,250,,250,,,,250,250,,,,250,,250,250,250',
'250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250',
'250,250,250,250,250,250,250,,250,250,250,,250,250,,250,250,250,,,,,',
',,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250',
'250,250,250,250,250,,,,250,250,,,,,,,250,,,250,250,250,251,251,251,',
'251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251',
'251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251',
'251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251',
',,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,',
',,,251,,,251,251,251,252,252,252,,252,,,,252,252,,,,252,,252,252,252',
'252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252',
'252,252,252,252,252,252,252,,252,252,252,,252,252,,252,252,252,,,,,',
',,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252',
'252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252,253,253,253,',
'253,,,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253',
'253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253',
'253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253',
',,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,',
',,,253,,,253,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254',
'254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254',
'254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,',
',,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254',
'254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,255,255,255,',
'255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255',
'255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255',
'255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255',
',,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,,,',
',,,255,,,255,255,255,256,256,256,,256,,,,256,256,,,,256,,256,256,256',
'256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256',
'256,256,256,256,256,256,256,,256,256,256,,256,256,,256,256,256,,,,,',
',,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256',
'256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256,256,257,257,257,',
'257,,,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257',
'257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257',
'257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257',
',,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,',
',,,257,,,257,257,257,258,258,258,,258,,,,258,258,,,,258,,258,258,258',
'258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258',
'258,258,258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,',
',,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258',
'258,258,258,258,258,,,,258,258,,,,,,,258,,,258,258,258,259,259,259,',
'259,,,,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259',
'259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259',
'259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259',
',,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,',
',,,259,,,259,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260,260',
'260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260',
'260,260,260,260,260,260,260,,260,260,260,,260,260,,260,260,260,,,,,',
',,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260',
'260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260,260,261,261,261,',
'261,,,,261,261,,,,261,,261,261,261,261,261,261,261,,,,,,261,261,261',
'261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261,,261',
'261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261',
',,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,,,',
',,,261,,,261,261,261,262,262,262,,262,,,,262,262,,,,262,,262,262,262',
'262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,,,262,,,262',
'262,262,262,262,262,262,262,,262,262,262,,262,262,,262,262,262,,,,,',
',,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,262,,,,,262',
'262,262,262,262,262,,,,262,262,,,,,,,262,,,262,262,262,263,263,263,',
'263,,,,263,263,,,,263,,263,263,263,263,263,263,263,,,,,,263,263,263',
'263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,263,,263',
'263,263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263',
',,263,,,,,,263,,,,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,,,',
',,,263,,,263,263,263,264,264,264,,264,,,,264,264,,,,264,,264,264,264',
'264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264',
'264,264,264,264,264,264,264,,264,264,264,,264,264,,264,264,264,,,,,',
',,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264,,,,,,,,264,,,,,264',
'264,264,264,264,264,,,,264,264,,,,,,,264,,,264,264,264,265,265,265,',
'265,,,,265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265,265',
'265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,,265',
'265,265,,265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265',
',,265,,,,,,265,,,,,,,,265,,,,,265,265,265,265,265,265,,,,265,265,,,',
',,,265,,,265,265,265,266,266,266,,266,,,,266,266,,,,266,,266,266,266',
'266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266',
'266,266,266,266,266,266,266,,266,266,266,,266,266,,266,266,266,,,,,',
',,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,,,266,,,,,266',
'266,266,266,266,266,,,,266,266,,,,,,,266,,,266,266,266,271,271,271,',
'271,,,,271,271,,,,271,,271,271,271,271,271,271,271,,,,,,271,271,271',
'271,271,271,271,,,271,,,,,,,271,,,271,271,271,271,271,271,271,271,,271',
'271,271,,271,271,,271,271,271,,,,,,,,,,,,,,,,,,,,271,,,271,,,271,271',
',,271,,,,,,271,,,,,,,,271,,,,,271,271,271,271,271,271,,,,271,271,,,',
',,,271,,,271,271,271,279,279,279,,279,,,,279,279,,,,279,,279,279,279',
'279,279,279,279,,,,,,279,279,279,279,279,279,279,,,279,,,,,,,279,,,279',
'279,279,279,279,279,279,279,279,279,279,279,,279,279,,279,279,279,,',
',,,,,,,,,,,,,,,,,279,,,279,,,279,279,,,279,,279,,279,,279,,,,,,,,279',
',,,,279,279,279,279,279,279,,,,279,279,,,,,,,279,,279,279,279,279,286',
'286,286,,286,,,,286,286,,,,286,,286,286,286,286,286,286,286,,,,,,286',
'286,286,286,286,286,286,,,286,,,,,,,286,,,286,286,286,286,286,286,286',
'286,286,286,286,286,,286,286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286',
',,286,286,,,286,,286,,286,,286,,,,,,,,286,,,,,286,286,286,286,286,286',
',,,286,286,,,,,,,286,,286,286,286,286,289,289,289,,289,,,,289,289,,',
',289,,289,289,289,289,289,289,289,,,,,,289,289,289,289,289,289,289,',
',289,,,,,,,289,,,289,289,289,289,289,289,289,289,289,289,289,289,,289',
'289,,289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,,289,,289,',
'289,,289,,,,,,,,289,,,,,289,289,289,289,289,289,,,,289,289,289,,,,,',
'289,,289,289,289,289,296,296,296,,296,,,,296,296,,,,296,,296,296,296',
'296,296,296,296,,,,,,296,296,296,296,296,296,296,,,296,,,,,,,296,,,296',
'296,296,296,296,296,296,296,,296,296,296,,296,296,,296,296,296,,,,,',
',,,,,,,,,,,,,,296,,,296,,,296,296,,,296,,,,,,296,,,,,,,,296,,,,,296',
'296,296,296,296,296,,,,296,296,,,,,,,296,,,296,296,296,298,298,298,',
'298,,,,298,298,,,,298,,298,298,298,298,298,298,298,,,,,,298,298,298',
'298,298,298,298,,,298,,,,,,,298,,,298,298,298,298,298,298,298,298,,298',
'298,298,,298,298,,298,298,298,,,,,,,,,,,,,,,,,,,,298,,,298,,,298,298',
',,298,,,,,,298,,,,,,,,298,,,,,298,298,298,298,298,298,,,,298,298,,,',
',,,298,,,298,298,298,300,300,300,,300,,,,300,300,,,,300,,300,300,300',
'300,300,300,300,,,,,,300,300,300,300,300,300,300,,,300,,,,,,,300,,,300',
'300,300,300,300,300,300,300,,300,300,300,,300,300,,300,300,300,,,,,',
',,,,,,,,,,,,,,300,,,300,,,300,300,,,300,,,,,,300,,,,,,,,300,,,,,300',
'300,300,300,300,300,,,,300,300,,,,,,,300,,,300,300,300,301,301,301,',
'301,,,,301,301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301,301',
'301,301,301,301,,,301,,,,,,,301,,,301,301,301,301,301,301,301,301,,301',
'301,301,,301,301,,301,301,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301,301',
',,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301,301,301,,,,301,301,,,',
',,,301,,,301,301,301,307,307,307,307,307,,,,307,307,,,,307,,307,307',
'307,307,307,307,307,,,,,,307,307,307,307,307,307,307,,,307,,,,,,307',
'307,,307,307,307,307,307,307,307,307,307,,307,307,307,,307,307,,307',
'307,307,,,,,,,,,,,,,,,,,,,,307,,,307,,,307,307,,,307,,307,,,,307,,,',
',,,,307,,,,,307,307,307,307,307,307,,,,307,307,,,,,,,307,,,307,307,307',
'315,315,315,,315,,,,315,315,,,,315,,315,315,315,315,315,315,315,,,,',
',315,315,315,315,315,315,315,,,315,,,,,,,315,,,315,315,315,315,315,315',
'315,315,,315,315,315,,315,315,,,,315,,,,,,,,,,,,,,,,,,,,315,,,315,,',
'315,315,,,315,,,,,,,,,,,,,,,,,,,315,315,315,315,315,315,,,,315,315,',
',,315,,,315,,,315,315,315,332,332,332,,332,,,,332,332,,,,332,,332,332',
'332,332,332,332,332,,,,,,332,332,332,332,332,332,332,,,332,,,,,,,332',
',,332,332,332,332,332,332,332,332,,332,332,332,,332,332,,,,332,,,,,',
',,,,,,,,,,,,,,332,,,332,,,332,332,,,332,,,,,,,,,,,,,,,,,,,332,332,332',
'332,332,332,,,,332,332,,,,,,,332,,,332,332,332,340,340,340,,340,,,,340',
'340,,,,340,,340,340,340,340,340,340,340,,,,,,340,340,340,340,340,340',
'340,,,340,,,,,,,340,,,340,340,340,340,340,340,340,340,,340,340,340,',
'340,340,,340,340,340,,,,,,,,,,,,,,,,,,,,340,,,340,,,340,340,,,340,,',
',,,340,,,,,,,,340,,,,,340,340,340,340,340,340,,,,340,340,,,,,,,340,',
',340,340,340,342,342,342,,342,,,,342,342,,,,342,,342,342,342,342,342',
'342,342,,,,,,342,342,342,342,342,342,342,,,342,,,,,,,342,,,342,342,342',
'342,342,342,342,342,,342,342,342,,342,342,,342,342,342,,,,,,,,,,,,,',
',,,,,,342,,,342,342,,342,342,,,342,,,,,,342,,,,,,,,342,,,,,342,342,342',
'342,342,342,,,,342,342,,,,,,,342,,,342,342,342,346,346,346,,346,,,,346',
'346,,,,346,,346,346,346,346,346,346,346,,,,,,346,346,346,346,346,346',
'346,,,346,,,,,,,346,,,346,346,346,346,346,346,346,346,346,346,346,346',
',346,346,,346,346,346,,,,,,,,,,,,,,,,,,,,346,,,346,,,346,346,,,346,',
'346,,,,346,,,,,,,,346,,,,,346,346,346,346,346,346,,,,346,346,,,,,,,346',
',346,346,346,346,347,347,347,,347,,,,347,347,,,,347,,347,347,347,347',
'347,347,347,,,,,,347,347,347,347,347,347,347,,,347,,,,,,,347,,,347,347',
'347,347,347,347,347,347,347,347,347,347,,347,347,,347,347,347,,,,,,',
',,,,,,,,,,,,,347,,,347,,,347,347,,,347,,,,,,347,,,,,,,,347,,,,,347,347',
'347,347,347,347,,,,347,347,,,,,,,347,,347,347,347,347,354,354,354,,354',
',,,354,354,,,,354,,354,354,354,354,354,354,354,,,,,,354,354,354,354',
'354,354,354,,,354,,,,,,,354,,,354,354,354,354,354,354,354,354,,354,354',
'354,,354,354,,354,354,354,,,,,,,,,,,,,,,,,,,,354,,,354,,,354,354,,,354',
',,,,,354,,,,,,,,354,,,,,354,354,354,354,354,354,,,,354,354,,,,,,,354',
',,354,354,354,368,368,368,,368,,,,368,368,,,,368,,368,368,368,368,368',
'368,368,,,,,,368,368,368,368,368,368,368,,,368,,,,,,,368,,,368,368,368',
'368,368,368,368,368,,368,368,368,,368,368,,,,368,,,,,,,,,,,,,,,,,,,',
'368,,,368,,,368,368,,,368,,,,,,,,,,,,,,,,,,,368,368,368,368,368,368',
',,,368,368,,,,,,,368,,,368,368,368,370,370,370,,370,,,,370,370,,,,370',
',370,370,370,370,370,370,370,,,,,,370,370,370,370,370,370,370,,,370',
',,,,,,370,,,370,370,370,370,370,370,370,370,,370,370,370,,370,370,,',
',370,,,,,,,,,,,,,,,,,,,,370,,,370,,,370,370,,,370,,,,,,,,,,,,,,,,,,',
'370,370,370,370,370,370,,,,370,370,,,,,,,370,,,370,370,370,428,428,428',
',428,,,,428,428,,,,428,,428,428,428,428,428,428,428,,,,,,428,428,428',
'428,428,428,428,,,428,,,,,,,428,,,428,428,428,428,428,428,428,428,,428',
'428,428,,428,428,,428,428,428,,,,,,,,,,,,,,,,,,,,428,,,428,,,428,428',
',,428,,,,,,428,,,,,,,,428,,,,,428,428,428,428,428,428,,,,428,428,,,',
',,,428,,,428,428,428,471,471,471,,471,,,,471,471,,,,471,,471,471,471',
'471,471,471,471,,,,,,471,471,471,471,471,471,471,,,471,,,,,,,471,,,471',
'471,471,471,471,471,471,471,471,471,471,471,,471,471,,471,471,471,,',
',,,,,,,,,,,,,,,,,471,,,471,,,471,471,,,471,,471,,471,,471,,,,,,,,471',
',,,,471,471,471,471,471,471,,,,471,471,,,,,,,471,,471,471,471,471,473',
'473,473,,473,,,,473,473,,,,473,,473,473,473,473,473,473,473,,,,,,473',
'473,473,473,473,473,473,,,473,,,,,,,473,,,473,473,473,473,473,473,473',
'473,,473,473,473,,473,473,,473,473,473,,,,,,,,,,,,,,,,,,,,473,,,473',
',,473,473,,,473,,,,,,473,,,,,,,,473,,,,,473,473,473,473,473,473,,,,473',
'473,,,,,,,473,,,473,473,473,474,474,474,,474,,,,474,474,,,,474,,474',
'474,474,474,474,474,474,,,,,,474,474,474,474,474,474,474,,,474,,,,,',
',474,,,474,474,474,474,474,474,474,474,,474,474,474,,474,474,,474,474',
'474,,,,,,,,,,,,,,,,,,,,474,,,474,,,474,474,,,474,,,,,,474,,,,,,,,474',
',,,,474,474,474,474,474,474,,,,474,474,,,,,,,474,,,474,474,474,475,475',
'475,,475,,,,475,475,,,,475,,475,475,475,475,475,475,475,,,,,,475,475',
'475,475,475,475,475,,,475,,,,,,,475,,,475,475,475,475,475,475,475,475',
',475,475,475,,475,475,,475,475,475,,,,,,,,,,,,,,,,,,,,475,,,475,,,475',
'475,,,475,,,,,,475,,,,,,,,475,,,,,475,475,475,475,475,475,,,,475,475',
',,,,,,475,,,475,475,475,514,514,514,,514,,,,514,514,,,,514,,514,514',
'514,514,514,514,514,,,,,,514,514,514,514,514,514,514,,,514,,,,,,,514',
',,514,514,514,514,514,514,514,514,514,514,514,514,,514,514,,514,514',
'514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514,514,,,514,,514,,514,,514,,,,',
',,,514,,,,,514,514,514,514,514,514,,,,514,514,,,,,,,514,,514,514,514',
'514,517,517,517,,517,,,,517,517,,,,517,,517,517,517,517,517,517,517',
',,,,,517,517,517,517,517,517,517,,,517,,,,,,,517,,,517,517,517,517,517',
'517,517,517,517,517,517,517,,517,517,,517,517,517,,,,,,,,,,,,,,,,,,',
',517,,,517,,,517,517,,,517,,,,517,,517,,,,,,,,517,,,,,517,517,517,517',
'517,517,,,,517,517,,,,,,,517,,517,517,517,517,519,519,519,,519,,,,519',
'519,,,,519,,519,519,519,519,519,519,519,,,,,,519,519,519,519,519,519',
'519,,,519,,,,,,,519,,,519,519,519,519,519,519,519,519,,519,519,519,',
'519,519,,519,519,519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,',
',,,519,,,,,,,,519,,,,,519,519,519,519,519,519,,,,519,519,,,,,,,519,',
',519,519,519,524,524,524,524,524,,,,524,524,,,,524,,524,524,524,524',
'524,524,524,,,,,,524,524,524,524,524,524,524,,,524,,,,,,524,524,524',
'524,524,524,524,524,524,524,524,524,,524,524,524,,524,524,,524,524,524',
',,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,,524,,524,,,,524,,,,,,,,524',
',,,,524,524,524,524,524,524,,,,524,524,,,,,,524,524,,,524,524,524,531',
'531,531,,531,,,,531,531,,,,531,,531,531,531,531,531,531,531,,,,,,531',
'531,531,531,531,531,531,,,531,,,,,,,531,,,531,531,531,531,531,531,531',
'531,,531,531,531,,531,531,,,,531,,,,,,,,,,,,,,,,,,,,531,,,531,,,531',
'531,,,531,,,,,,,,,,,,,,,,,,,531,531,531,531,531,531,,,,531,531,,,,,',
',531,,,531,531,531,533,533,533,,533,,,,533,533,,,,533,,533,533,533,533',
'533,533,533,,,,,,533,533,533,533,533,533,533,,,533,,,,,,,533,,,533,533',
'533,533,533,533,533,533,533,533,533,533,,533,533,,533,533,533,,,,,,',
',,,,,,,,,,,,,533,,,533,,,533,533,,,533,,533,,533,,533,,,,,,,,533,,,',
',533,533,533,533,533,533,,,,533,533,,,,,,,533,,533,533,533,533,540,540',
'540,,540,,,,540,540,,,,540,,540,540,540,540,540,540,540,,,,,,540,540',
'540,540,540,540,540,,,540,,,,,,,540,,,540,540,540,540,540,540,540,540',
',540,540,540,,540,540,,,,540,,,,,,,,,,,,,,,,,,,,540,,,540,,,540,540',
',,540,,,,,,,,,,,,,,,,,,,540,540,540,540,540,540,,,,540,540,,,,,,,540',
',,540,540,540,544,544,544,,544,,,,544,544,,,,544,,544,544,544,544,544',
'544,544,,,,,,544,544,544,544,544,544,544,,,544,,,,,,,544,,,544,544,544',
'544,544,544,544,544,,544,544,544,,544,544,,544,544,544,,,,,,,,,,,,,',
',,,,,,544,,,544,,,544,544,,,544,,,,,,544,,,,,,,,544,,,,,544,544,544',
'544,544,544,,,,544,544,,,,,,,544,,,544,544,544,545,545,545,,545,,,,545',
'545,,,,545,,545,545,545,545,545,545,545,,,,,,545,545,545,545,545,545',
'545,,,545,,,,,,,545,,,545,545,545,545,545,545,545,545,,545,545,545,',
'545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,,545,,',
',,,545,,,,,,,,545,,,,,545,545,545,545,545,545,,,,545,545,,,,,,,545,',
',545,545,545,550,550,550,,550,,,,550,550,,,,550,,550,550,550,550,550',
'550,550,,,,,,550,550,550,550,550,550,550,,,550,,,,,,,550,,,550,550,550',
'550,550,550,550,550,,550,550,550,,550,550,,550,550,550,,,,,,,,,,,,,',
',,,,,,550,,,550,,,550,550,,,550,,,,,,550,,,,,,,,550,,,,,550,550,550',
'550,550,550,,,,550,550,,,,,,,550,,,550,550,550,582,582,582,,582,,,,582',
'582,,,,582,,582,582,582,582,582,582,582,,,,,,582,582,582,582,582,582',
'582,,,582,,,,,,,582,,,582,582,582,582,582,582,582,582,,582,582,582,',
'582,582,,582,582,582,,,,,,,,,,,,,,,,,,,,582,,,582,,,582,582,,,582,,',
',,,582,,,,,,,,582,,,,,582,582,582,582,582,582,,,,582,582,,,,,,,582,',
',582,582,582,605,605,605,,605,,,,605,605,,,,605,,605,605,605,605,605',
'605,605,,,,,,605,605,605,605,605,605,605,,,605,,,,,,,605,,,605,605,605',
'605,605,605,605,605,605,605,605,605,,605,605,,605,605,605,,,,,,,,,,',
',,,,,,,,,605,,,605,,,605,605,,,605,,605,,605,,605,,,,,,,,605,,,,,605',
'605,605,605,605,605,,,,605,605,,,,,,,605,,605,605,605,605,617,617,617',
',617,,,,617,617,,,,617,,617,617,617,617,617,617,617,,,,,,617,617,617',
'617,617,617,617,,,617,,,,,,,617,,,617,617,617,617,617,617,617,617,,617',
'617,617,,617,617,,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617',
',,617,,,,,,617,,,,,,,,617,,,,,617,617,617,617,617,617,,,,617,617,,,',
',,,617,,,617,617,617,623,623,623,,623,,,,623,623,,,,623,,623,623,623',
'623,623,623,623,,,,,,623,623,623,623,623,623,623,,,623,,,,,,,623,,,623',
'623,623,623,623,623,623,623,,623,623,623,,623,623,,623,623,623,,,,,',
',,,,,,,,,,,,,,623,,,623,,,623,623,,,623,,,,,,623,,,,,,,,623,,,,,623',
'623,623,623,623,623,,,,623,623,,,,,,,623,,,623,623,623,652,652,652,',
'652,,,,652,652,,,,652,,652,652,652,652,652,652,652,,,,,,652,652,652',
'652,652,652,652,,,652,,,,,,,652,,,652,652,652,652,652,652,652,652,,652',
'652,652,,652,652,,652,652,652,,,,,,,,,,,,,,,,,,,,652,,,652,,,652,652',
',,652,,652,,,,652,,,,,,,,652,,,,,652,652,652,652,652,652,,,,652,652',
',,,,,,652,,,652,652,652,653,653,653,,653,,,,653,653,,,,653,,653,653',
'653,653,653,653,653,,,,,,653,653,653,653,653,653,653,,,653,,,,,,,653',
',,653,653,653,653,653,653,653,653,,653,653,653,,653,653,,653,653,653',
',,,,,,,,,,,,,,,,,,,653,,,653,,,653,653,,,653,,,,,,653,,,,,,,,653,,,',
',653,653,653,653,653,653,,,,653,653,,,,,,,653,,,653,653,653,654,654',
'654,,654,,,,654,654,,,,654,,654,654,654,654,654,654,654,,,,,,654,654',
'654,654,654,654,654,,,654,,,,,,,654,,,654,654,654,654,654,654,654,654',
'654,654,654,654,,654,654,,654,654,654,,,,,,,,,,,,,,,,,,,,654,,,654,',
',654,654,,,654,,654,,654,,654,,,,,,,,654,,,,,654,654,654,654,654,654',
',,,654,654,,,,,,,654,,654,654,654,654,657,657,657,,657,,,,657,657,,',
',657,,657,657,657,657,657,657,657,,,,,,657,657,657,657,657,657,657,',
',657,,,,,,,657,,,657,657,657,657,657,657,657,657,,657,657,657,,657,657',
',657,657,657,,,,,,,,,,,,,,,,,,,,657,,,657,,,657,657,,,657,,,,,,657,',
',,,,,,657,,,,,657,657,657,657,657,657,,,,657,657,,,,,,,657,,,657,657',
'657,660,660,660,,660,,,,660,660,,,,660,,660,660,660,660,660,660,660',
',,,,,660,660,660,660,660,660,660,,,660,,,,,,,660,,,660,660,660,660,660',
'660,660,660,660,660,660,660,,660,660,,660,660,660,,,,,,,,,,,,,,,,,,',
',660,,,660,,,660,660,,,660,,660,,660,,660,,,,,,,,660,,,,,660,660,660',
'660,660,660,,,,660,660,,,,,,,660,,660,660,660,660,661,661,661,,661,',
',,661,661,,,,661,,661,661,661,661,661,661,661,,,,,,661,661,661,661,661',
'661,661,,,661,,,,,,,661,,,661,661,661,661,661,661,661,661,661,661,661',
'661,,661,661,,661,661,661,,,,,,,,,,,,,,,,,,,,661,,,661,,,661,661,,,661',
',,,661,,661,,,,,,,,661,,,,,661,661,661,661,661,661,,,,661,661,,,,,,',
'661,,661,661,661,661,662,662,662,,662,,,,662,662,,,,662,,662,662,662',
'662,662,662,662,,,,,,662,662,662,662,662,662,662,,,662,,,,,,,662,,,662',
'662,662,662,662,662,662,662,,662,662,662,,662,662,,662,662,662,,,,,',
',,,,,,,,,,,,,,662,,,662,,,662,662,,,662,,,,,,662,,,,,,,,662,,,,,662',
'662,662,662,662,662,,,,662,662,,,,,,,662,,,662,662,662,663,663,663,',
'663,,,,663,663,,,,663,,663,663,663,663,663,663,663,,,,,,663,663,663',
'663,663,663,663,,,663,,,,,,,663,,,663,663,663,663,663,663,663,663,,663',
'663,663,,663,663,,663,663,663,,,,,,,,,,,,,,,,,,,,663,,,663,,,663,663',
',,663,,,,,,663,,,,,,,,663,,,,,663,663,663,663,663,663,,,,663,663,,,',
',,,663,,,663,663,663,668,668,668,,668,,,,668,668,,,,668,,668,668,668',
'668,668,668,668,,,,,,668,668,668,668,668,668,668,,,668,,,,,,,668,,,668',
'668,668,668,668,668,668,668,,668,668,668,,668,668,,668,668,668,,,,,',
',,,,,,,,,,,,,,668,,,668,,,668,668,,,668,,,,,,668,,,,,,,,668,,,,,668',
'668,668,668,668,668,,,,668,668,,,,,,,668,,,668,668,668,669,669,669,',
'669,,,,669,669,,,,669,,669,669,669,669,669,669,669,,,,,,669,669,669',
'669,669,669,669,,,669,,,,,,,669,,,669,669,669,669,669,669,669,669,,669',
'669,669,,669,669,,669,669,669,,,,,,,,,,,,,,,,,,,,669,,,669,,,669,669',
',,669,,,,,,669,,,,,,,,669,,,,,669,669,669,669,669,669,,,,669,669,,,',
',,,669,,,669,669,669,693,693,693,,693,,,,693,693,,,,693,,693,693,693',
'693,693,693,693,,,,,,693,693,693,693,693,693,693,,,693,,,,,,,693,,,693',
'693,693,693,693,693,693,693,,693,693,693,,693,693,,693,693,693,,,,,',
',,,,,,,,,,,,,,693,,,693,,,693,693,,,693,,,,,,693,,,,,,,,693,,,,,693',
'693,693,693,693,693,,,,693,693,,,,,,,693,,,693,693,693,698,698,698,',
'698,,,,698,698,,,,698,,698,698,698,698,698,698,698,,,,,,698,698,698',
'698,698,698,698,,,698,,,,,,,698,,,698,698,698,698,698,698,698,698,,698',
'698,698,,698,698,,,,698,,,,,,,,,,,,,,,,,,,,698,,,698,,,698,698,,,698',
',,,,,,,,,,,,,,,,,,698,698,698,698,698,698,,,,698,698,,,,,,,698,,,698',
'698,698,709,709,709,,709,,,,709,709,,,,709,,709,709,709,709,709,709',
'709,,,,,,709,709,709,709,709,709,709,,,709,,,,,,,709,,,709,709,709,709',
'709,709,709,709,,709,709,709,,709,709,,,,709,,,,,,,,,,,,,,,,,,,,709',
',,709,,,709,709,,,709,,,,,,,,,,,,,,,,,,,709,709,709,709,709,709,,,,709',
'709,,,,,,,709,,,709,709,709,710,710,710,,710,,,,710,710,,,,710,,710',
'710,710,710,710,710,710,,,,,,710,710,710,710,710,710,710,,,710,,,,,',
',710,,,710,710,710,710,710,710,710,710,,710,710,710,,710,710,,710,710',
'710,,,,,,,,,,,,,,,,,,,,710,,,710,,,710,710,,,710,,,,,,710,,,,,,,,710',
',,,,710,710,710,710,710,710,,,,710,710,,,,,,,710,,,710,710,710,716,716',
'716,,716,,,,716,716,,,,716,,716,716,716,716,716,716,716,,,,,,716,716',
'716,716,716,716,716,,,716,,,,,,,716,,,716,716,716,716,716,716,716,716',
',716,716,716,,716,716,,716,716,716,,,,,,,,,,,,,,,,,,,,716,,,716,,,716',
'716,,,716,,716,,,,716,,,,,,,,716,,,,,716,716,716,716,716,716,,,,716',
'716,,,,,,,716,,,716,716,716,721,721,721,,721,,,,721,721,,,,721,,721',
'721,721,721,721,721,721,,,,,,721,721,721,721,721,721,721,,,721,,,,,',
',721,,,721,721,721,721,721,721,721,721,721,721,721,721,,721,721,,721',
'721,721,,,,,,,,,,,,,,,,,,,,721,,,721,,,721,721,,,721,,721,,,,721,,,',
',,,,721,,,,,721,721,721,721,721,721,,,,721,721,,,,,,,721,,721,721,721',
'721,724,724,724,,724,,,,724,724,,,,724,,724,724,724,724,724,724,724',
',,,,,724,724,724,724,724,724,724,,,724,,,,,,,724,,,724,724,724,724,724',
'724,724,724,724,724,724,724,,724,724,,724,724,724,,,,,,,,,,,,,,,,,,',
',724,,,724,,,724,724,,,724,,,,,,724,,,,,,,,724,,,,,724,724,724,724,724',
'724,,,,724,724,,,,,,,724,,724,724,724,724,740,740,740,,740,,,,740,740',
',,,740,,740,740,740,740,740,740,740,,,,,,740,740,740,740,740,740,740',
',,740,,,,,,,740,,,740,740,740,740,740,740,740,740,,740,740,740,,740',
'740,,740,740,740,,,,,,,,,,,,,,,,,,,,740,,,740,,,740,740,,,740,,,,,,740',
',,,,,,,740,,,,,740,740,740,740,740,740,,,,740,740,,,,,,,740,,,740,740',
'740,762,762,762,,762,,,,762,762,,,,762,,762,762,762,762,762,762,762',
',,,,,762,762,762,762,762,762,762,,,762,,,,,,,762,,,762,762,762,762,762',
'762,762,762,,762,762,762,,762,762,,762,762,762,,,,,,,,,,,,,,,,,,,,762',
',,762,,,762,762,,,762,,762,,,,762,,,,,,,,762,,,,,762,762,762,762,762',
'762,,,,762,762,,,,,,,762,,,762,762,762,774,774,774,,774,,,,774,774,',
',,774,,774,774,774,774,774,774,774,,,,,,774,774,774,774,774,774,774',
',,774,,,,,,,774,,,774,774,774,774,774,774,774,774,774,774,774,774,,774',
'774,,774,774,774,,,,,,,,,,,,,,,,,,,,774,,,774,,,774,774,,,774,,774,',
'774,,774,,,,,,,,774,,,,,774,774,774,774,774,774,,,,774,774,,,,,,,774',
',774,774,774,774,796,796,796,,796,,,,796,796,,,,796,,796,796,796,796',
'796,796,796,,,,,,796,796,796,796,796,796,796,,,796,,,,,,,796,,,796,796',
'796,796,796,796,796,796,,796,796,796,,796,796,,796,796,796,,,,,,,,,',
',,,,,,,,,,796,,,796,,,796,796,,,796,,,,,,796,,,,,,,,796,,,,,796,796',
'796,796,796,796,,,,796,796,,,,,,,796,,,796,796,796,803,803,803,,803',
',,,803,803,,,,803,,803,803,803,803,803,803,803,,,,,,803,803,803,803',
'803,803,803,,,803,,,,,,,803,,,803,803,803,803,803,803,803,803,,803,803',
'803,,803,803,,803,803,803,,,,,,,,,,,,,,,,,,,,803,,,803,,,803,803,,,803',
',,,,,803,,,,,,,,803,,,,,803,803,803,803,803,803,,,,803,803,,,,,,,803',
',,803,803,803,816,816,816,,816,,,,816,816,,,,816,,816,816,816,816,816',
'816,816,,,,,,816,816,816,816,816,816,816,,,816,,,,,,,816,,,816,816,816',
'816,816,816,816,816,,816,816,816,,816,816,,816,816,816,,,,,,,,,,,,,',
',,,,,,816,,,816,,,816,816,,,816,,,,,,816,,,,,,,,816,,,,,816,816,816',
'816,816,816,,,,816,816,,,,,,,816,,,816,816,816,817,817,817,,817,,,,817',
'817,,,,817,,817,817,817,817,817,817,817,,,,,,817,817,817,817,817,817',
'817,,,817,,,,,,,817,,,817,817,817,817,817,817,817,817,,817,817,817,',
'817,817,,817,817,817,,,,,,,,,,,,,,,,,,,,817,,,817,,,817,817,,,817,,',
',,,817,,,,,,,,817,,,,,817,817,817,817,817,817,,,,817,817,,,,,,,817,',
',817,817,817,818,818,818,,818,,,,818,818,,,,818,,818,818,818,818,818',
'818,818,,,,,,818,818,818,818,818,818,818,,,818,,,,,,,818,,,818,818,818',
'818,818,818,818,818,,818,818,818,,818,818,,818,818,818,,,,,,,,,,,,,',
',,,,,,818,,,818,,,818,818,,,818,,,,,,818,,,,,,,,818,,,,,818,818,818',
'818,818,818,,,,818,818,,,,,,,818,,,818,818,818,819,819,819,,819,,,,819',
'819,,,,819,,819,819,819,819,819,819,819,,,,,,819,819,819,819,819,819',
'819,,,819,,,,,,,819,,,819,819,819,819,819,819,819,819,,819,819,819,',
'819,819,,819,819,819,,,,,,,,,,,,,,,,,,,,819,,,819,,,819,819,,,819,,',
',,,819,,,,,,,,819,,,,,819,819,819,819,819,819,,,,819,819,,,,,,,819,',
',819,819,819,821,821,821,,821,,,,821,821,,,,821,,821,821,821,821,821',
'821,821,,,,,,821,821,821,821,821,821,821,,,821,,,,,,,821,,,821,821,821',
'821,821,821,821,821,,821,821,821,,821,821,,821,821,821,,,,,,,,,,,,,',
',,,,,,821,,,821,,,821,821,,,821,,,,,,821,,,,,,,,821,,,,,821,821,821',
'821,821,821,,,,821,821,,,,,,,821,,,821,821,821,876,876,876,,876,,,,876',
'876,,,,876,,876,876,876,876,876,876,876,,,,,,876,876,876,876,876,876',
'876,,,876,,,,,,,876,,,876,876,876,876,876,876,876,876,,876,876,876,',
'876,876,,876,876,876,,,,,,,,,,,,,,,,,,,,876,,,876,,,876,876,,,876,,',
',,,876,,,,,,,,876,,,,,876,876,876,876,876,876,,,,876,876,,,,,,,876,',
',876,876,876,890,890,890,,890,,,,890,890,,,,890,,890,890,890,890,890',
'890,890,,,,,,890,890,890,890,890,890,890,,,890,,,,,,,890,,,890,890,890',
'890,890,890,890,890,,890,890,890,,890,890,,890,890,890,,,,,,,,,,,,,',
',,,,,,890,,,890,,,890,890,,,890,,,,,,890,,,,,,,,890,,,,,890,890,890',
'890,890,890,,,,890,890,,,,,,,890,,,890,890,890,910,910,910,,910,,,,910',
'910,,,,910,,910,910,910,910,910,910,910,,,,,,910,910,910,910,910,910',
'910,,,910,,,,,,,910,,,910,910,910,910,910,910,910,910,910,910,910,910',
',910,910,,910,910,910,,,,,,,,,,,,,,,,,,,,910,,,910,,,910,910,,,910,',
',,910,,910,,,,,,,,910,,,,,910,910,910,910,910,910,,,,910,910,,,,,,,910',
',910,910,910,910,911,911,911,,911,,,,911,911,,,,911,,911,911,911,911',
'911,911,911,,,,,,911,911,911,911,911,911,911,,,911,,,,,,,911,,,911,911',
'911,911,911,911,911,911,,911,911,911,,911,911,,911,911,911,,,,,,,,,',
',,,,,,,,,,911,,,911,,,911,911,,,911,,,,,,911,,,,,,,,911,,,,,911,911',
'911,911,911,911,,,,911,911,,,,,,,911,,,911,911,911,923,923,923,,923',
',,,923,923,,,,923,,923,923,923,923,923,923,923,,,,,,923,923,923,923',
'923,923,923,,,923,,,,,,,923,,,923,923,923,923,923,923,923,923,,923,923',
'923,,923,923,,,,923,,,,,,,,,,,,,,,,,,,,923,,,923,,,923,923,,,923,,,',
',,,,,,,,,,,,,,,923,923,923,923,923,923,,,,923,923,,,,,,,923,,,923,923',
'923,932,932,932,,932,,,,932,932,,,,932,,932,932,932,932,932,932,932',
',,,,,932,932,932,932,932,932,932,,,932,,,,,,,932,,,932,932,932,932,932',
'932,932,932,,932,932,932,,932,932,,,,932,,,,,,,,,,,,,,,,,,,,932,,,932',
',,932,932,,,932,,,,,,,,,,,,,,,,,,,932,932,932,932,932,932,,,,932,932',
',,,,,,932,,,932,932,932,958,958,958,,958,,,,958,958,,,,958,,958,958',
'958,958,958,958,958,,,,,,958,958,958,958,958,958,958,,,958,,,,,,,958',
',,958,958,958,958,958,958,958,958,,958,958,958,,958,958,,958,958,958',
',,,,,,,,,,,,,,,,,,,958,,,958,,,958,958,,,958,,958,,,,958,,,,,,,,958',
',,,,958,958,958,958,958,958,,,,958,958,,,,,,,958,,,958,958,958,983,983',
'983,,983,,,,983,983,,,,983,,983,983,983,983,983,983,983,,,,,,983,983',
'983,983,983,983,983,,,983,,,,,,,983,,,983,983,983,983,983,983,983,983',
',983,983,983,,983,983,,,,983,,,,,,,,,,,,,,,,,,,,983,,,983,,,983,983',
',,983,,,,,,,,,,,,,,,,,,,983,983,983,983,983,983,,,,983,983,,,,,,,983',
',,983,983,983,1032,1032,1032,,1032,,,,1032,1032,,,,1032,,1032,1032,1032',
'1032,1032,1032,1032,,,,,,1032,1032,1032,1032,1032,1032,1032,,,1032,',
',,,,,1032,,,1032,1032,1032,1032,1032,1032,1032,1032,1032,1032,1032,1032',
',1032,1032,,1032,1032,1032,,,,,,,,,,,,,,,,,,,,1032,,,1032,,,1032,1032',
',,1032,,1032,,1032,,1032,,,,,,,,1032,,,,,1032,1032,1032,1032,1032,1032',
',,,1032,1032,226,226,,,226,,1032,,1032,1032,1032,1032,,226,226,,226',
'226,226,226,226,226,226,,,226,226,,,,226,226,226,226,,,,,,226,,,,,,',
',226,226,,226,226,226,226,226,226,226,226,226,226,226,,,226,,,,,,,,',
',227,227,,,227,,,,,,226,,,227,227,226,227,227,227,227,227,227,227,,',
'227,227,,,,227,227,227,227,,,,,,227,,,,,,,,227,227,,227,227,227,227',
'227,227,227,227,227,227,227,,977,227,977,977,977,977,977,,,,,275,275',
',,275,977,,,,,227,,,275,275,227,275,275,275,275,275,275,275,,,275,275',
'977,,,275,275,275,275,,,977,977,977,977,,,,,,,,275,275,,275,275,275',
'275,275,275,275,275,275,275,275,,,275,,,,,,,,,977,469,469,,,469,,,,',
',275,,,469,469,275,469,469,469,469,469,469,469,,,469,469,,,,469,469',
'469,469,,,,,,469,,,,,,,,469,469,,469,469,469,469,469,469,469,469,469',
'469,469,,,469,,,,,,,,,,470,470,,,470,,,,,,469,,,470,470,469,470,470',
'470,470,470,470,470,,,470,470,,,,470,470,470,470,,,,,,470,,,,,,,,470',
'470,,470,470,470,470,470,470,470,470,470,470,470,,,470,,,,,,,,,,534',
'534,,,534,,,,,,470,,,534,534,470,534,534,534,534,534,534,534,,,534,534',
',,,534,534,534,534,,,,,,534,,,,,,,,534,534,,534,534,534,534,534,534',
'534,534,534,534,534,,,534,,,,,,,,,,535,535,,,535,,,,,,534,,,535,535',
'534,535,535,535,535,535,535,535,,,535,535,,,,535,535,535,535,,,,,,535',
',,,,,,,535,535,,535,535,535,535,535,535,535,535,535,535,535,,,535,,',
',,,,,,,546,546,,,546,,,,,,535,,,546,546,535,546,546,546,546,546,546',
'546,,,546,546,,,,546,546,546,546,,,,,,546,,,,,,,,546,546,,546,546,546',
'546,546,546,546,546,546,546,546,,,546,,,,,,,,,,547,547,,,547,,,,,,546',
',,547,547,546,547,547,547,547,547,547,547,,,547,547,,,,547,547,547,547',
',,,,,547,,,,,,,,547,547,,547,547,547,547,547,547,547,547,547,547,547',
',,547,,,,,,,,,,606,606,,,606,,,,,,547,,,606,606,547,606,606,606,606',
'606,606,606,,,606,606,,,,606,606,606,606,,,,,,606,,,,,,,,606,606,,606',
'606,606,606,606,606,606,606,606,606,606,,,606,,,,,,,,,,607,607,,,607',
',,,,,606,,,607,607,606,607,607,607,607,607,607,607,,,607,607,,,,607',
'607,607,607,,,,,,607,,,,,,,,607,607,,607,607,607,607,607,607,607,607',
'607,607,607,,,607,,,,,,,,,,655,655,,,655,,,,,,607,,,655,655,607,655',
'655,655,655,655,655,655,,,655,655,,,,655,655,655,655,,,,,,655,,,,,,',
',655,655,,655,655,655,655,655,655,655,655,655,655,655,,,655,,,,,,,,',
',656,656,,,656,,,,,,655,,,656,656,655,656,656,656,656,656,656,656,,',
'656,656,,,,656,656,656,656,,,,,,656,,,,,,,,656,656,,656,656,656,656',
'656,656,656,656,656,656,656,,,656,,,,,,,,,,772,772,,,772,,,,,,656,,',
'772,772,656,772,772,772,772,772,772,772,,,772,772,,,,772,772,772,772',
',,,,,772,,,,,,,,772,772,,772,772,772,772,772,772,772,772,772,772,772',
',,772,,,,,,,,,,773,773,,,773,,,,,,772,,,773,773,772,773,773,773,773',
'773,773,773,,,773,773,,,,773,773,773,773,,,,,,773,,,,,,,,773,773,,773',
'773,773,773,773,773,773,773,773,773,773,,,773,,,,,,,,,,1028,1028,,,1028',
',,,,,773,,,1028,1028,773,1028,1028,1028,1028,1028,1028,1028,,,1028,1028',
',,,1028,1028,1028,1028,,,,,,1028,,,,,,,,1028,1028,,1028,1028,1028,1028',
'1028,1028,1028,1028,1028,1028,1028,,,1028,,,,,,,,,,1033,1033,,,1033',
',,,,,1028,,,1033,1033,1028,1033,1033,1033,1033,1033,1033,1033,,,1033',
'1033,,,,1033,1033,1033,1033,,,,,,1033,,,,,,,,1033,1033,,1033,1033,1033',
'1033,1033,1033,1033,1033,1033,1033,1033,,,1033,,,,,,,,,,1034,1034,,',
'1034,,,,,,1033,,,1034,1034,1033,1034,1034,1034,1034,1034,1034,1034,',
',1034,1034,,,,1034,1034,1034,1034,,,,,,1034,,,,,,,,1034,1034,,1034,1034',
'1034,1034,1034,1034,1034,1034,1034,1034,1034,,1052,1034,1052,1052,1052',
'1052,1052,,,,,,,,,,1052,,,,,1034,,,,,1034,,,,,,,,,,,,1052,,,,,,,,,1052',
'1052,1052,1052,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1052' ]
        racc_action_check = arr = ::Array.new(25435, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    21,  2950,    49,   nil,    68,   nil,   nil,  6922,   757,
   nil,  1997,  2135,   -50,   nil,   -41,   -31,   537,    27,   -40,
   -43,   nil,   -71,  7058,  3224,   152,   nil,   -68,   nil,   145,
  1080,  1208,  7194,  7330,  7466,   nil,  3087,  7602,  7738,   nil,
    66,   167,   195,   173,   537,  7874,  8010,   109,  8146,   175,
   408,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1336,   nil,  8282,   nil,   nil,   -22,   nil,  8418,  8554,   nil,
   nil,  8690,  8826,   236,   nil,  2273,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -35,   nil,   nil,   nil,   nil,   nil,   nil,   191,
   193,   197,   222,  2411,   nil,   nil,   nil,     0,   nil,   nil,
   135,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  8962,   nil,   nil,   nil,   nil,  9098,  9234,
  9370,  9506,  9642,   248,   nil,   246,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   233,   nil,  3224,
  9778,  9914, 10050, 10186, 10322, 10458, 23997, 24070,   nil, 10594,
 10730, 10866,   nil,   nil,   445,    86,   104,   313,   106,   231,
   322,   nil, 11002,  3361,   333, 11138, 11274, 11410, 11546, 11682,
 11818, 11954, 12090, 12226, 12362, 12498, 12634, 12770, 12906, 13042,
 13178, 13314, 13450, 13586, 13722, 13858, 13994,   nil,   nil,   nil,
   nil, 14130,   nil,   nil,   nil, 24143,   nil,   nil,   340, 14266,
   nil,   nil,   372,   nil,   nil,   nil, 14402,   nil,   nil, 14538,
   nil,  3361,   nil,   366,   376,   nil, 14674,   431, 14810,   nil,
 14946, 15082,   nil,   nil,   149,   nil,   nil, 15218,  1283,   nil,
   380,  3498,   407,   468,   434, 15354,  3635,   457,   548,   601,
   530,   615,   nil,   514,   480,   -19,   nil,   nil,   nil,   531,
   594,   501, 15490,   nil,   299,   565,   569,   619,   nil,   583,
 15626,   nil, 15762,  3772,  1288,   533, 15898, 16034,   nil,   nil,
   471,   697,   -11,   -10, 16170,  3909,  4046,   284,   649,   539,
    11,    24,   683,   625,    27,   661,   nil,   nil, 16306,   nil,
 16442,   -20,   102,   212,   215,   237,   365,   382,   416,   422,
   nil,   459,   nil,   nil,   nil,   nil,   nil,   310,   nil,   330,
   nil,   376,   nil,   567,   333,   nil,   569,   nil,   571,   -31,
   nil,   575,   -27,   nil,   342,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  2549,
   nil,   nil,   nil,   nil,   597,   nil,   591,   nil, 16578,   595,
   nil,   586,   nil,   780,   150,   nil,   nil,   nil,  2950,   nil,
   nil,   nil,   nil,   nil,  3087,   630,   nil,   nil,   636,   638,
   330,   362,  1468,   nil,   nil,   nil,   270,   405,   681,   nil,
   nil,  1596,  1728,   nil,   nil,   nil,   -14,   nil,   694, 24216,
 24289, 16714,   215, 16850, 16986, 17122,  4046,  4183,   573,   708,
   720,   723,   742,   755,  1028,  1418,  1678,  4320,  4457,  4594,
  4731,  4868,  5005,   497,   632,  5142,  5279,  3498,   758,   820,
   nil,  1860,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   707,   709,   nil,   nil, 17258,   nil,   nil, 17394,   nil, 17530,
   nil,   nil,   nil,   nil, 17666,  1341,   714,   716,   nil,   nil,
   719, 17802,   728, 17938, 24362, 24435,   853,   765,   nil,   nil,
 18074,   727,   nil,   773, 18210, 18346, 24508, 24581,   893,  3635,
 18482,   861,   861,   745,   nil,   nil,   126,   429,   778,   763,
   nil,   449,   803,   nil,   607,   nil,   763,   774,   nil,   776,
   777,   778,   nil,   nil,   nil,   nil,   nil,   nil,   767,   nil,
   540,   nil, 18618,   nil,   nil,   nil,   859,   nil,   nil,   nil,
   861,   nil,   nil,   869,  4183,   910,   nil,  4320,    38,   916,
   923,   917,   926,   nil,   nil, 18754, 24654, 24727,    28,   nil,
   175,   273,   -21,   nil,   915,   nil,   835, 18890,   nil,   853,
   nil,   nil,   nil, 19026,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   173,   nil,   nil,   347,   nil,
   nil,   nil,   814,   nil,   nil,   816,   nil,  4457,   nil,  2687,
   nil,   820, 19162, 19298, 19434, 24800, 24873, 19570,   400,   855,
 19706, 19842, 19978, 20114,   858,   nil,   nil,   nil, 20250, 20386,
   859,   nil,   nil,   nil,   246,   279,   540,   675,   831,   836,
   nil,   -50,   941,   -10,   nil,   862,   nil,   969,   nil,   nil,
   850,   nil,   892, 20522,   nil,   nil,   nil,    56, 20658,   854,
   nil,   863,    26,   130,   900,   304,   948,   901,   866, 20794,
 20930,   936,   938,    10,   217,   nil, 21066,   nil,   nil,   nil,
   nil, 21202,   nil,   nil, 21338,   nil,   nil,   nil,    25,   880,
   225,   nil,   nil,   639,   738,   nil,   873,   nil,  1008,   nil,
 21474,   nil,   675,   nil,   879,   263,   nil,   884,   nil,   nil,
   nil,   nil,   801,   nil,   997,   nil,   nil,   nil,   nil,   nil,
  1022,   nil, 21610,   909,    36,    37,   159,   160,  4594,   nil,
   949,   nil, 24946, 25019, 21746,   nil,   nil,   nil,   784,  4731,
  4868,  1172,  1300,  2825,    20,  1045,  5005,   nil,   nil,   305,
   nil,   nil,   nil,   924,   nil,   911, 21882,   915,   297,   316,
   810,   945,  3772, 22018,   nil,   916,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 22154, 22290, 22426, 22562,
   374, 22698,   nil,   nil,  1399,   nil,  5142,   nil,   nil,   934,
   nil,   -43,   nil,   nil,   nil,   926,   173,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  5279,   nil,   931,   979,   nil,   nil,
   463,   nil,  5416,  5553,   937,   943,   941,   nil,   nil,   nil,
   948,   950,   nil,   952,   956,   nil,   961,   nil,   975,   777,
   981,   135,   nil,  1104,   nil,   nil, 22834,   nil,  5690,  1105,
   nil,   nil,    -7,    39,  1106,   310,   988,   nil,   992,  5827,
 22970,   303,  1115,   nil,   999,   419,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   988,   nil,   nil,  1007,   379,   nil,   nil,
 23106, 23242,  3909,  1009,  1010,   nil,  1011,  1012,  1014,   nil,
  1036,  1035,  1026, 23378,   nil,   nil,   nil,   nil,  5964,  6101,
   nil,    -8, 23514,   nil,   nil,  1059,  1167,  1201,   nil,   nil,
  1560,   nil,  1659,   nil,  1791,   nil,  1853,   nil,   nil,   nil,
   nil,   277,   533,  1051,   nil,    -1,   nil,   nil, 23650,  6238,
   nil,   nil,  1181,   431,   nil,   nil,  1186,   nil,   nil,  1107,
   nil,   324,   nil,   nil,  1860,   nil,   nil, 24132,   nil,  7102,
   nil,   nil,  1089, 23786,  1006,  1144,   nil,  1192,  6375,  1050,
  1052,  1084,  1147,  1088,   nil,   nil,   nil,   528,   nil,   nil,
   nil,  1075,  1076,  1084,  1085,  1090,   668,  1102,   845,  6512,
   nil,   258,   nil,   nil,  6649,   nil,  6786,  1103,   nil,   nil,
  1104,  1107,  1109,  1111,   nil,  1112,   nil,  1116, 25092,   nil,
   nil,  1236, 23922, 25165, 25238,  1118,   nil,  1209,  7782,   nil,
   nil,   nil,   nil,   912,  1124,   830,   nil,   nil,   nil,  1248,
  1250,   nil, 25300,   nil,  7918,   nil,  8054,   nil,  8190,   nil,
   nil,  1175,  1177,   nil,  1142,     6,     8,    70,  1152,   nil,
  1140,  1145,   nil,   nil,   nil,  1160,  1161,  1165,  1166,    19,
   nil,  8462,   nil,   nil,   nil,   nil,  1168,   nil ]

racc_action_default = [
    -1,  -643,  -642,  -643,    -2,  -629,    -4,    -5,  -643,    -8,
    -9,  -643,  -643,  -643,   -35,  -643,  -643,   -40,  -643,  -643,
  -294,   -51,  -631,  -643,   -56,   -61,   -62,   -63,   -67,  -273,
  -273,  -273,  -309,  -343,  -344,   -79,  -642,   -83,   -91,   -93,
  -643,  -536,  -537,  -643,  -643,  -643,  -643,  -232,  -643,  -631,
  -246,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -616,  -296,  -298,  -305,  -307,  -317,  -423,  -643,  -643,   -58,
   -58,  -629,  -643,  -327,  -334,  -643,  -345,  -346,  -348,  -349,
  -350,  -351,  -352,  -353,  -354,  -355,  -356,  -357,  -366,  -468,
  -469,  -470,  -471,  -472,  -473,  -642,  -476,  -642,  -642,  -642,
  -486,  -642,  -642,  -642,  -514,  -520,  -521,  -614,  -525,  -526,
  -615,  -528,  -529,  -530,  -531,  -532,  -533,  -534,  -535,  -540,
  -541,  1088,    -3,  -630,  -638,  -639,  -640,    -7,  -643,  -643,
  -643,  -643,  -643,  -643,   -23,  -643,  -122,  -123,  -124,  -125,
  -126,  -127,  -128,  -129,  -130,  -134,  -135,  -136,  -137,  -138,
  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,
  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,
  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,
  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,
  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,
  -189,  -190,  -191,  -192,  -193,  -194,  -195,  -196,  -197,  -198,
  -199,  -200,  -201,  -202,  -203,  -204,  -205,   -28,  -131,  -642,
  -643,  -643,  -643,  -643,  -643,  -642,  -643,  -643,  -626,  -643,
  -643,  -631,  -632,   -55,  -643,  -536,  -537,  -643,  -294,  -643,
  -643,  -238,  -643,  -642,  -643,  -643,  -643,  -643,  -643,  -643,
  -643,  -643,  -643,  -643,  -643,  -643,  -643,  -643,  -643,  -643,
  -643,  -643,  -643,  -643,  -643,  -643,  -643,  -247,  -248,  -249,
  -250,  -643,  -359,  -452,  -431,  -643,  -627,  -628,   -68,  -643,
  -316,  -358,  -643,  -445,  -447,   -74,  -642,  -442,   -75,  -631,
   -76,  -253,  -268,  -642,  -642,  -272,  -643,  -278,  -643,  -609,
  -643,  -643,   -77,   -78,  -629,   -17,   -18,  -643,   -21,   -22,
   -81,  -642,  -631,  -643,   -84,   -87,  -642,   -99,  -100,  -643,
  -643,  -107,  -309,  -312,  -631,  -435,  -343,  -344,  -347,  -443,
  -643,   -89,  -643,   -95,  -304,  -522,  -523,  -643,  -226,  -227,
  -643,  -239,  -643,  -642,  -300,  -631,  -642,  -642,  -318,  -319,
  -568,   -57,  -643,  -643,  -643,  -642,  -642,  -629,  -643,  -630,
  -536,  -537,  -643,  -643,  -294,  -643,  -376,  -377,  -643,  -330,
  -643,  -122,  -123,  -165,  -166,  -167,  -183,  -188,  -195,  -198,
  -337,  -643,  -536,  -537,  -604,  -605,  -474,  -643,  -498,  -643,
  -500,  -643,  -502,  -643,  -643,  -481,  -643,  -642,  -643,  -643,
  -494,  -643,  -643,  -496,  -643,  -513,  -515,  -516,  -517,  -518,
    -6,  -641,   -29,   -30,   -31,   -32,   -33,   -10,   -11,  -643,
   -25,   -26,   -27,  -132,  -643,   -36,   -38,   -39,  -643,  -643,
   -37,  -643,   -41,  -643,  -294,   -49,   -50,  -206,  -258,  -278,
   -52,   -53,   -42,  -207,  -258,  -631,  -263,  -264,  -642,  -642,
  -617,  -618,  -273,  -440,  -619,  -620,  -618,  -617,  -273,  -439,
  -441,  -619,  -620,   -48,  -215,   -54,  -631,  -315,  -643,  -643,
  -643,  -642,  -304,  -643,  -643,  -643,  -216,  -217,  -218,  -219,
  -220,  -221,  -222,  -223,  -228,  -229,  -230,  -231,  -233,  -234,
  -235,  -236,  -237,  -240,  -241,  -242,  -243,  -631,  -251,  -643,
  -453,  -273,  -617,  -618,   -65,   -69,  -274,  -436,  -449,  -452,
  -631,  -631,  -311,  -269,  -643,  -277,  -270,  -643,  -275,  -643,
  -279,  -612,  -613,   -16,  -630,   -20,  -631,   -80,  -302,   -96,
   -85,  -643,  -631,  -642,  -643,  -643,  -106,  -643,  -522,  -523,
  -643,   -92,   -97,  -643,  -643,  -643,  -643,  -643,  -252,  -244,
  -643,  -460,  -643,  -631,  -299,  -254,  -635,  -635,  -643,  -643,
  -607,  -635,  -643,  -424,  -568,  -427,  -603,  -603,  -551,  -553,
  -553,  -553,  -567,  -569,  -570,  -571,  -572,  -573,  -574,  -575,
  -643,  -577,  -643,  -583,  -585,  -586,  -588,  -593,  -595,  -596,
  -598,  -599,  -600,  -643,  -642,  -367,  -368,  -642,  -643,  -643,
  -643,  -643,  -643,  -362,  -455,  -642,  -643,  -643,  -304,   -58,
  -117,  -118,  -643,  -120,  -643,  -294,  -642,  -643,  -335,  -546,
  -340,  -624,  -625,  -643,  -475,  -499,  -504,  -505,  -507,  -477,
  -501,  -478,  -503,  -479,  -480,  -643,  -483,  -485,  -643,  -488,
  -490,  -491,  -643,  -492,  -493,  -643,  -519,  -642,   -24,  -643,
   -34,  -284,  -643,  -643,  -642,  -643,  -643,  -643,  -444,  -643,
  -265,  -267,  -643,  -643,   -70,  -261,  -262,  -437,  -643,  -643,
   -72,  -438,  -314,  -633,  -617,  -618,  -617,  -618,  -631,  -643,
  -430,  -642,   -64,  -432,  -449,  -643,  -450,  -643,  -260,  -310,
  -642,  -276,  -280,  -643,  -610,  -611,   -19,   -82,  -643,   -88,
   -94,  -631,  -617,  -618,  -642,  -103,  -105,  -643,   -90,  -643,
  -643,  -224,  -225,  -631,  -642,  -360,  -642,  -297,  -365,  -301,
  -255,  -637,  -636,  -257,  -637,  -306,  -308,  -608,  -643,  -631,
  -643,  -549,  -550,  -643,  -643,  -560,  -643,  -563,  -643,  -565,
  -643,  -378,  -643,  -380,  -382,  -389,  -574,  -631,  -579,  -587,
  -597,  -601,  -642,  -369,  -642,   -59,  -370,  -371,  -322,  -323,
  -643,  -325,  -643,  -631,  -617,  -618,  -621,  -303,  -642,  -117,
  -118,  -119,  -643,  -643,  -642,  -328,  -542,  -544,  -331,  -642,
  -642,  -568,  -568,  -643,  -631,  -643,  -642,  -482,  -484,  -643,
  -487,  -495,  -497,  -643,  -133,  -282,  -643,  -631,  -617,  -618,
  -618,  -617,  -259,  -643,  -634,  -642,   -44,  -209,   -45,  -210,
   -71,   -46,  -212,   -47,  -211,   -73,  -643,  -643,  -643,  -643,
  -444,  -643,  -412,  -413,  -631,  -415,  -642,  -434,  -433,  -643,
  -446,  -642,  -448,  -271,  -281,   -86,  -101,   -98,  -214,  -313,
   -13,   -15,  -361,  -363,  -642,  -467,  -461,  -642,  -462,  -463,
  -635,  -425,  -642,  -642,  -417,  -631,  -603,  -584,  -602,  -552,
  -553,  -553,  -578,  -553,  -553,  -594,  -553,  -589,  -631,  -643,
  -387,  -643,  -576,  -643,  -364,  -372,  -643,  -374,  -642,  -643,
   -60,  -324,  -643,  -444,  -643,  -117,  -118,  -121,  -631,  -642,
  -643,  -643,  -643,  -338,  -631,  -643,  -341,  -606,  -506,  -509,
  -510,  -511,  -512,  -643,  -489,   -12,  -283,  -444,   -43,  -208,
  -266,  -643,  -245,  -603,  -603,  -394,  -642,  -642,  -642,  -411,
  -643,  -631,  -574,  -643,  -581,  -591,  -454,   -66,  -642,  -642,
  -466,  -643,  -643,  -465,  -256,  -643,  -643,  -643,  -426,  -548,
  -643,  -556,  -643,  -558,  -643,  -561,  -643,  -564,  -566,  -379,
  -381,  -385,  -643,  -390,  -320,  -643,  -375,  -321,  -643,  -642,
  -326,  -444,  -643,  -643,  -332,  -336,  -643,  -545,  -547,  -546,
  -508,  -643,  -392,  -393,  -402,  -396,  -404,  -643,  -407,  -643,
  -409,  -414,  -643,  -643,  -580,  -643,  -451,  -642,  -642,  -108,
  -109,  -643,  -643,  -116,  -464,  -428,  -429,  -631,  -419,  -421,
  -422,  -553,  -553,  -553,  -553,  -383,  -643,  -388,  -643,  -642,
  -280,  -642,  -329,  -543,  -642,  -339,  -642,  -603,  -582,  -395,
  -642,  -642,  -642,  -642,  -592,  -642,  -416,  -590,  -643,  -304,
   -14,  -460,  -642,  -643,  -643,  -115,  -418,  -643,  -643,  -554,
  -557,  -559,  -562,  -643,  -386,  -642,  -456,  -457,  -458,  -643,
  -643,  -391,  -643,  -399,  -643,  -401,  -643,  -405,  -643,  -408,
  -410,  -303,  -621,  -459,  -631,  -617,  -618,  -621,  -114,  -420,
  -553,  -384,  -373,  -333,  -342,  -642,  -642,  -642,  -642,  -444,
  -555,  -643,  -397,  -400,  -403,  -406,  -642,  -398 ]

clist = [
'6,287,230,226,233,292,292,292,445,274,19,276,452,458,602,380,19,443',
'4,139,139,348,464,126,352,353,310,552,357,342,714,234,122,314,355,356',
'293,293,293,516,234,234,234,406,19,319,319,505,780,134,218,879,294,294',
'294,123,9,142,142,144,144,501,9,312,427,430,278,285,288,510,19,499,541',
'717,691,234,234,691,694,234,362,741,565,139,572,412,413,414,415,126',
'594,597,873,388,331,390,392,395,358,400,403,390,658,720,723,635,841',
'747,727,351,351,139,685,351,865,771,344,998,855,950,758,759,1,761,917',
'862,625,826,731,732,632,19,127,636,1000,2,234,234,234,234,19,1024,389',
'436,417,616,436,618,404,133,861,436,863,328,328,442,647,290,302,303',
'463,840,929,696,217,367,419,953,755,880,351,351,351,351,275,684,649',
'9,340,558,683,384,559,349,365,775,416,381,328,620,343,345,553,346,516',
'347,368,453,292,889,617,425,435,891,1014,435,370,779,619,966,435,783',
'969,920,919,921,1024,1069,469,997,691,691,694,446,429,429,563,19,234',
'433,234,234,433,234,1000,462,851,433,234,234,918,350,728,741,508,509',
'870,410,1007,831,681,19,292,507,678,452,458,760,950,292,1046,762,292',
'847,440,441,464,467,443,868,931,699,465,466,1020,887,386,928,387,391',
'708,881,394,293,446,694,638,234,829,397,399,515,515,293,234,402,729',
'234,572,294,287,310,1044,534,537,898,310,687,1047,294,982,598,785,786',
'405,19,701,890,865,19,704,546,126,319,19,512,860,857,542,1018,623,523',
'704,,,820,,862,526,1071,319,,,532,555,560,606,,527,789,556,19,,,524',
',1001,,836,,,525,234,19,19,862,557,561,,,741,530,741,,788,126,614,636',
'614,1030,,554,,,601,1072,,,763,,1021,,704,1022,954,639,351,934,1016',
',957,,,,506,960,,,,,,,,965,511,,,655,939,,883,,,666,,659,,139,,671,',
'328,,810,,833,,797,835,815,453,452,458,,292,,515,515,328,862,665,,1005',
'741,907,807,809,648,,,,812,814,892,893,142,,144,1075,446,691,694,666',
',,972,973,679,462,234,,,,1012,328,,328,1015,,664,,,,,,670,,,,665,,,672',
'838,856,453,292,741,,741,1063,,,894,895,572,572,453,,,,,,,,,,542,788',
',,446,19,,690,,542,936,682,319,,234,,462,741,961,688,689,319,,833,,',
',,462,,888,234,704,848,,697,,,,,,700,,1073,1074,,962,768,436,,453,292',
'1051,,,,,436,436,,,,719,436,436,713,806,808,,909,,914,811,813,,19,446',
',19,,,,807,809,814,812,234,777,462,756,,,,959,,,,,234,453,292,,,,234',
',,435,,,,,828,,,,435,435,6,,328,16,435,435,,446,,16,19,328,139,659,778',
',433,234,793,462,784,827,1048,,988,433,433,,,,666,433,433,671,822,805',
'659,16,,,,,794,515,,,,,1009,542,142,,144,1049,,1050,9,665,,909,837,319',
'858,16,854,858,,845,,849,,,319,366,,429,1079,,896,,436,,,,,,,,,908,',
',,,,,850,,659,453,1017,,292,914,839,877,914,877,914,,,,,,,,,,,,,882',
',,16,,,446,,,313,19,659,16,,462,,234,872,435,,,19,19,,,139,,,19,,,,',
',,915,,515,854,,,,,,,433,,,328,1064,735,737,739,704,897,,,,,328,914',
',914,822,914,,914,955,19,,,,976,978,980,,29,,,933,,963,29,,,,19,,,914',
',,,,19,19,,29,,16,,431,659,,431,,29,29,29,431,29,,,,,,,,234,,19,,,16',
',938,,,,,,19,234,,,854,29,,949,,,29,29,964,,29,,968,975,975,975,,351',
',,,,,,,,,,,967,984,351,,,,19,19,,,991,,1053,1055,1057,1059,,1060,858',
',,915,,16,915,,915,16,424,,,,16,29,,,,19,29,29,29,29,29,,,1033,,1036',
',,,1013,313,,,845,,,,16,,1027,,,,,19,1082,1083,1084,1085,16,16,,453',
'292,,,1087,877,,,,,864,,866,19,975,975,975,975,19,975,19,,,,,915,446',
'915,,915,,915,462,,,328,234,,462,877,659,,,,328,,313,,,,,313,,,915,29',
'29,29,29,29,29,29,,,,29,29,29,,975,975,975,975,,,,,,,29,975,,,,,,,,',
',599,600,,,,328,,,916,,,,,941,943,,945,947,,948,,,,,,29,,,,,,,29,,,29',
',,,,,,,,,,,,,,,,,29,,,,29,,,,,29,,,32,,,,,,32,,,,,16,,,,,,,,,,32,,,29',
',,,,,32,32,32,,32,29,29,29,,,,,18,,,,,,18,,,,,,,,,,,1002,32,1003,,1004',
',32,32,,,32,,,,,,,18,,,,,16,,,16,,,,,1039,1040,1041,1042,,,,1023,,1025',
',,,18,,,,,,,,,,,,,,,,,,,32,,,,,32,32,32,32,32,,,,16,,,,,,431,,,,,,,',
',431,431,,29,,,431,431,1070,1080,,,,,18,,,,,,,,1076,18,1077,752,1078',
',754,,,,,,,,,,,,,,,,,,,,,,,1086,,,,,29,,,,,,,,,29,,,32,32,32,32,32,32',
'32,,,,32,32,32,,29,,,,,,,,,,32,,,,,,,,,,,,,,16,,,,18,,18,,,18,,16,16',
',18,,,,16,,29,,32,29,,,,,18,32,,29,32,,,431,,,,,,,,29,,,,,,29,32,,,',
'32,,,,16,32,,,,,,,,,,,,,,29,,,16,,,29,29,,,,16,16,32,,29,29,,,18,884',
'29,29,18,32,32,32,,18,,,,,,,,,16,903,,,,,,,,,,16,,,,,,,18,,,,,,,,,,',
',18,18,,,,,,,,,,926,,,,,,,,,16,16,,,994,,,,,930,,,,,,,,935,,,,,,,,,',
',,,,16,,,29,,,,,,29,,,956,,29,29,,,,,,29,,32,,,,,,16,,,,,,,,,29,,,,',
',,,,20,,,16,,,20,,16,,16,,,,29,986,987,,,,,,,,,,,,,32,,,29,,20,321,321',
',32,,29,29,,,,,1011,,,,,,,,,32,,,,,20,,,,29,,29,,,,364,18,,,,1031,,29',
'29,,,,,,,,,,,,,,,,,,1045,,,32,,,32,,,,,,,,32,,,,,,29,29,,,,20,32,,,',
'41,,32,,20,,41,,,,,,,,,18,,,18,,,29,426,439,,,32,,,,,,32,32,41,317,317',
',,,,32,32,,,,,32,32,,29,,,,,,,,,,41,,,,,,,,18,,360,29,,382,18,,29,,29',
',,,,18,18,,,,,18,18,20,,434,29,,434,,518,,520,434,521,522,,,,,,,,,,',
',20,,,,,,41,,,,,,,,,41,,,,,,,,,,,,,,,,,32,,562,,,,32,,,,,32,32,,,,,',
'32,,,,,,,,,,,,,,20,,,32,20,,,,321,20,18,,,,,,,,,,,18,18,,,321,32,,18',
',,,,,,,20,,41,,,,,,32,18,,,20,20,,651,32,32,,,,,,,,615,41,615,,,,,18',
',,,,,,,32,,32,,,,,,,,18,,,32,32,,,,18,18,,,,,,,,,,,,,,,,,,,,,,,,,18',
',,,,,41,,32,32,41,18,,,317,41,,692,,,562,,695,,,,,,,,,317,,,,,,,,32',
',,41,,,,,,,,18,18,,,41,41,,,,,,,,,,,,382,32,382,,,,,,,,,,,42,18,,,,748',
'42,,,32,,,,,32,,32,20,,,,,,,321,,,,,,18,,32,321,42,318,318,,,,,,,,,',
',,,,,18,,,,,18,,18,,42,,,,,,,,,,361,,,383,,795,,,,,,,,692,562,,,20,',
',20,,,,,,,,,,,,,,,,,,,,,,,,,,834,,,,,42,,,,,,,,,42,,,,,,,,,846,20,,',
'41,692,,434,562,,,317,,,,,434,434,,,317,,434,434,867,,,,,,,,,,,,,,,',
',,,,,,439,,,,,,321,,,,,,,,,,,321,,,,,,,,,,,41,,,41,42,,906,,,,,,,,,',
',,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,20,,,,,41,,,,,,20,20,,,,,902,20,,',
',,,,,,,,,,,,,,434,,,,,,,,,42,,,,42,,,,318,42,,,317,,20,,,,,,,,,317,',
'318,,,562,,,,20,,,,42,,,,20,20,,,,,,,42,42,,,,,,,,,,,,383,,383,,,20',
',,,,,,,,,1010,20,,,,,41,,,,,,,,,,,41,41,,,,,,41,,,,,,,,,,,615,,,,,20',
'20,,,993,,,,,,,,,,,,,,,,,,,,41,,,,,,,20,,,,,,,,,,,41,,,,,,,,41,41,,',
',615,,,,,20,,,,,,,,,,,,,,,,41,,,,,20,,,,,20,41,20,,,,,,,,,,,,,42,,,',
',,,318,,,,,,,,,318,,,,382,,,,,41,41,,,989,,,,,,,,,,,,,,,,,,,,,,,,,,',
'41,,,,,,,,,,,,,,42,,,42,,,,,,,382,,,,,41,,,,,,,,,,,,,,,,,,,,,41,,241',
',,41,,41,,,,291,291,291,,,,42,,,,,,,338,339,,341,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,318,,,,,,,,,,,318,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,42,42,,,,,,42,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,291,438,,,444,291,,,,444,,,,,,42,,,',
',,,241,42,42,476,477,478,479,480,481,482,483,484,485,486,487,488,489',
'490,491,492,493,494,495,496,497,,,42,,498,,,,,,,,291,42,,,,,,291,,,291',
',,,,,,291,,291,,291,291,,,,,,,,,,,,,383,,,,,42,42,,,990,,,,,,,,,,,,',
',,,,548,,549,,,,291,291,,,42,,,,,,,,,,,,,,,,,,,,,,,,383,,,,,42,,,,,',
',,,,,,,,,,,,,,,42,,,,,42,,42,,,,,,,,,,,,,,,,,,,,,291,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,291,,444,444,444,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,291,,,291,,291,,,,,,,,,,,,,,291,,,,,,,,,,,711,712,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291,,,,,,,,,,,,,,,,,,,,,,,291,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291,444,291,,,802,,,291,291',
'444,444,,,,,444,444,,,,,,,,,,,,,,,,,,,,,,,,291,,,,,,,,,,,,,,,,,444,',
',,,,291,,,,,291,,,291,,,,,,,,,,,,,,,,291,,,,,,,,,,,,,,,,,,,,,,291,,',
',,,,,,,,,291,,,,,,,,,,,,,,,,,,,,,,291,,,,,,,444,,,,,,,,,,,,,444,444',
'444,444,,912,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291,444,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,291,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,291' ]
        racc_goto_table = arr = ::Array.new(3797, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,85,39,37,26,45,45,45,35,171,34,37,49,49,113,69,34,76,2,70,70,102,76',
'118,23,23,58,12,23,39,15,34,5,62,41,41,82,82,82,87,34,34,34,69,34,34',
'34,51,121,21,21,109,84,84,84,8,9,73,73,74,74,49,9,59,28,28,50,50,50',
'35,34,172,64,100,88,34,34,88,217,34,34,147,170,70,203,23,23,23,23,118',
'106,106,107,6,63,6,6,6,5,6,6,6,36,83,83,192,17,148,83,30,30,70,52,30',
'212,67,9,164,162,146,100,100,1,100,158,208,193,160,153,153,193,34,7',
'193,165,3,34,34,34,34,34,213,189,24,10,68,24,68,189,11,159,24,159,78',
'78,32,13,57,57,57,32,16,18,20,22,25,31,149,42,44,30,30,30,30,48,54,75',
'9,79,81,86,98,101,104,115,117,9,122,78,123,124,125,126,127,87,128,129',
'85,45,130,131,26,26,132,133,26,134,135,136,137,26,138,139,162,150,156',
'213,164,37,163,88,88,217,6,82,82,166,34,34,34,34,34,34,34,165,70,167',
'34,34,34,159,168,169,147,175,176,147,7,149,178,180,34,45,85,35,49,49',
'113,146,45,181,182,45,183,30,30,76,60,76,148,184,64,30,30,158,67,187',
'160,188,190,64,100,191,82,6,217,194,34,52,195,196,6,6,82,34,197,170',
'34,203,84,85,58,149,37,39,198,58,172,109,84,162,23,199,200,201,34,35',
'202,212,34,49,37,118,34,34,60,207,209,62,210,216,5,49,,,36,,208,59,149',
'34,,,59,6,6,37,,60,192,82,34,,,8,,159,,36,,,9,34,34,34,208,84,84,,,147',
'63,147,,193,118,34,193,34,17,,60,,,5,107,,,35,,159,,49,159,100,6,30',
'83,121,,100,,,,57,100,,,,,,,,100,57,,,37,153,,36,,,85,,39,,70,,85,,78',
',51,,87,,35,64,51,85,49,49,,45,,6,6,78,208,6,,147,147,36,76,76,21,,',
',76,76,12,12,73,,74,159,6,88,217,85,,,153,153,39,70,34,,,,100,78,,78',
'100,,50,,,,,,50,,,,6,,,60,76,152,85,45,147,,147,15,,,170,170,203,203',
'85,,,,,,,,,,62,193,,,6,34,,84,,62,12,50,34,,34,,70,147,36,60,60,34,',
'87,,,,,70,,35,34,49,28,,60,,,,,,60,,100,100,,12,41,24,,85,45,153,,,',
',24,24,,,,60,24,24,30,32,32,,76,,152,32,32,,34,6,,34,,,,76,76,76,76',
'34,6,70,118,,,,106,,,,,34,85,45,,,,34,,,26,,,,,102,,,,26,26,6,,78,27',
'26,26,,6,,27,34,78,70,39,30,,34,34,2,70,30,171,113,,106,34,34,,,,85',
'34,34,85,6,84,39,27,,,,,21,6,,,,,106,62,73,,74,12,,12,9,6,,76,62,34',
'154,27,39,154,,6,,6,,,34,27,,82,36,,69,,24,,,,,,,,,32,,,,,,,84,,39,85',
'152,,45,152,60,6,152,6,152,,,,,,,,,,,,,82,,,27,,,6,,,14,34,39,27,,70',
',34,60,26,,,34,34,,,70,,,34,,,,,,,154,,6,39,,,,,,,34,,,78,35,206,206',
'206,49,60,,,,,78,152,,152,6,152,,152,23,34,,,,155,155,155,,53,,,6,,23',
'53,,,,34,,,152,,,,,34,34,,53,,27,,27,39,,27,,53,53,53,27,53,,,,,,,,34',
',34,,,27,,60,,,,,,34,34,,,39,53,,60,,,53,53,118,,53,,118,6,6,6,,30,',
',,,,,,,,,,60,34,30,,,,34,34,,,34,,155,155,155,155,,155,154,,,154,,27',
'154,,154,27,14,,,,27,53,,,,34,53,53,53,53,53,,,37,,39,,,,118,14,,,6',
',,,27,,34,,,,,34,155,155,155,155,27,27,,85,45,,,155,6,,,,,157,,157,34',
'6,6,6,6,34,6,34,,,,,154,6,154,,154,,154,70,,,78,34,,70,6,39,,,,78,,14',
',,,,14,,,154,53,53,53,53,53,53,53,,,,53,53,53,,6,6,6,6,,,,,,,53,6,,',
',,,,,,,14,14,,,,78,,,157,,,,,206,206,,206,206,,206,,,,,,53,,,,,,,53',
',,53,,,,,,,,,,,,,,,,,,53,,,,53,,,,,53,,,56,,,,,,56,,,,,27,,,,,,,,,,56',
',,53,,,,,,56,56,56,,56,53,53,53,,,,,33,,,,,,33,,,,,,,,,,,157,56,157',
',157,,56,56,,,56,,,,,,,33,,,,,27,,,27,,,,,206,206,206,206,,,,157,,157',
',,,33,,,,,,,,,,,,,,,,,,,56,,,,,56,56,56,56,56,,,,27,,,,,,27,,,,,,,,',
'27,27,,53,,,27,27,157,206,,,,,33,,,,,,,,157,33,157,14,157,,14,,,,,,',
',,,,,,,,,,,,,,,,157,,,,,53,,,,,,,,,53,,,56,56,56,56,56,56,56,,,,56,56',
'56,,53,,,,,,,,,,56,,,,,,,,,,,,,,27,,,,33,,33,,,33,,27,27,,33,,,,27,',
'53,,56,53,,,,,33,56,,53,56,,,27,,,,,,,,53,,,,,,53,56,,,,56,,,,27,56',
',,,,,,,,,,,,,53,,,27,,,53,53,,,,27,27,56,,53,53,,,33,14,53,53,33,56',
'56,56,,33,,,,,,,,,27,14,,,,,,,,,,27,,,,,,,33,,,,,,,,,,,,33,33,,,,,,',
',,,14,,,,,,,,,27,27,,,27,,,,,14,,,,,,,,14,,,,,,,,,,,,,,27,,,53,,,,,',
'53,,,14,,53,53,,,,,,53,,56,,,,,,27,,,,,,,,,53,,,,,,,,,38,,,27,,,38,',
'27,,27,,,,53,14,14,,,,,,,,,,,,,56,,,53,,38,38,38,,56,,53,53,,,,,14,',
',,,,,,,56,,,,,38,,,,53,,53,,,,38,33,,,,14,,53,53,,,,,,,,,,,,,,,,,,14',
',,56,,,56,,,,,,,,56,,,,,,53,53,,,,38,56,,,,65,,56,,38,,65,,,,,,,,,33',
',,33,,,53,29,29,,,56,,,,,,56,56,65,65,65,,,,,56,56,,,,,56,56,,53,,,',
',,,,,,65,,,,,,,,33,,65,53,,65,33,,53,,53,,,,,33,33,,,,,33,33,38,,38',
'53,,38,,29,,29,38,29,29,,,,,,,,,,,,38,,,,,,65,,,,,,,,,65,,,,,,,,,,,',
',,,,,56,,29,,,,56,,,,,56,56,,,,,,56,,,,,,,,,,,,,,38,,,56,38,,,,38,38',
'33,,,,,,,,,,,33,33,,,38,56,,33,,,,,,,,38,,65,,,,,,56,33,,,38,38,,29',
'56,56,,,,,,,,38,65,38,,,,,33,,,,,,,,56,,56,,,,,,,,33,,,56,56,,,,33,33',
',,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,65,,56,56,65,33,,,65,65,,29,,,29,,29',
',,,,,,,,65,,,,,,,,56,,,65,,,,,,,,33,33,,,65,65,,,,,,,,,,,,65,56,65,',
',,,,,,,,,66,33,,,,29,66,,,56,,,,,56,,56,38,,,,,,,38,,,,,,33,,56,38,66',
'66,66,,,,,,,,,,,,,,,33,,,,,33,,33,,66,,,,,,,,,,66,,,66,,29,,,,,,,,29',
'29,,,38,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,66,,,,,,,,,66,,,,,,,,,29',
'38,,,65,29,,38,29,,,65,,,,,38,38,,,65,,38,38,29,,,,,,,,,,,,,,,,,,,,',
',29,,,,,,38,,,,,,,,,,,38,,,,,,,,,,,65,,,65,66,,29,,,,,,,,,,,,,,,,,,',
',,,66,,,,,,,,,,,,,,,,,,,,38,,,,,65,,,,,,38,38,,,,,38,38,,,,,,,,,,,,',
',,,,38,,,,,,,,,66,,,,66,,,,66,66,,,65,,38,,,,,,,,,65,,66,,,29,,,,38',
',,,66,,,,38,38,,,,,,,66,66,,,,,,,,,,,,66,,66,,,38,,,,,,,,,,29,38,,,',
',65,,,,,,,,,,,65,65,,,,,,65,,,,,,,,,,,38,,,,,38,38,,,38,,,,,,,,,,,,',
',,,,,,,65,,,,,,,38,,,,,,,,,,,65,,,,,,,,65,65,,,,38,,,,,38,,,,,,,,,,',
',,,,,65,,,,,38,,,,,38,65,38,,,,,,,,,,,,,66,,,,,,,66,,,,,,,,,66,,,,65',
',,,,65,65,,,65,,,,,,,,,,,,,,,,,,,,,,,,,,,65,,,,,,,,,,,,,,66,,,66,,,',
',,,65,,,,,65,,,,,,,,,,,,,,,,,,,,,65,,40,,,65,,65,,,,40,40,40,,,,66,',
',,,,,40,40,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,,,,,,',
'66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,',
',,,,,,66,66,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,40,40',
',,40,40,,,,40,,,,,,66,,,,,,,40,66,66,40,40,40,40,40,40,40,40,40,40,40',
'40,40,40,40,40,40,40,40,40,40,40,,,66,,40,,,,,,,,40,66,,,,,,40,,,40',
',,,,,,40,,40,,40,40,,,,,,,,,,,,,66,,,,,66,66,,,66,,,,,,,,,,,,,,,,,40',
',40,,,,40,40,,,66,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,66,,,,,,,,,,,,,,,,,',
',,,66,,,,,66,,66,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,40,,40,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40',
',,40,,40,,,,,,,,,,,,,,40,,,,,,,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,40,40,40,,,40,,,40,40,40,40,,,,,40,40,,,,,,,,,,,,,,,',
',,,,,,,,40,,,,,,,,,,,,,,,,,40,,,,,,40,,,,,40,,,40,,,,,,,,,,,,,,,,40',
',,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,40,,,,,,',
'40,,,,,,,,,,,,,40,40,40,40,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3797, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   122,    16,   135,   nil,    27,    -2,   124,    50,    54,
    11,   139,  -316,  -262,   739,  -521,  -553,  -608,  -678,   nil,
  -361,    38,   152,   -43,   -78,    93,   -19,   646,  -156,  1580,
    42,    32,   -69,  1199,     8,  -217,  -343,   -16,  1650,   -20,
  2764,   -35,  -430,   nil,  -586,   -27,   nil,   nil,   147,  -214,
    37,  -231,  -396,   840,  -329,   nil,  1157,   125,   -10,    27,
    36,   nil,    -4,    56,  -260,  1776,  2155,  -497,  -223,   -60,
     8,   nil,   nil,    46,    48,  -247,  -207,   nil,   116,   131,
   nil,  -167,     4,  -453,    20,   -29,  -321,  -255,  -440,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   106,   nil,
  -479,  -165,   -44,   nil,   117,   nil,  -262,  -660,   nil,  -703,
   nil,   nil,   nil,  -344,   nil,   112,   nil,  -431,    18,   nil,
   nil,  -571,   112,  -192,   129,   129,  -152,   130,   131,   123,
  -576,  -169,  -575,  -760,   132,  -411,  -172,  -684,  -409,  -684,
   nil,   nil,   nil,   nil,   nil,   nil,  -750,  -499,  -473,  -704,
  -610,   nil,  -226,  -438,   -23,   -78,  -609,   278,  -700,  -584,
  -554,   nil,  -611,  -718,  -820,  -803,  -124,  -492,   175,  -321,
  -268,   -16,  -202,   nil,   nil,   -39,   -39,   nil,  -437,   nil,
  -250,  -751,  -343,  -453,  -577,   nil,   nil,   184,   183,    45,
   181,   183,  -289,  -261,  -111,   189,   189,   193,  -480,  -315,
  -315,   211,  -459,  -266,   nil,   nil,   247,  -408,  -609,  -403,
  -642,   nil,  -622,  -836,   nil,   nil,   -55,  -439 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   305,     7,   359,   308,
   nil,   nil,   nil,   nil,   551,   nil,   nil,   nil,   nil,   304,
   306,   nil,   nil,   nil,    14,    15,    21,   239,   nil,   297,
    17,   nil,   432,   240,   337,   nil,   nil,   773,   238,   468,
    24,   nil,   nil,   354,   nil,    25,    26,    27,   nil,   707,
   nil,   nil,   nil,   325,   nil,    28,   322,   447,    35,   nil,
   nil,    37,    40,    39,   nil,   235,   236,   613,   nil,   141,
   455,   140,   143,    90,    91,   nil,   437,    47,    50,   271,
   543,   nil,   448,   nil,   449,   460,   667,   513,   295,   279,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    61,
   nil,   nil,   280,    65,   nil,    67,   nil,   nil,    68,   875,
    69,    70,    71,   nil,    72,   nil,    73,   nil,   595,    74,
    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   284,   273,   716,   844,   604,   876,   743,   579,   nil,   744,
  1019,   913,   567,   nil,   568,   nil,   nil,   569,   nil,   571,
   nil,   823,   nil,   nil,   nil,   577,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   459,   282,   nil,   nil,   686,   nil,   500,
   nil,   nil,   nil,   nil,   nil,    89,    92,    94,   nil,   nil,
   nil,   nil,   nil,   630,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   859,   782,   566,   nil,   570,   581,   583,
   924,   586,   587,   925,   590,   593,   nil,   299 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 147, :_reduce_1,
  2, 145, :_reduce_2,
  2, 146, :_reduce_3,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 148, :_reduce_6,
  2, 148, :_reduce_none,
  1, 151, :_reduce_none,
  0, 155, :_reduce_9,
  3, 151, :_reduce_10,
  0, 157, :_reduce_11,
  4, 154, :_reduce_12,
  0, 162, :_reduce_13,
  6, 156, :_reduce_14,
  3, 156, :_reduce_15,
  2, 158, :_reduce_16,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  3, 163, :_reduce_19,
  2, 163, :_reduce_20,
  1, 164, :_reduce_none,
  1, 164, :_reduce_22,
  0, 175, :_reduce_23,
  4, 153, :_reduce_24,
  3, 153, :_reduce_25,
  3, 153, :_reduce_26,
  3, 153, :_reduce_27,
  2, 153, :_reduce_28,
  3, 153, :_reduce_29,
  3, 153, :_reduce_30,
  3, 153, :_reduce_31,
  3, 153, :_reduce_32,
  3, 153, :_reduce_33,
  4, 153, :_reduce_34,
  1, 153, :_reduce_none,
  3, 153, :_reduce_36,
  3, 153, :_reduce_37,
  3, 153, :_reduce_38,
  3, 153, :_reduce_39,
  1, 153, :_reduce_none,
  3, 168, :_reduce_41,
  3, 168, :_reduce_42,
  6, 168, :_reduce_43,
  5, 168, :_reduce_44,
  5, 168, :_reduce_45,
  5, 168, :_reduce_46,
  5, 168, :_reduce_47,
  3, 168, :_reduce_48,
  1, 176, :_reduce_49,
  1, 176, :_reduce_none,
  1, 174, :_reduce_none,
  3, 174, :_reduce_52,
  3, 174, :_reduce_53,
  3, 174, :_reduce_54,
  2, 174, :_reduce_55,
  1, 174, :_reduce_none,
  1, 167, :_reduce_57,
  0, 187, :_reduce_58,
  0, 188, :_reduce_59,
  4, 185, :_reduce_60,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 190, :_reduce_none,
  4, 190, :_reduce_64,
  0, 198, :_reduce_65,
  4, 195, :_reduce_66,
  1, 197, :_reduce_67,
  2, 189, :_reduce_68,
  3, 189, :_reduce_69,
  4, 189, :_reduce_70,
  5, 189, :_reduce_71,
  4, 189, :_reduce_72,
  5, 189, :_reduce_73,
  2, 189, :_reduce_74,
  2, 189, :_reduce_75,
  2, 189, :_reduce_76,
  2, 189, :_reduce_77,
  2, 189, :_reduce_78,
  1, 169, :_reduce_none,
  3, 169, :_reduce_80,
  1, 203, :_reduce_none,
  3, 203, :_reduce_82,
  1, 202, :_reduce_83,
  2, 202, :_reduce_84,
  3, 202, :_reduce_85,
  5, 202, :_reduce_86,
  2, 202, :_reduce_87,
  4, 202, :_reduce_88,
  2, 202, :_reduce_89,
  4, 202, :_reduce_90,
  1, 202, :_reduce_91,
  3, 202, :_reduce_92,
  1, 206, :_reduce_none,
  3, 206, :_reduce_94,
  2, 205, :_reduce_95,
  3, 205, :_reduce_96,
  1, 208, :_reduce_97,
  3, 208, :_reduce_98,
  1, 207, :_reduce_99,
  1, 207, :_reduce_100,
  4, 207, :_reduce_101,
  3, 207, :_reduce_102,
  3, 207, :_reduce_103,
  3, 207, :_reduce_104,
  3, 207, :_reduce_105,
  2, 207, :_reduce_106,
  1, 207, :_reduce_107,
  1, 171, :_reduce_108,
  1, 171, :_reduce_109,
  4, 171, :_reduce_110,
  3, 171, :_reduce_111,
  3, 171, :_reduce_112,
  3, 171, :_reduce_113,
  3, 171, :_reduce_114,
  2, 171, :_reduce_115,
  1, 171, :_reduce_116,
  1, 211, :_reduce_117,
  1, 211, :_reduce_none,
  2, 212, :_reduce_119,
  1, 212, :_reduce_120,
  3, 212, :_reduce_121,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_125,
  1, 213, :_reduce_126,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 165, :_reduce_129,
  1, 165, :_reduce_none,
  1, 166, :_reduce_131,
  0, 219, :_reduce_132,
  4, 166, :_reduce_133,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  3, 184, :_reduce_206,
  3, 184, :_reduce_207,
  6, 184, :_reduce_208,
  5, 184, :_reduce_209,
  5, 184, :_reduce_210,
  5, 184, :_reduce_211,
  5, 184, :_reduce_212,
  0, 224, :_reduce_213,
  5, 184, :_reduce_214,
  3, 184, :_reduce_215,
  3, 184, :_reduce_216,
  3, 184, :_reduce_217,
  3, 184, :_reduce_218,
  3, 184, :_reduce_219,
  3, 184, :_reduce_220,
  3, 184, :_reduce_221,
  3, 184, :_reduce_222,
  3, 184, :_reduce_223,
  4, 184, :_reduce_224,
  4, 184, :_reduce_225,
  2, 184, :_reduce_226,
  2, 184, :_reduce_227,
  3, 184, :_reduce_228,
  3, 184, :_reduce_229,
  3, 184, :_reduce_230,
  3, 184, :_reduce_231,
  1, 184, :_reduce_none,
  3, 184, :_reduce_233,
  3, 184, :_reduce_234,
  3, 184, :_reduce_235,
  3, 184, :_reduce_236,
  3, 184, :_reduce_237,
  2, 184, :_reduce_238,
  2, 184, :_reduce_239,
  3, 184, :_reduce_240,
  3, 184, :_reduce_241,
  3, 184, :_reduce_242,
  3, 184, :_reduce_243,
  3, 184, :_reduce_244,
  6, 184, :_reduce_245,
  1, 184, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  3, 221, :_reduce_251,
  3, 221, :_reduce_252,
  1, 173, :_reduce_253,
  1, 225, :_reduce_none,
  2, 225, :_reduce_255,
  4, 225, :_reduce_256,
  2, 225, :_reduce_257,
  1, 220, :_reduce_none,
  3, 220, :_reduce_259,
  3, 229, :_reduce_260,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 179, :_reduce_265,
  4, 179, :_reduce_266,
  2, 179, :_reduce_267,
  1, 201, :_reduce_268,
  2, 201, :_reduce_269,
  2, 201, :_reduce_270,
  4, 201, :_reduce_271,
  1, 201, :_reduce_272,
  0, 233, :_reduce_273,
  2, 194, :_reduce_274,
  2, 232, :_reduce_275,
  2, 231, :_reduce_276,
  1, 231, :_reduce_none,
  1, 226, :_reduce_278,
  2, 226, :_reduce_279,
  3, 226, :_reduce_280,
  4, 226, :_reduce_281,
  3, 172, :_reduce_282,
  4, 172, :_reduce_283,
  2, 172, :_reduce_284,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_295,
  0, 268, :_reduce_296,
  4, 222, :_reduce_297,
  0, 269, :_reduce_298,
  3, 222, :_reduce_299,
  0, 270, :_reduce_300,
  4, 222, :_reduce_301,
  3, 222, :_reduce_302,
  3, 222, :_reduce_303,
  2, 222, :_reduce_304,
  0, 271, :_reduce_305,
  4, 222, :_reduce_306,
  0, 272, :_reduce_307,
  4, 222, :_reduce_308,
  1, 222, :_reduce_309,
  4, 222, :_reduce_310,
  3, 222, :_reduce_311,
  1, 222, :_reduce_312,
  5, 222, :_reduce_313,
  4, 222, :_reduce_314,
  3, 222, :_reduce_315,
  2, 222, :_reduce_316,
  1, 222, :_reduce_none,
  2, 222, :_reduce_318,
  2, 222, :_reduce_319,
  6, 222, :_reduce_320,
  6, 222, :_reduce_321,
  4, 222, :_reduce_322,
  4, 222, :_reduce_323,
  5, 222, :_reduce_324,
  4, 222, :_reduce_325,
  6, 222, :_reduce_326,
  0, 273, :_reduce_327,
  0, 274, :_reduce_328,
  7, 222, :_reduce_329,
  0, 275, :_reduce_330,
  0, 276, :_reduce_331,
  0, 277, :_reduce_332,
  9, 222, :_reduce_333,
  0, 278, :_reduce_334,
  0, 279, :_reduce_335,
  6, 222, :_reduce_336,
  0, 280, :_reduce_337,
  0, 281, :_reduce_338,
  7, 222, :_reduce_339,
  0, 282, :_reduce_340,
  0, 283, :_reduce_341,
  9, 222, :_reduce_342,
  1, 222, :_reduce_343,
  1, 222, :_reduce_344,
  1, 222, :_reduce_345,
  1, 222, :_reduce_346,
  1, 178, :_reduce_347,
  1, 243, :_reduce_none,
  1, 249, :_reduce_none,
  1, 252, :_reduce_none,
  1, 254, :_reduce_none,
  1, 255, :_reduce_none,
  1, 256, :_reduce_none,
  1, 258, :_reduce_none,
  1, 260, :_reduce_none,
  1, 263, :_reduce_none,
  1, 264, :_reduce_none,
  1, 284, :_reduce_none,
  1, 285, :_reduce_none,
  1, 286, :_reduce_none,
  1, 287, :_reduce_none,
  1, 288, :_reduce_none,
  1, 160, :_reduce_none,
  1, 289, :_reduce_none,
  1, 244, :_reduce_none,
  1, 200, :_reduce_none,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  2, 250, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 251, :_reduce_none,
  5, 251, :_reduce_373,
  1, 253, :_reduce_none,
  2, 253, :_reduce_375,
  1, 259, :_reduce_none,
  1, 259, :_reduce_377,
  1, 290, :_reduce_none,
  3, 290, :_reduce_379,
  1, 293, :_reduce_380,
  3, 293, :_reduce_381,
  1, 292, :_reduce_382,
  4, 292, :_reduce_383,
  6, 292, :_reduce_384,
  3, 292, :_reduce_385,
  5, 292, :_reduce_386,
  2, 292, :_reduce_387,
  4, 292, :_reduce_388,
  1, 292, :_reduce_389,
  3, 292, :_reduce_390,
  4, 294, :_reduce_391,
  2, 294, :_reduce_392,
  2, 294, :_reduce_393,
  1, 294, :_reduce_394,
  2, 299, :_reduce_395,
  1, 299, :_reduce_none,
  6, 300, :_reduce_397,
  8, 300, :_reduce_398,
  4, 300, :_reduce_399,
  6, 300, :_reduce_400,
  4, 300, :_reduce_401,
  2, 300, :_reduce_402,
  6, 300, :_reduce_403,
  2, 300, :_reduce_404,
  4, 300, :_reduce_405,
  6, 300, :_reduce_406,
  2, 300, :_reduce_407,
  4, 300, :_reduce_408,
  2, 300, :_reduce_409,
  4, 300, :_reduce_410,
  1, 300, :_reduce_411,
  1, 304, :_reduce_412,
  1, 304, :_reduce_413,
  3, 305, :_reduce_414,
  1, 305, :_reduce_415,
  4, 305, :_reduce_416,
  1, 306, :_reduce_none,
  4, 306, :_reduce_418,
  1, 307, :_reduce_419,
  3, 307, :_reduce_420,
  1, 308, :_reduce_421,
  1, 308, :_reduce_none,
  0, 312, :_reduce_423,
  0, 313, :_reduce_424,
  4, 248, :_reduce_425,
  4, 310, :_reduce_426,
  1, 310, :_reduce_427,
  3, 311, :_reduce_428,
  3, 311, :_reduce_429,
  3, 315, :_reduce_430,
  2, 191, :_reduce_431,
  4, 191, :_reduce_432,
  5, 191, :_reduce_433,
  5, 191, :_reduce_434,
  0, 318, :_reduce_435,
  3, 247, :_reduce_436,
  4, 247, :_reduce_437,
  4, 247, :_reduce_438,
  3, 247, :_reduce_439,
  3, 247, :_reduce_440,
  3, 247, :_reduce_441,
  2, 247, :_reduce_442,
  1, 247, :_reduce_443,
  4, 247, :_reduce_444,
  0, 319, :_reduce_445,
  4, 246, :_reduce_446,
  0, 320, :_reduce_447,
  4, 246, :_reduce_448,
  0, 321, :_reduce_449,
  0, 322, :_reduce_450,
  4, 196, :_reduce_451,
  0, 323, :_reduce_452,
  0, 324, :_reduce_453,
  4, 316, :_reduce_454,
  0, 326, :_reduce_455,
  6, 257, :_reduce_456,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  6, 159, :_reduce_459,
  0, 159, :_reduce_460,
  1, 327, :_reduce_461,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  2, 328, :_reduce_464,
  1, 328, :_reduce_none,
  2, 161, :_reduce_466,
  1, 161, :_reduce_none,
  1, 234, :_reduce_468,
  1, 234, :_reduce_469,
  1, 234, :_reduce_none,
  1, 235, :_reduce_471,
  1, 330, :_reduce_472,
  1, 330, :_reduce_none,
  2, 330, :_reduce_474,
  3, 331, :_reduce_475,
  1, 331, :_reduce_476,
  3, 236, :_reduce_477,
  3, 237, :_reduce_478,
  3, 238, :_reduce_479,
  3, 238, :_reduce_480,
  1, 335, :_reduce_481,
  3, 335, :_reduce_482,
  1, 336, :_reduce_none,
  2, 336, :_reduce_484,
  3, 240, :_reduce_485,
  0, 339, :_reduce_486,
  4, 240, :_reduce_487,
  1, 338, :_reduce_488,
  3, 338, :_reduce_489,
  3, 239, :_reduce_490,
  3, 239, :_reduce_491,
  3, 241, :_reduce_492,
  3, 241, :_reduce_493,
  1, 340, :_reduce_494,
  3, 340, :_reduce_495,
  1, 341, :_reduce_496,
  3, 341, :_reduce_497,
  1, 332, :_reduce_498,
  2, 332, :_reduce_499,
  1, 333, :_reduce_500,
  2, 333, :_reduce_501,
  1, 334, :_reduce_502,
  2, 334, :_reduce_503,
  1, 337, :_reduce_504,
  0, 343, :_reduce_505,
  3, 337, :_reduce_506,
  0, 344, :_reduce_507,
  4, 337, :_reduce_508,
  1, 342, :_reduce_509,
  1, 342, :_reduce_510,
  1, 342, :_reduce_511,
  1, 342, :_reduce_none,
  2, 217, :_reduce_513,
  1, 217, :_reduce_514,
  1, 345, :_reduce_none,
  1, 345, :_reduce_none,
  1, 345, :_reduce_none,
  1, 345, :_reduce_none,
  3, 218, :_reduce_519,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  2, 329, :_reduce_522,
  2, 329, :_reduce_523,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_529,
  1, 210, :_reduce_530,
  1, 210, :_reduce_531,
  1, 210, :_reduce_532,
  1, 210, :_reduce_533,
  1, 210, :_reduce_534,
  1, 210, :_reduce_535,
  1, 242, :_reduce_536,
  1, 242, :_reduce_537,
  1, 177, :_reduce_538,
  1, 177, :_reduce_539,
  1, 182, :_reduce_540,
  1, 182, :_reduce_541,
  0, 346, :_reduce_542,
  4, 261, :_reduce_543,
  1, 261, :_reduce_544,
  3, 265, :_reduce_545,
  0, 348, :_reduce_546,
  3, 265, :_reduce_547,
  4, 347, :_reduce_548,
  2, 347, :_reduce_549,
  2, 347, :_reduce_550,
  1, 347, :_reduce_none,
  2, 350, :_reduce_552,
  0, 350, :_reduce_553,
  6, 314, :_reduce_554,
  8, 314, :_reduce_555,
  4, 314, :_reduce_556,
  6, 314, :_reduce_557,
  4, 314, :_reduce_558,
  6, 314, :_reduce_559,
  2, 314, :_reduce_560,
  4, 314, :_reduce_561,
  6, 314, :_reduce_562,
  2, 314, :_reduce_563,
  4, 314, :_reduce_564,
  2, 314, :_reduce_565,
  4, 314, :_reduce_566,
  1, 314, :_reduce_567,
  0, 314, :_reduce_568,
  1, 309, :_reduce_569,
  1, 309, :_reduce_570,
  1, 309, :_reduce_571,
  1, 309, :_reduce_572,
  1, 291, :_reduce_none,
  1, 291, :_reduce_574,
  1, 352, :_reduce_none,
  3, 352, :_reduce_576,
  1, 301, :_reduce_577,
  3, 301, :_reduce_578,
  2, 353, :_reduce_579,
  2, 354, :_reduce_580,
  1, 295, :_reduce_none,
  3, 295, :_reduce_582,
  1, 349, :_reduce_none,
  3, 349, :_reduce_584,
  1, 355, :_reduce_none,
  1, 355, :_reduce_none,
  2, 296, :_reduce_587,
  1, 296, :_reduce_588,
  3, 356, :_reduce_589,
  3, 357, :_reduce_590,
  1, 302, :_reduce_591,
  3, 302, :_reduce_592,
  1, 351, :_reduce_593,
  3, 351, :_reduce_594,
  1, 358, :_reduce_none,
  1, 358, :_reduce_none,
  2, 303, :_reduce_597,
  1, 303, :_reduce_598,
  1, 359, :_reduce_none,
  1, 359, :_reduce_none,
  2, 298, :_reduce_601,
  2, 297, :_reduce_602,
  0, 297, :_reduce_603,
  1, 266, :_reduce_none,
  0, 360, :_reduce_605,
  4, 266, :_reduce_606,
  1, 245, :_reduce_607,
  2, 245, :_reduce_none,
  1, 228, :_reduce_none,
  3, 228, :_reduce_610,
  3, 361, :_reduce_611,
  2, 361, :_reduce_612,
  2, 361, :_reduce_613,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 317, :_reduce_none,
  1, 317, :_reduce_none,
  1, 317, :_reduce_none,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  1, 181, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 204, :_reduce_none,
  2, 180, :_reduce_none,
  0, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 262, :_reduce_638,
  1, 262, :_reduce_none,
  1, 152, :_reduce_none,
  2, 152, :_reduce_641,
  0, 150, :_reduce_642 ]

racc_reduce_n = 643

racc_shift_n = 1088

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tLOWEST => 140,
  :tEQL => 141,
  :tBDOT2 => 142,
  :tBDOT3 => 143 }

racc_nt_base = 144

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tLOWEST",
  "tEQL",
  "tBDOT2",
  "tBDOT3",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "@29",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "@36",
  "cases",
  "@37",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "@38",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@39",
  "@40",
  "sym",
  "@41",
  "args_tail",
  "@42",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@43",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

                      lexer.cond.pop # local_pop
                      lexer.cmdarg.pop

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug20 2, val, result

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_24(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_28(val, _values, result)
                      result = val[1]

    result
end

def _reduce_29(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_30(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_31(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_34(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_37(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_43(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_44(val, _values, result)
                      prim, _, id, opasgn, rhs = val
                      result = s(:op_asgn, prim, rhs, id.to_sym, opasgn.to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_45(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_47(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_48(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_49(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_53(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_54(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_55(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_60(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      blk, _, msg, args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_65(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_66(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend

    result
end

def _reduce_67(val, _values, result)
                      msg, = val
                      result = new_call(nil, msg.to_sym).line lexer.lineno

    result
end

def _reduce_68(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_69(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_70(val, _values, result)
                      lhs, callop, op, args = val
                      result = new_call lhs, op.to_sym, args, callop

    result
end

def _reduce_71(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_72(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_73(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_74(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_75(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_77(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = val[1]

    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_83(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_84(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_85(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_86(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_87(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_88(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_89(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_90(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_91(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_92(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 93 omitted

def _reduce_94(val, _values, result)
                      result = val[1]

    result
end

def _reduce_95(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_97(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_98(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_102(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_103(val, _values, result)
                      recv, _, id = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_104(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, id = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      _, id = val
                      l = lexer.lineno

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_108(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line

    result
end

def _reduce_109(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line
                      debug20 9, val, result

    result
end

def _reduce_110(val, _values, result)
                      lhs, _, args, _ = val
                      result = self.aryset lhs, args

    result
end

def _reduce_111(val, _values, result)
                      lhs, op, id = val
                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_112(val, _values, result)
                      lhs, _, id = val
                      result = new_attrasgn lhs, id

    result
end

def _reduce_113(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_114(val, _values, result)
                      expr, _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_115(val, _values, result)
                      _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      l = lexer.lineno
                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_116(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_117(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      _, name = val
                      result = s(:colon3, name.to_sym).line lexer.lineno

    result
end

def _reduce_120(val, _values, result)
                      result = val[0].to_sym

    result
end

def _reduce_121(val, _values, result)
                      pval, _, name = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]

    result
end

def _reduce_126(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym

    result
end

# reduce 127 omitted

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      id, = val
                      result = s(:lit, id.to_sym).line lexer.lineno

    result
end

# reduce 130 omitted

def _reduce_131(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_132(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_133(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

def _reduce_206(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_210(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_211(val, _values, result)
                      lhs, _, id, op, rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_212(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_213(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_214(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_215(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_217(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_224(val, _values, result)
                      lit = s(:lit, val[1]).line lexer.lineno
                      result = new_call(new_call(lit, :"**", argl(val[3])), :"-@")

    result
end

def _reduce_225(val, _values, result)
                      lit = s(:lit, val[1]).line lexer.lineno
                      result = new_call(new_call(lit, :"**", argl(val[3])), :"-@")

                      ## TODO: why is this 2.0 only?
                      debug20 12, val, result

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 232 omitted

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_234(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_235(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_236(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_237(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_238(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_239(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_240(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_241(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_242(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_243(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_244(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_245(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_252(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_253(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 254 omitted

def _reduce_255(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_256(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_257(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 258 omitted

def _reduce_259(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_260(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

def _reduce_265(val, _values, result)
                      result = args val

    result
end

def _reduce_266(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_267(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_268(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_269(val, _values, result)
                      result = call_args val

    result
end

def _reduce_270(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_271(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_272(val, _values, result)
                      result = call_args val

    result
end

def _reduce_273(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_274(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_275(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_276(val, _values, result)
                      result = val[1]

    result
end

# reduce 277 omitted

def _reduce_278(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_279(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_280(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_281(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_283(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_284(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      msg, = val
                      result = new_call nil, msg.to_sym

    result
end

def _reduce_296(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_297(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_298(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_299(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_301(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_302(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_303(val, _values, result)
                      expr, _, id = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_304(val, _values, result)
                      _, id = val

                      result = s(:colon3, id.to_sym).line lexer.lineno

    result
end

def _reduce_305(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_306(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_307(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_308(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_309(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_310(val, _values, result)
                      result = new_yield val[2]

    result
end

def _reduce_311(val, _values, result)
                      result = new_yield

    result
end

def _reduce_312(val, _values, result)
                      result = new_yield

    result
end

def _reduce_313(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_314(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_315(val, _values, result)
                      debug20 14, val, result

    result
end

def _reduce_316(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 317 omitted

def _reduce_318(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_319(val, _values, result)
                      result = val[1] # TODO: fix lineno

    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_321(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_323(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_324(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_325(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_326(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_327(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_329(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_330(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_331(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_332(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_333(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_334(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_335(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_336(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_337(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      self.comments.push self.lexer.comments

    result
end

def _reduce_338(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_339(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_340(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_341(val, _values, result)
                      result = [self.in_def, lexer.lineno]

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL
                      self.comments.push self.lexer.comments

    result
end

def _reduce_342(val, _values, result)
                      _, _recv, _, _, _name, (in_def, _lineno), _args, _body, _ = val

                      result = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_343(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_344(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_345(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_346(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_347(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[1]

    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = val[1]

    result
end

def _reduce_380(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_381(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_382(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_383(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym

    result
end

def _reduce_384(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2

    result
end

def _reduce_385(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*

    result
end

def _reduce_386(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2

    result
end

def _reduce_387(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"

    result
end

def _reduce_388(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args

    result
end

def _reduce_389(val, _values, result)
                      result = block_var :*

    result
end

def _reduce_390(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args

    result
end

def _reduce_391(val, _values, result)
                      result = call_args val

    result
end

def _reduce_392(val, _values, result)
                      result = call_args val

    result
end

def _reduce_393(val, _values, result)
                      result = call_args val

    result
end

def _reduce_394(val, _values, result)
                      line = lexer.lineno
                      result = call_args val # TODO: push line down
                      result.line line

    result
end

def _reduce_395(val, _values, result)
                      result = args val

    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = args val

    result
end

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args val

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_403(val, _values, result)
                      result = args val

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
                      result = args val

    result
end

def _reduce_407(val, _values, result)
                      result = args val

    result
end

def _reduce_408(val, _values, result)
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = args val

    result
end

def _reduce_410(val, _values, result)
                      result = args val

    result
end

def _reduce_411(val, _values, result)
                      result = args val

    result
end

def _reduce_412(val, _values, result)
 result = 0
    result
end

def _reduce_413(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_414(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_416(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 417 omitted

def _reduce_418(val, _values, result)
                      result = args val

    result
end

def _reduce_419(val, _values, result)
                      result = args val

    result
end

def _reduce_420(val, _values, result)
                      result = args val

    result
end

def _reduce_421(val, _values, result)
                      id, = val
                      line = lexer.lineno
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 422 omitted

def _reduce_423(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_424(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_425(val, _values, result)
                      (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line = line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_426(val, _values, result)
                      result = args val

    result
end

def _reduce_427(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_428(val, _values, result)
                      result = val[1]

    result
end

def _reduce_429(val, _values, result)
                      result = val[1]

    result
end

def _reduce_430(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_431(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      cmd, blk = val

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_432(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_433(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_434(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_435(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_436(val, _values, result)
                      call, lineno, args = val

                      result = call.concat args.sexp_body if args
                      result.line lineno

    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]

    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], val[2].to_sym

    result
end

def _reduce_440(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_441(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_442(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_443(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_444(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_445(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_446(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_447(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_448(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_449(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_450(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_451(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_452(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_453(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_454(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_455(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_456(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]

    result
end

# reduce 457 omitted

# reduce 458 omitted

def _reduce_459(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_460(val, _values, result)
                      result = nil

    result
end

def _reduce_461(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 462 omitted

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = val[1]

    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

def _reduce_469(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_472(val, _values, result)
                      debug20 23, val, result

    result
end

# reduce 473 omitted

def _reduce_474(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_475(val, _values, result)
                      _, str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_ICNTNT

                      result = str

    result
end

def _reduce_476(val, _values, result)
                      result = new_string val

    result
end

def _reduce_477(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_478(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_479(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_480(val, _values, result)
                      result = val[1]

    result
end

def _reduce_481(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_482(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 483 omitted

def _reduce_484(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_485(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_486(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_487(val, _values, result)
                      _, line, list, _, = val
                      list.line = line
                      result = list

    result
end

def _reduce_488(val, _values, result)
                      result = new_symbol_list.line lexer.lineno

    result
end

def _reduce_489(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_490(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_491(val, _values, result)
                      result = val[1]

    result
end

def _reduce_492(val, _values, result)
                      result = s(:array).line lexer.lineno # FIX

    result
end

def _reduce_493(val, _values, result)
                      result = val[1]

    result
end

def _reduce_494(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_495(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_496(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_497(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_498(val, _values, result)
                      result = s(:str, "").line lexer.lineno

    result
end

def _reduce_499(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_500(val, _values, result)
                      result = nil

    result
end

def _reduce_501(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_502(val, _values, result)
                      result = nil

    result
end

def _reduce_503(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_504(val, _values, result)
                      result = new_string val

    result
end

def _reduce_505(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_506(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_507(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_508(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cmdarg.pop
                      lexer.cond.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_509(val, _values, result)
 result = s(:gvar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_510(val, _values, result)
 result = s(:ivar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_511(val, _values, result)
 result = s(:cvar, val[0].to_sym).line lexer.lineno
    result
end

# reduce 512 omitted

def _reduce_513(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym

    result
end

def _reduce_514(val, _values, result)
                      result = val[0].to_sym

    result
end

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug20 26, val, result
                      end

    result
end

# reduce 520 omitted

# reduce 521 omitted

def _reduce_522(val, _values, result)
                      result = -val[1] # TODO: pt_testcase

    result
end

def _reduce_523(val, _values, result)
                      result = -val[1] # TODO: pt_testcase

    result
end

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

def _reduce_529(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_530(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_531(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_532(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_533(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_534(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_535(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_536(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_537(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_538(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_539(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result

    result
end

def _reduce_540(val, _values, result)
 result = s(:nth_ref,  val[0]).line lexer.lineno
    result
end

def _reduce_541(val, _values, result)
 result = s(:back_ref, val[0]).line lexer.lineno
    result
end

def _reduce_542(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_543(val, _values, result)
                      result = val[2]

    result
end

def _reduce_544(val, _values, result)
                      result = nil

    result
end

def _reduce_545(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true

    result
end

def _reduce_546(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_547(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_548(val, _values, result)
                      result = args val

    result
end

def _reduce_549(val, _values, result)
                      result = args val

    result
end

def _reduce_550(val, _values, result)
                      result = args val

    result
end

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      result = val[1]

    result
end

def _reduce_553(val, _values, result)
                      result = nil

    result
end

def _reduce_554(val, _values, result)
                      result = args val

    result
end

def _reduce_555(val, _values, result)
                      result = args val

    result
end

def _reduce_556(val, _values, result)
                      result = args val

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val

    result
end

def _reduce_568(val, _values, result)
                      result = args val

    result
end

def _reduce_569(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_570(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_572(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 573 omitted

def _reduce_574(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier

    result
end

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      result = val[1]

    result
end

def _reduce_577(val, _values, result)
                      arg, = val

                      case arg
                      when Symbol then
                        result = s(:args, arg).line lexer.lineno
                      when Sexp then
                        result = arg
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end

    result
end

def _reduce_578(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << item

    result
end

def _reduce_579(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_580(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

# reduce 581 omitted

def _reduce_582(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      result = args val

    result
end

# reduce 585 omitted

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"

    result
end

def _reduce_588(val, _values, result)
                      result = :"**"

    result
end

def _reduce_589(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names

    result
end

def _reduce_590(val, _values, result)
                      result = self.assignable val[0], val[2]

    result
end

def _reduce_591(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_592(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_593(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_594(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 595 omitted

# reduce 596 omitted

def _reduce_597(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"

    result
end

def _reduce_598(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name

    result
end

# reduce 599 omitted

# reduce 600 omitted

def _reduce_601(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym

    result
end

def _reduce_602(val, _values, result)
                      result = val[1]

    result
end

def _reduce_603(val, _values, result)
                      result = nil

    result
end

# reduce 604 omitted

def _reduce_605(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_606(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_607(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 608 omitted

# reduce 609 omitted

def _reduce_610(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_611(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_612(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_613(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

def _reduce_638(val, _values, result)
 yyerrok
    result
end

# reduce 639 omitted

# reduce 640 omitted

def _reduce_641(val, _values, result)
 yyerrok
    result
end

def _reduce_642(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby20Parser
