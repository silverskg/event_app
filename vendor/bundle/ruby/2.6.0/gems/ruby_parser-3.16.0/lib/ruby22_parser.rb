#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby22Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-526,-540,225,226,601,-107,284,-526,-526,-526,-108,601,-526,-526,-526',
'-101,-526,-115,601,-103,234,829,225,226,-526,829,-526,-526,-526,284',
'95,-114,884,647,608,601,-526,-526,96,-526,-526,-526,-526,-526,3,601',
'-93,231,858,-110,-110,761,-112,-112,230,828,235,-541,-107,828,-109,-79',
'773,228,-109,124,774,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526',
'-526,-526,-526,-526,222,-101,-526,-526,-526,-103,-526,-526,225,226,-526',
'235,286,-526,-526,646,-526,223,-526,284,-526,224,-526,-526,-526,-526',
'-526,-526,-526,-98,-526,235,-526,-108,-99,286,-101,128,-111,-101,-103',
'-106,127,-103,128,-526,-526,-526,-526,127,-526,128,-526,-529,-101,-105',
'127,-526,-103,227,-529,-529,-529,-526,-111,-529,-529,-529,128,-529,128',
'964,857,127,-101,127,-103,-529,128,-529,-529,-529,-110,127,-100,-113',
'-112,-110,284,-529,-529,-112,-529,-529,-529,-529,-529,-109,235,272,273',
'275,-109,337,-624,231,286,631,106,107,631,-526,280,650,128,338,106,107',
'-526,127,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529',
'-529,-529,271,270,-529,-529,-529,847,-529,-529,-624,-102,-529,848,477',
'-529,-529,-621,-529,-625,-529,-435,-529,232,-529,-529,-529,-529,-529',
'-529,-529,586,-529,235,-529,372,633,632,629,633,632,629,589,286,649',
'631,-111,-529,-529,-529,-529,-111,-529,-303,-529,108,109,701,-104,-529',
'-303,-303,-303,108,109,-529,-303,-303,423,-303,-526,-115,-529,425,424',
'597,596,-526,-212,-529,-115,-622,-621,396,727,399,-526,726,820,-303',
'-303,821,-303,-303,-303,-303,-303,581,-536,578,577,576,401,579,-621',
'-536,633,632,667,590,581,631,578,577,576,791,579,-444,-628,668,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-529',
'-114,-303,-303,-303,917,673,-529,-628,404,-303,-110,-622,-303,-112,807',
'-529,631,-303,421,-303,631,-303,-303,-303,-303,-303,-303,-303,426,-303',
'-110,-303,476,-622,631,-444,-628,633,632,631,877,-112,-444,-628,-303',
'-303,910,-104,-624,-303,-628,-444,-628,1012,586,478,-303,-628,-628,-628',
'-628,-109,-113,-628,-628,589,-628,-628,479,-444,-628,-109,-624,-535',
'232,-628,-628,633,632,634,-535,633,632,639,234,631,-628,-628,636,-628',
'-628,-628,-628,-628,-628,633,632,651,597,596,633,632,794,-540,-537,-534',
'-531,-532,-541,508,-212,-537,-534,-531,-532,289,-106,-628,-628,-628',
'-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-115,590,-628',
'-628,-628,667,674,518,727,521,-628,729,668,-628,-98,633,632,523,-628',
'-99,-628,-105,-628,-628,-628,-628,-628,-628,-628,-107,-628,-628,-628',
'807,-108,581,-114,578,577,576,586,579,-347,225,226,-628,-628,-101,-102',
'-347,-628,589,-628,727,-103,-78,729,-628,-347,-628,-628,-628,-110,-111',
'-628,-628,-628,128,-628,-112,225,226,127,584,567,-100,255,-628,-628',
'-628,-628,128,594,593,597,596,127,235,-628,-628,-109,-628,-628,-628',
'-628,-628,581,-533,578,577,576,533,579,581,-533,578,577,576,252,579',
'626,128,254,253,250,251,127,627,590,-628,-628,-628,-628,-628,-628,-628',
'-628,-628,-628,-628,-628,-628,-628,534,747,-628,-628,-628,231,822,-628',
'747,541,-628,292,474,-628,-628,235,-628,750,-628,289,-628,475,-628,-628',
'-628,-628,-628,-628,-628,128,-628,-628,-628,727,127,581,729,578,577',
'576,586,579,-538,597,596,-628,-628,-628,-628,-538,-628,589,-628,-303',
'128,880,884,-628,-538,127,-303,-303,-303,-111,544,-303,-303,-303,581',
'-303,578,577,576,584,579,235,225,226,1043,-303,-303,-303,594,593,597',
'596,880,884,548,-303,-303,-539,-303,-303,-303,-303,-303,581,-539,578',
'577,576,255,579,235,608,747,-539,581,414,578,577,576,613,579,750,614',
'638,590,642,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,645,747,-303,-303,-303,648,823,-303,655,-276,-303,657,747',
'-303,-303,658,-303,235,-303,665,-303,957,-303,-303,-303,-303,-303,-303',
'-303,666,-303,289,-303,581,678,578,577,576,586,579,255,255,255,255,255',
'-303,-303,-303,-303,589,-303,-303,-303,685,231,235,235,-303,-303,-303',
'-303,540,235,-113,-303,-303,-93,-303,255,704,538,584,252,235,553,715',
'254,253,250,251,594,593,597,596,265,266,716,-303,-303,720,-303,-303',
'-303,-303,-303,581,723,578,577,576,252,579,258,235,254,253,250,251,730',
'731,256,581,257,578,577,576,590,579,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,523,747,-303,-303,-303,581,673,578',
'577,576,-303,579,735,-303,738,739,741,747,-303,743,-303,745,-303,-303',
'-303,-303,-303,-303,-303,753,-303,581,-303,578,577,576,586,579,255,754',
'755,757,723,747,723,-303,-303,589,-303,608,-303,-628,723,780,785,-294',
'795,-303,-628,-628,-628,231,-294,-113,-628,-628,255,-628,550,584,252',
'-294,796,-277,254,253,-628,475,594,593,597,596,265,266,808,508,508,-628',
'-628,235,-628,-628,-628,-628,-628,825,275,834,252,231,258,836,254,253',
'250,251,612,255,256,521,257,523,715,235,590,610,289,289,-628,-628,-628',
'-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,715,231,-628',
'-628,-628,255,674,252,661,235,-628,254,253,-628,875,235,884,659,-628',
'723,-628,235,-628,-628,-628,-628,-628,-628,-628,911,-628,-628,-628,-304',
'-278,235,916,905,906,933,-304,907,122,123,715,-628,-628,-276,-628,-304',
'-628,8,85,86,87,12,78,-628,938,231,79,80,943,-111,235,83,776,81,82,84',
'33,34,76,77,738,778,946,948,950,88,31,30,116,115,117,118,952,952,22',
'235,958,723,723,662,11,49,10,13,120,119,121,110,60,112,111,113,723,114',
'122,123,235,106,107,723,45,46,44,255,259,260,261,262,272,273,267,268',
'263,264,-303,248,249,-304,235,265,266,-303,43,976,-304,36,-625,-279',
'62,63,-303,977,64,-304,38,252,738,258,48,254,253,250,251,271,270,256',
'23,257,980,983,-303,103,95,97,98,99,101,-303,985,987,96,104,-625,269',
'235,-251,-303,989,66,1001,1002,93,100,102,1014,723,108,109,311,85,86',
'87,12,78,723,785,231,79,80,1032,1035,847,83,1034,81,82,84,33,34,76,77',
'1041,778,1044,952,952,88,31,30,116,115,117,118,952,1049,22,1014,738',
'1058,1060,662,11,49,313,13,120,119,121,110,60,112,111,113,1062,114,122',
'123,1064,106,107,1064,45,46,44,255,259,260,261,262,272,273,267,268,263',
'264,-538,248,249,-539,720,265,266,-538,43,1014,-539,315,723,723,62,63',
'-538,-625,64,-539,38,252,-624,258,48,254,253,250,251,271,270,256,23',
'257,235,952,231,103,95,97,98,99,101,1040,-294,1014,96,104,1087,269,1064',
'-294,1038,1064,66,1064,1064,93,100,102,-294,,108,109,311,85,86,87,12',
'78,,,231,79,80,,,,83,1034,81,82,84,33,34,76,77,,778,,,,88,31,30,116',
'115,117,118,,1005,22,578,577,576,,579,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261,262,272',
'273,267,268,263,264,-304,248,249,,,265,266,-304,43,,,36,,,62,63,-304',
',64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,-303,103,95',
'97,98,99,101,-303,,,96,104,-625,269,,,-303,,66,,,93,100,102,,,108,109',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,131,132,133',
'134,135,88,31,30,116,115,117,118,,1005,22,578,577,576,,579,11,49,313',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255',
'259,260,261,262,272,273,267,268,263,264,,248,249,,,265,266,,43,,,36',
',,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103',
'95,97,98,99,101,,,,96,104,,269,,,,,66,,,93,100,102,,,108,109,311,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,131,132,133,134,135',
'88,31,30,116,115,117,118,,,22,131,132,133,134,135,11,49,313,13,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261',
'262,272,273,267,268,263,264,,248,249,,,265,266,,43,,,315,,,62,63,,,64',
',38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99',
'101,,,,96,104,235,269,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,131,132,133,134,135,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,255,259,260,261,262,272,273,267,268',
'263,264,,248,249,,,265,266,,43,,,315,,,62,63,,,64,,38,252,,258,48,254',
'253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,269',
',,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255',
'259,260,261,262,272,273,267,268,263,264,,248,249,,,265,266,,43,,,36',
',,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103',
'95,97,98,99,101,,,,96,104,,269,,,,,66,,,93,100,102,,,108,109,311,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,',
'248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,269,,,,,66',
',,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261',
'262,272,273,267,268,263,264,,-650,-650,,,265,266,,43,,,36,,,62,63,,',
'64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,,-650,-650',
',,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271',
'270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,255,-650,-650,-650,-650',
'272,273,,,-650,-650,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258',
'48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,8,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,-650',
'-650,-650,-650,272,273,,,-650,-650,,,,,,265,266,,43,,,36,,,62,63,,,64',
',38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,255,-650,-650,-650,-650,272,273,,,-650,-650,,,,,,265,266,',
'43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,255,-650,-650,-650,-650,272,273,,,-650',
'-650,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,-650,-650,-650',
'-650,272,273,,,-650,-650,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,255,-650,-650,-650,-650,272,273,,,-650,-650,,,,,,265,266,,43,',
',36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,255,259,260,261,262,272,273,,,263,264,,,',
',,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271',
'270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261,262,272',
'273,267,,263,264,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48',
'254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255',
',,,,,,,,,,,,,,,265,266,,43,,,36,,255,62,63,,,64,,38,252,,258,48,254',
'253,250,251,265,266,,23,,,,,103,95,97,98,99,101,,,252,96,104,,254,253',
'250,251,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'313,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
'255,,,,,,,,,,,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254',
'253,250,251,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'313,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,313,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,311,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,313',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,311,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,313,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62',
'63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,',
'66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120',
'119,121,110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,',
',,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103',
'302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299',
',48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96',
'104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,328',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,334,,,,,,',
',,,,,,,,,,,,,324,,,320,,,62,63,,,64,,319,,,,,,,,,,,,,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,328,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'334,,,,,,,,,,,,,,,,,,,,324,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,336,,,66,,,93,100,102,,,108,109,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,128,,,,,127,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,328,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,366',
',,36,,,62,63,,,64,,38,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,414,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,431,,,,48,,,,,,,,245,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,431,,,,48,,,,,',
',,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97',
'98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,235,,,,,,66,,,93',
'100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77',
',,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96',
'104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,',
'120,119,121,110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,',
',103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301',
',299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,235,,,,,,66,',
'305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,328,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,334,,,,,,,,,,,,',
',,,,,,,324,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,536,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,',
',,,,,328,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,334',
',,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,553,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,',
'246,,,62,63,,,64,,301,,,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96',
'104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49',
',,120,119,121,110,60,112,111,113,304,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103',
'302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,116,115,117,118,,,247,,,,,,,328,,,120,119,121,615,60,112,111,616',
',114,122,123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,617,,,246,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,328,,,120,119,121,615,60,112',
'111,616,,114,122,123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,617,,,246,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120',
'119,121,110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,',
',,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103',
'302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,698,,299,,48,,,,,,,,245,,',
',,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,',
'66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330',
'331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11',
'49,313,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,414,66,,,93,100,102,,,108,109,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,328,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301',
',299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76',
'77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,328,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,324,',
',320,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
',49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,',
',,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,800,,,,48,,,,,',
',,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96',
'104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,',
',,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,304,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,698,,299,,48',
',,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,299,,48,,,,,,,,245,,,,,103,302,97,98,99,101,,,,96,104',
',,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,',
',,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,328',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,334,,,,,,',
',,,,,,,,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247',
',,,,,,328,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'334,,,,,,,,,,,,,,,,,,,,324,,,320,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,431,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',240,,,246,,,62,63,,,64,,698,,,,48,,,,,,,,245,,,,,103,302,97,98,99,101',
',,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,',
',,,,,49,,,120,119,121,110,60,112,111,113,304,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,301,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,302,97',
'98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88',
'327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331',
'76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,,,,,,,,,,',
',,,,,,,,,240,,,246,,,62,63,,,64,,,,299,,48,,,,,,,,245,,,,,103,302,97',
'98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327,333,116',
'115,117,118,,,247,,,,,,,328,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,991,,,246,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,,,,,88,327',
'333,116,115,117,118,,,247,,,,,,,328,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,,,334,,,,,,,,,,,,,,,,,,,,998,,,246,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,330,331,76,77,,',
',,,88,327,333,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,698,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'330,331,76,77,,,,,,88,327,333,116,115,117,118,,,247,,,,,,,328,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,334,,,,,,,,,,,,',
',,,,,,,991,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,304,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,103,302,97,98,99,101,,,,96,104,,,,,,,66,,305,93,100,102,-443,,108',
'109,,,,-443,-443,-443,,,-443,-443,-443,581,-443,578,577,576,586,579',
',,,-443,-443,-443,,,,589,,,,,-443,-443,,-443,-443,-443,-443,-443,,,',
',,,,,,584,,,,,,,,,,,597,596,,-443,-443,-443,-443,-443,-443,-443,-443',
'-443,-443,-443,-443,-443,-443,,,-443,-443,-443,,,-443,,289,-443,,,-443',
'-443,,-443,590,-443,,-443,,-443,-443,-443,-443,-443,-443,-443,,-443',
'-443,-443,,,,,,,,,,,,,-443,-443,-312,-443,,-443,,,,-312,-312,-312,-443',
',-312,-312,-312,581,-312,578,577,576,586,579,,,,,-312,-312,,,,589,,',
',,-312,-312,,-312,-312,-312,-312,-312,,,,,,,,,,584,,,,,,,,,594,593,597',
'596,,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312',
'-312,,,-312,-312,-312,,,-312,,292,-312,,,-312,-312,,-312,590,-312,,-312',
',-312,-312,-312,-312,-312,-312,-312,,-312,,-312,,,,,,,,,,,,,-312,-312',
'-295,-312,,-312,,,,-295,-295,-295,-312,,-295,-295,-295,581,-295,578',
'577,576,586,579,,,,,-295,-295,-295,,,589,,,,,-295,-295,,-295,-295,-295',
'-295,-295,,,,,,,,,,584,,,,,,,,,594,593,597,596,,-295,-295,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,,,-295,-295,-295,',
',-295,,,-295,,,-295,-295,,-295,590,-295,,-295,,-295,-295,-295,-295,-295',
'-295,-295,,-295,,-295,581,,578,577,576,586,579,,,,,,-295,-295,-295,-295',
'589,-295,-649,-295,,,,,-295,-649,-649,-649,,,-649,-649,-649,,-649,,',
',584,,,,,-649,-649,-649,,594,593,597,596,,,,-649,-649,,-649,-649,-649',
'-649,-649,,,,,,,,,,,,,,235,,,,,,,,590,,-649,-649,-649,-649,-649,-649',
'-649,-649,-649,-649,-649,-649,-649,-649,,,-649,-649,-649,,,-649,,289',
'-649,,,-649,-649,,-649,,-649,,-649,,-649,-649,-649,-649,-649,-649,-649',
',-649,-649,-649,,,,,,,,,,,,,-649,-649,-629,-649,,-649,,,,-629,-629,-629',
'-649,,-629,-629,-629,581,-629,578,577,576,586,579,,,,-629,-629,-629',
'-629,,,589,,,,,-629,-629,,-629,-629,-629,-629,-629,,,,,,,,,,584,,,,',
',,,,594,593,597,596,,-629,-629,-629,-629,-629,-629,-629,-629,-629,-629',
'-629,-629,-629,-629,,,-629,-629,-629,,,-629,,,-629,,,-629,-629,,-629',
'590,-629,,-629,,-629,-629,-629,-629,-629,-629,-629,,-629,-629,-629,581',
',578,577,576,586,579,,,,,,-629,-629,-629,-629,589,-629,-630,-629,,,',
',-629,-630,-630,-630,,,-630,-630,-630,,-630,,,,584,,,,,-630,-630,-630',
'-630,,,597,596,,,,-630,-630,,-630,-630,-630,-630,-630,,,,,,,,,,,,,,',
',,,,,,,590,,-630,-630,-630,-630,-630,-630,-630,-630,-630,-630,-630,-630',
'-630,-630,,,-630,-630,-630,,,-630,,,-630,,,-630,-630,,-630,,-630,,-630',
',-630,-630,-630,-630,-630,-630,-630,,-630,-630,-630,581,,578,577,576',
'586,579,,,,,,-630,-630,-630,-630,589,-630,-649,-630,,,,,-630,-649,-649',
'-649,,,-649,-649,-649,,-649,,,,584,,,,,-649,-649,,,,,597,596,,,,-649',
'-649,,-649,-649,-649,-649,-649,581,,578,577,576,586,579,581,,578,577',
'576,586,579,,,589,,,,,590,,589,,,,,,,,,,,-649,,,,584,,,-649,,,,584,289',
'-649,,597,596,,,,594,593,597,596,,,,,,,,,,,-649,-649,,,,,,,,,,,,,-649',
'590,,,,-649,,,590,,,,-649,189,200,190,213,186,206,196,195,216,217,211',
'194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209',
'202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,138',
',140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176',
'161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171',
'149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206',
'196,195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199',
'192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183',
'179,180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189',
'200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219,198',
'187,201,205,207,199,192,,,,208,215,210,381,380,382,379,185,204,203,',
',,,,184,191,182,183,376,377,378,374,141,112,111,375,,114,,,,,,,173,174',
',169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,388,',
',,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,',
',,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217',
'211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210',
'209,202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141',
'411,410,140,,412,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213',
'186,206,196,195,216,217,211,194,193,188,214,218,219,198,187,201,205',
'207,199,192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191',
'182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,',
',,,178,189,200,190,213,186,206,196,195,216,217,211,194,193,188,214,218',
'219,198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204',
'203,,,,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,',
',,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,103,,,',
',,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217',
'211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210',
'209,202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141',
',,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148',
'171,149,,,177,,,,,,,,,,454,458,,,455,,,,,,170,,,173,174,178,169,151',
'152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,461',
'465,,,460,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,581,177,578,577,576,586,579,,,,,506,458,,,507,589',
',,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,584,,,175',
'176,161,162,,,594,593,597,596,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,,177,,,,,,,,,590,679,458,,,680,,,,,,170,,,173,174',
'178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,,,,,,681,465,,,682,,,,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,,708,458,,,709,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,711,465,,,712,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,679,458,,,680',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,681,465,,,682,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',768,458,,,769,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,770,465,,,771,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,802,458,,,803,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,805,465,,,804',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,891,465,,,892,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',506,458,,,507,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,1068,465,,,1067,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,1071,458,,,1072,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,581,,578,577,576,586,579',
',,1073,465,,,1074,,,589,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,,,584,175,176,161,162,,,,,,289,597,596,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,581,177,578,577,576,586,579',
',,,,,590,,,,589,,,,,170,,,,581,178,578,577,576,586,579,,,,,,,584,,581',
'589,578,577,576,586,579,,,597,596,,,,,581,589,578,577,576,586,579,,584',
'581,,578,577,576,586,579,589,594,593,597,596,,,584,,589,,581,590,578',
'577,576,586,579,597,596,,,584,,,,,589,,,,584,,597,596,,,590,,,,,597',
'596,,,,,,584,,,590,,,,,,,,597,596,,,,,,590,,,,,,,,,590,,,,,,,,,,,,,',
',,,,590' ]
        racc_action_table = arr = ::Array.new(26124, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'110,238,470,470,355,363,65,110,110,110,364,356,110,110,110,708,110,367',
'937,709,22,686,718,718,110,835,110,110,110,329,92,613,1017,402,1017',
'888,110,110,92,110,110,110,110,110,1,961,703,19,733,1071,768,603,769',
'1072,19,686,22,239,238,835,889,703,617,19,1085,3,617,110,110,110,110',
'110,110,110,110,110,110,110,110,110,110,13,708,110,110,110,709,110,110',
'788,788,110,470,65,110,110,402,110,15,110,688,110,16,110,110,110,110',
'110,110,110,363,110,718,110,239,364,329,708,355,770,708,709,367,355',
'709,356,110,110,110,110,356,110,937,110,113,708,613,937,110,709,18,113',
'113,113,110,1073,113,113,113,888,113,603,888,733,888,768,603,769,113',
'961,113,113,113,1071,961,889,771,1072,1071,29,113,113,1072,113,113,113',
'113,113,1085,788,47,47,25,1085,40,770,27,688,525,44,44,390,374,27,405',
'5,43,334,334,374,5,113,113,113,113,113,113,113,113,113,113,113,113,113',
'113,47,47,113,113,113,719,113,113,1073,770,113,719,241,113,113,615,113',
'771,113,29,113,438,113,113,113,113,113,113,113,735,113,49,113,73,525',
'525,525,390,390,390,735,29,405,640,1073,113,113,113,113,1073,113,460',
'113,44,44,525,771,113,460,460,460,334,334,113,460,460,138,460,615,241',
'375,138,138,735,735,615,476,375,438,616,615,99,559,100,615,559,679,460',
'460,680,460,460,460,460,460,750,376,750,750,750,101,750,615,376,640',
'640,802,735,957,793,957,957,957,640,957,841,711,803,460,460,460,460',
'460,460,460,460,460,460,460,460,460,460,616,476,460,460,460,824,460',
'616,891,102,460,679,616,460,680,913,616,392,460,136,460,397,460,460',
'460,460,460,460,460,220,460,802,460,240,616,407,841,711,793,793,643',
'750,803,841,711,460,460,793,460,711,460,461,841,711,957,977,242,460',
'461,461,461,891,824,460,461,461,977,461,891,243,841,711,913,891,377',
'20,461,891,392,392,392,377,397,397,397,247,394,461,461,394,461,461,461',
'461,461,891,407,407,407,977,977,643,643,643,41,378,379,380,381,42,281',
'338,378,379,380,381,285,20,461,461,461,461,461,461,461,461,461,461,461',
'461,461,461,20,977,461,461,461,454,461,296,560,297,461,560,455,461,41',
'394,394,300,461,42,461,338,461,461,461,461,461,461,461,41,461,461,461',
'663,42,353,338,353,353,353,353,353,50,17,17,461,461,454,461,50,461,353',
'681,564,455,314,564,461,50,681,681,681,454,461,681,681,681,308,681,455',
'354,354,308,353,353,663,497,681,681,681,681,360,353,353,353,353,360',
'316,681,681,663,681,681,681,681,681,877,382,877,877,877,317,877,584',
'382,584,584,584,497,584,384,897,497,497,497,497,897,384,353,681,681',
'681,681,681,681,681,681,681,681,681,681,681,681,318,877,681,681,681',
'237,681,681,584,324,681,327,237,681,681,328,681,584,681,333,681,237',
'681,681,681,681,681,681,681,901,681,681,681,855,901,567,855,567,567',
'567,567,567,321,738,738,681,681,681,681,321,681,567,681,682,969,756',
'756,681,321,969,682,682,682,681,335,682,682,682,747,682,747,747,747',
'567,747,1003,782,782,1003,682,682,682,567,567,567,567,1051,1051,339',
'682,682,322,682,682,682,682,682,958,322,958,958,958,342,958,348,361',
'747,322,875,362,875,875,875,366,875,747,368,396,567,399,682,682,682',
'682,682,682,682,682,682,682,682,682,682,682,401,958,682,682,682,404',
'682,682,427,430,682,432,875,682,682,435,682,449,682,452,682,875,682',
'682,682,682,682,682,682,453,682,462,682,739,472,739,739,739,739,739',
'498,484,485,486,487,682,682,682,682,739,682,804,682,503,323,514,515',
'682,804,804,804,323,531,682,804,804,532,804,502,535,323,739,498,537',
'542,545,498,498,498,498,739,739,739,739,502,502,547,804,804,554,804',
'804,804,804,804,1012,555,1012,1012,1012,502,1012,502,556,502,502,502',
'502,561,562,502,1014,502,1014,1014,1014,739,1014,804,804,804,804,804',
'804,804,804,804,804,804,804,804,804,565,1012,804,804,804,1049,804,1049',
'1049,1049,804,1049,569,804,570,572,573,1014,804,574,804,583,804,804',
'804,804,804,804,804,591,804,741,804,741,741,741,741,741,482,595,598',
'600,604,1049,605,804,804,741,804,606,804,805,607,621,624,325,647,804',
'805,805,805,340,325,804,805,805,551,805,340,741,482,325,650,656,482',
'482,805,340,741,741,741,741,551,551,664,669,675,805,805,683,805,805',
'805,805,805,684,687,690,551,365,551,692,551,551,551,551,365,483,551',
'695,551,697,705,707,741,365,710,713,805,805,805,805,805,805,805,805',
'805,805,805,805,805,805,714,437,805,805,805,717,805,483,437,734,805',
'483,483,805,749,751,758,437,805,764,805,767,805,805,805,805,805,805',
'805,797,805,805,805,541,799,801,809,789,789,833,541,789,789,789,840',
'805,805,851,805,541,805,2,2,2,2,2,2,805,852,619,2,2,859,805,860,2,619',
'2,2,2,2,2,2,2,861,619,865,866,868,2,2,2,2,2,2,2,869,871,2,874,876,879',
'885,442,2,2,2,2,2,2,2,2,2,2,2,2,890,2,2,2,894,2,2,898,2,2,2,442,442',
'442,442,442,442,442,442,442,442,442,712,442,442,774,900,442,442,712',
'2,909,774,2,712,912,2,2,712,919,2,774,2,442,920,442,2,442,442,442,442',
'442,442,442,2,442,922,923,892,2,2,2,2,2,2,892,924,926,2,2,892,442,927',
'442,892,928,2,941,942,2,2,2,959,968,2,2,36,36,36,36,36,36,972,975,990',
'36,36,988,991,993,36,990,36,36,36,36,36,36,36,998,990,1007,1008,1009',
'36,36,36,36,36,36,36,1010,1011,36,1013,1023,1026,1027,448,36,36,36,36',
'36,36,36,36,36,36,36,36,1028,36,36,36,1029,36,36,1031,36,36,36,448,448',
'448,448,448,448,448,448,448,448,448,995,448,448,996,1037,448,448,995',
'36,1050,996,36,1055,1056,36,36,995,1067,36,996,36,448,1068,448,36,448',
'448,448,448,448,448,448,36,448,1070,1076,997,36,36,36,36,36,36,997,999',
'1077,36,36,1081,448,1082,999,997,1083,36,1084,1092,36,36,36,999,,36',
'36,222,222,222,222,222,222,,,1033,222,222,,,,222,1033,222,222,222,222',
'222,222,222,,1033,,,,222,222,222,222,222,222,222,,943,222,943,943,943',
',943,222,222,222,222,222,222,222,222,222,222,222,222,,222,222,222,,222',
'222,,222,222,222,24,24,24,24,24,24,24,24,24,24,24,1041,24,24,,,24,24',
'1041,222,,,222,,,222,222,1041,,222,,222,24,,24,222,24,24,24,24,24,24',
'24,222,24,,,1074,222,222,222,222,222,222,1074,,,222,222,1074,24,,,1074',
',222,,,222,222,222,,,222,222,246,246,246,246,246,246,,,,246,246,,,,246',
',246,246,246,246,246,246,246,9,9,9,9,9,246,246,246,246,246,246,246,',
'1043,246,1043,1043,1043,,1043,246,246,246,246,246,246,246,246,246,246',
'246,246,,246,246,246,,246,246,,246,246,246,294,294,294,294,294,294,294',
'294,294,294,294,,294,294,,,294,294,,246,,,246,,,246,246,,,246,,246,294',
',294,246,294,294,294,294,294,294,294,246,294,,,,246,246,246,246,246',
'246,,,,246,246,,294,,,,,246,,,246,246,246,,,246,246,315,315,315,315',
'315,315,,,,315,315,,,,315,,315,315,315,315,315,315,315,312,312,312,312',
'312,315,315,315,315,315,315,315,,,315,347,347,347,347,347,315,315,315',
'315,315,315,315,315,315,315,315,315,,315,315,315,,315,315,,315,315,315',
'501,501,501,501,501,501,501,501,501,501,501,,501,501,,,501,501,,315',
',,315,,,315,315,,,315,,315,501,,501,315,501,501,501,501,501,501,501',
'315,501,,,,315,315,315,315,315,315,,,,315,315,501,501,,,,,315,,,315',
'315,315,,,315,315,320,320,320,320,320,320,,,,320,320,,,,320,,320,320',
'320,320,320,320,320,530,530,530,530,530,320,320,320,320,320,320,320',
',,320,,,,,,320,320,320,320,320,320,320,320,320,320,320,320,,320,320',
'320,,320,320,,320,320,320,552,552,552,552,552,552,552,552,552,552,552',
',552,552,,,552,552,,320,,,320,,,320,320,,,320,,320,552,,552,320,552',
'552,552,552,552,552,552,320,552,,,,320,320,320,320,320,320,,,,320,320',
',552,,,,,320,,,320,320,320,,,320,320,346,346,346,346,346,346,,,,346',
'346,,,,346,,346,346,346,346,346,346,346,,,,,,346,346,346,346,346,346',
'346,,,346,,,,,,346,346,346,346,346,346,346,346,346,346,346,346,,346',
'346,346,,346,346,,346,346,346,806,806,806,806,806,806,806,806,806,806',
'806,,806,806,,,806,806,,346,,,346,,,346,346,,,346,,346,806,,806,346',
'806,806,806,806,806,806,806,346,806,,,,346,346,346,346,346,346,,,,346',
'346,,806,,,,,346,,,346,346,346,,,346,346,358,358,358,358,358,358,,,',
'358,358,,,,358,,358,358,358,358,358,358,358,,,,,,358,358,358,358,358',
'358,358,,,358,,,,,,358,358,358,358,358,358,358,358,358,358,358,358,',
'358,358,358,,358,358,,358,358,358,918,918,918,918,918,918,918,918,918',
'918,918,,918,918,,,918,918,,358,,,358,,,358,358,,,358,,358,918,,918',
'358,918,918,918,918,918,918,918,358,918,,,,358,358,358,358,358,358,',
',,358,358,,918,,,,,358,,,358,358,358,,,358,358,359,359,359,359,359,359',
',,,359,359,,,,359,,359,359,359,359,359,359,359,,,,,,359,359,359,359',
'359,359,359,,,359,,,,,,359,359,359,359,359,359,359,359,359,359,359,359',
',359,359,359,,359,359,,359,359,359,480,480,480,480,480,480,480,480,480',
'480,480,,480,480,,,480,480,,359,,,359,,,359,359,,,359,,359,480,,480',
'359,480,480,480,480,480,480,480,359,480,,,,359,359,359,359,359,359,',
',,359,359,,,,,,,359,,,359,359,359,,,359,359,599,599,599,599,599,599',
',,,599,599,,,,599,,599,599,599,599,599,599,599,,,,,,599,599,599,599',
'599,599,599,,,599,,,,,,599,599,599,599,599,599,599,599,599,599,599,599',
',599,599,599,,599,599,,599,599,599,481,481,481,481,481,481,481,481,481',
'481,481,,481,481,,,481,481,,599,,,599,,,599,599,,,599,,599,481,,481',
'599,481,481,481,481,481,481,481,599,481,,,,599,599,599,599,599,599,',
',,599,599,,,,,,,599,,,599,599,599,,,599,599,602,602,602,602,602,602',
',,,602,602,,,,602,,602,602,602,602,602,602,602,,,,,,602,602,602,602',
'602,602,602,,,602,,,,,,602,602,602,602,602,602,602,602,602,602,602,602',
',602,602,602,,602,602,,602,602,602,491,491,491,491,491,491,491,,,491',
'491,,,,,,491,491,,602,,,602,,,602,602,,,602,,602,491,,491,602,491,491',
'491,491,491,491,491,602,491,,,,602,602,602,602,602,602,,,,602,602,,',
',,,,602,,,602,602,602,,,602,602,652,652,652,652,652,652,,,,652,652,',
',,652,,652,652,652,652,652,652,652,,,,,,652,652,652,652,652,652,652',
',,652,,,,,,652,652,652,652,652,652,652,652,652,652,652,652,,652,652',
'652,,652,652,,652,652,652,492,492,492,492,492,492,492,,,492,492,,,,',
',492,492,,652,,,652,,,652,652,,,652,,652,492,,492,652,492,492,492,492',
'492,492,492,652,492,,,,652,652,652,652,652,652,,,,652,652,,,,,,,652',
',,652,652,652,,,652,652,772,772,772,772,772,772,,,,772,772,,,,772,,772',
'772,772,772,772,772,772,,,,,,772,772,772,772,772,772,772,,,772,,,,,',
'772,772,772,772,772,772,772,772,772,772,772,772,,772,772,772,,772,772',
',772,772,772,493,493,493,493,493,493,493,,,493,493,,,,,,493,493,,772',
',,772,,,772,772,,,772,,772,493,,493,772,493,493,493,493,493,493,493',
'772,493,,,,772,772,772,772,772,772,,,,772,772,,,,,,,772,,,772,772,772',
',,772,772,783,783,783,783,783,783,,,,783,783,,,,783,,783,783,783,783',
'783,783,783,,,,,,783,783,783,783,783,783,783,,,783,,,,,,783,783,783',
'783,783,783,783,783,783,783,783,783,,783,783,783,,783,783,,783,783,783',
'494,494,494,494,494,494,494,,,494,494,,,,,,494,494,,783,,,783,,,783',
'783,,,783,,783,494,,494,783,494,494,494,494,494,494,494,783,494,,,,783',
'783,783,783,783,783,,,,783,783,,,,,,,783,,,783,783,783,,,783,783,784',
'784,784,784,784,784,,,,784,784,,,,784,,784,784,784,784,784,784,784,',
',,,,784,784,784,784,784,784,784,,,784,,,,,,784,784,784,784,784,784,784',
'784,784,784,784,784,,784,784,784,,784,784,,784,784,784,495,495,495,495',
'495,495,495,,,495,495,,,,,,495,495,,784,,,784,,,784,784,,,784,,784,495',
',495,784,495,495,495,495,495,495,495,784,495,,,,784,784,784,784,784',
'784,,,,784,784,,,,,,,784,,,784,784,784,,,784,784,790,790,790,790,790',
'790,,,,790,790,,,,790,,790,790,790,790,790,790,790,,,,,,790,790,790',
'790,790,790,790,,,790,,,,,,790,790,790,790,790,790,790,790,790,790,790',
'790,,790,790,790,,790,790,,790,790,790,496,496,496,496,496,496,496,',
',496,496,,,,,,496,496,,790,,,790,,,790,790,,,790,,790,496,,496,790,496',
'496,496,496,496,496,496,790,496,,,,790,790,790,790,790,790,,,,790,790',
',,,,,,790,,,790,790,790,,,790,790,830,830,830,830,830,830,,,,830,830',
',,,830,,830,830,830,830,830,830,830,,,,,,830,830,830,830,830,830,830',
',,830,,,,,,830,830,830,830,830,830,830,830,830,830,830,830,,830,830',
'830,,830,830,,830,830,830,499,499,499,499,499,499,499,,,499,499,,,,',
',499,499,,830,,,830,,,830,830,,,830,,830,499,,499,830,499,499,499,499',
'499,499,499,830,499,,,,830,830,830,830,830,830,,,,830,830,,,,,,,830',
',,830,830,830,,,830,830,849,849,849,849,849,849,,,,849,849,,,,849,,849',
'849,849,849,849,849,849,,,,,,849,849,849,849,849,849,849,,,849,,,,,',
'849,849,849,849,849,849,849,849,849,849,849,849,,849,849,849,,849,849',
',849,849,849,500,500,500,500,500,500,500,500,,500,500,,,,,,500,500,',
'849,,,849,,,849,849,,,849,,849,500,,500,849,500,500,500,500,500,500',
'500,849,500,,,,849,849,849,849,849,849,,,,849,849,,,,,,,849,,,849,849',
'849,,,849,849,857,857,857,857,857,857,,,,857,857,,,,857,,857,857,857',
'857,857,857,857,,,,,,857,857,857,857,857,857,857,,,857,,,,,,857,857',
'857,857,857,857,857,857,857,857,857,857,,857,857,857,,857,857,,857,857',
'857,488,,,,,,,,,,,,,,,,488,488,,857,,,857,,490,857,857,,,857,,857,488',
',488,857,488,488,488,488,490,490,,857,,,,,857,857,857,857,857,857,,',
'490,857,857,,490,490,490,490,,857,,,857,857,857,,,857,857,858,858,858',
'858,858,858,,,,858,858,,,,858,,858,858,858,858,858,858,858,,,,,,858',
'858,858,858,858,858,858,,,858,,,,,,858,858,858,858,858,858,858,858,858',
'858,858,858,,858,858,858,,858,858,,858,858,858,489,,,,,,,,,,,,,,,,489',
'489,,858,,,858,,,858,858,,,858,,858,489,,489,858,489,489,489,489,,,',
'858,,,,,858,858,858,858,858,858,,,,858,858,,,,,,,858,,,858,858,858,',
',858,858,884,884,884,884,884,884,,,,884,884,,,,884,,884,884,884,884',
'884,884,884,,,,,,884,884,884,884,884,884,884,,,884,,,,,,884,884,884',
'884,884,884,884,884,884,884,884,884,,884,884,884,,884,884,,884,884,884',
',,,,,,,,,,,,,,,,,,,884,,,884,,,884,884,,,884,,884,,,,884,,,,,,,,884',
',,,,884,884,884,884,884,884,,,,884,884,,,,,,,884,,,884,884,884,,,884',
'884,895,895,895,895,895,895,,,,895,895,,,,895,,895,895,895,895,895,895',
'895,,,,,,895,895,895,895,895,895,895,,,895,,,,,,895,895,895,895,895',
'895,895,895,895,895,895,895,,895,895,895,,895,895,,895,895,895,,,,,',
',,,,,,,,,,,,,,895,,,895,,,895,895,,,895,,895,,,,895,,,,,,,,895,,,,,895',
'895,895,895,895,895,,,,895,895,,,,,,,895,,,895,895,895,,,895,895,934',
'934,934,934,934,934,,,,934,934,,,,934,,934,934,934,934,934,934,934,',
',,,,934,934,934,934,934,934,934,,,934,,,,,,934,934,934,934,934,934,934',
'934,934,934,934,934,,934,934,934,,934,934,,934,934,934,,,,,,,,,,,,,',
',,,,,,934,,,934,,,934,934,,,934,,934,,,,934,,,,,,,,934,,,,,934,934,934',
'934,934,934,,,,934,934,,,,,,,934,,,934,934,934,,,934,934,935,935,935',
'935,935,935,,,,935,935,,,,935,,935,935,935,935,935,935,935,,,,,,935',
'935,935,935,935,935,935,,,935,,,,,,935,935,935,935,935,935,935,935,935',
'935,935,935,,935,935,935,,935,935,,935,935,935,,,,,,,,,,,,,,,,,,,,935',
',,935,,,935,935,,,935,,935,,,,935,,,,,,,,935,,,,,935,935,935,935,935',
'935,,,,935,935,,,,,,,935,,,935,935,935,,,935,935,965,965,965,965,965',
'965,,,,965,965,,,,965,,965,965,965,965,965,965,965,,,,,,965,965,965',
'965,965,965,965,,,965,,,,,,965,965,965,965,965,965,965,965,965,965,965',
'965,,965,965,965,,965,965,,965,965,965,,,,,,,,,,,,,,,,,,,,965,,,965',
',,965,965,,,965,,965,,,,965,,,,,,,,965,,,,,965,965,965,965,965,965,',
',,965,965,,,,,,,965,,,965,965,965,,,965,965,994,994,994,994,994,994',
',,,994,994,,,,994,,994,994,994,994,994,994,994,,,,,,994,994,994,994',
'994,994,994,,,994,,,,,,994,994,994,994,994,994,994,994,994,994,994,994',
',994,994,994,,994,994,,994,994,994,,,,,,,,,,,,,,,,,,,,994,,,994,,,994',
'994,,,994,,994,,,,994,,,,,,,,994,,,,,994,994,994,994,994,994,,,,994',
'994,,,,,,,994,,,994,994,994,,,994,994,1015,1015,1015,1015,1015,1015',
',,,1015,1015,,,,1015,,1015,1015,1015,1015,1015,1015,1015,,,,,,1015,1015',
'1015,1015,1015,1015,1015,,,1015,,,,,,1015,1015,1015,1015,1015,1015,1015',
'1015,1015,1015,1015,1015,,1015,1015,1015,,1015,1015,,1015,1015,1015',
',,,,,,,,,,,,,,,,,,,1015,,,1015,,,1015,1015,,,1015,,1015,,,,1015,,,,',
',,,1015,,,,,1015,1015,1015,1015,1015,1015,,,,1015,1015,,,,,,,1015,,',
'1015,1015,1015,,,1015,1015,1020,1020,1020,1020,1020,1020,,,,1020,1020',
',,,1020,,1020,1020,1020,1020,1020,1020,1020,,,,,,1020,1020,1020,1020',
'1020,1020,1020,,,1020,,,,,,1020,1020,1020,1020,1020,1020,1020,1020,1020',
'1020,1020,1020,,1020,1020,1020,,1020,1020,,1020,1020,1020,,,,,,,,,,',
',,,,,,,,,1020,,,1020,,,1020,1020,,,1020,,1020,,,,1020,,,,,,,,1020,,',
',,1020,1020,1020,1020,1020,1020,,,,1020,1020,,,,,,,1020,,,1020,1020',
'1020,,,1020,1020,1022,1022,1022,1022,1022,1022,,,,1022,1022,,,,1022',
',1022,1022,1022,1022,1022,1022,1022,,,,,,1022,1022,1022,1022,1022,1022',
'1022,,,1022,,,,,,1022,1022,1022,1022,1022,1022,1022,1022,1022,1022,1022',
'1022,,1022,1022,1022,,1022,1022,,1022,1022,1022,,,,,,,,,,,,,,,,,,,,1022',
',,1022,,,1022,1022,,,1022,,1022,,,,1022,,,,,,,,1022,,,,,1022,1022,1022',
'1022,1022,1022,,,,1022,1022,,,,,,,1022,,,1022,1022,1022,,,1022,1022',
'8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8',
'8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8',
'8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8',
'23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23',
'23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23',
'23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23',
'23,23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23,,,23,23,32,32,32,,32,,,',
'32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,',
',,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,',
',,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32',
'32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,33,33,33,,33,,,,33,33',
',,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33',
',,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,',
',,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33',
'33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,34,34,34,,34,,,,34,34,,,,34',
',34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34',
'34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34',
',,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34',
'34,,,,,,,34,,34,34,34,34,,,34,34,37,37,37,,37,,,,37,37,,,,37,,37,37',
'37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37',
'37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37',
',,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37',
'37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38',
'38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38',
',38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,',
',,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,,,38,38,45,45,45',
',45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,',
',45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,',
',,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45',
'45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,46,46,46,,46,,,,46,46',
',,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46',
',,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,',
',,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,',
'46,46,,,,,,,46,,,46,46,46,,,46,46,48,48,48,,48,,,,48,48,,,,48,,48,48',
'48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,,,48,,,48,48,48,48',
'48,48,48,48,,48,48,48,,48,48,,48,48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,',
'48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48,48,48,48,,,,48,48,,,,,,,48',
',,48,48,48,,,48,48,62,62,62,62,62,,,,62,62,,,,62,,62,62,62,62,62,62',
'62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,62,62,,62,62,62,62,62,62,62,62',
'62,,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62',
',62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,,62,62',
'62,,,62,62,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67',
'67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67',
',67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,',
',,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,,67,67,68',
'68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68',
'68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,68,68,68',
',,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,,,,,,68,,,,,68,68',
'68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68,,,68,68,71,71,71,,71,,,,71',
'71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,',
'71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,71,71,71,,,,,,,,,,,,',
',,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,,71,,,,,71,71,71,71,71,71',
',,,71,71,71,,,,,71,71,,,71,71,71,,,71,71,72,72,72,,72,,,,72,72,,,,72',
',72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72',
'72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,,,,,,,,,,,,,,,,,,,72,,,72',
',,72,72,,,72,,72,,,,,,,,,,,,,,,,,72,72,72,72,72,72,,,,72,72,,,,,,,72',
',,72,72,72,,,72,72,126,126,126,126,126,,,,126,126,,,,126,,126,126,126',
'126,126,126,126,,,,,,126,126,126,126,126,126,126,,,126,,,,,,126,126',
'126,126,126,126,126,126,126,126,126,126,,126,126,126,,126,126,,126,126',
'126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126,126,,,126,,126,,,,126,,,,,,,',
'126,,,,,126,126,126,126,126,126,,,,126,126,,,,,,126,126,,,126,126,126',
',,126,126,131,131,131,,131,,,,131,131,,,,131,,131,131,131,131,131,131',
'131,,,,,,131,131,131,131,131,131,131,,,131,,,,,,,131,,,131,131,131,131',
'131,131,131,131,,131,131,131,,131,131,,131,131,131,,,,,,,,,,,,,,,,,',
',,131,,,131,,,131,131,,,131,,,,,,131,,,,,,,,131,,,,,131,131,131,131',
'131,131,,,,131,131,,,,,,,131,,,131,131,131,,,131,131,132,132,132,,132',
',,,132,132,,,,132,,132,132,132,132,132,132,132,,,,,,132,132,132,132',
'132,132,132,,,132,,,,,,,132,,,132,132,132,132,132,132,132,132,,132,132',
'132,,132,132,,132,132,132,,,,,,,,,,,,,,,,,,,,132,,,132,,,132,132,,,132',
',,,,,132,,,,,,,,132,,,,,132,132,132,132,132,132,,,,132,132,,,,,,,132',
',,132,132,132,,,132,132,133,133,133,,133,,,,133,133,,,,133,,133,133',
'133,133,133,133,133,,,,,,133,133,133,133,133,133,133,,,133,,,,,,,133',
',,133,133,133,133,133,133,133,133,,133,133,133,,133,133,,133,133,133',
',,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,,133,,,,,,133,,,,,,,,133,,,',
',133,133,133,133,133,133,,,,133,133,,,,,,,133,,,133,133,133,,,133,133',
'134,134,134,,134,,,,134,134,,,,134,,134,134,134,134,134,134,134,,,,',
',134,134,134,134,134,134,134,,,134,,,,,,,134,,,134,134,134,134,134,134',
'134,134,,134,134,134,,134,134,,134,134,134,,,,,,,,,,,,,,,,,,,,134,,',
'134,,,134,134,,,134,,,,,,134,,,,,,,,134,,,,,134,134,134,134,134,134',
',,,134,134,,,,,,,134,,,134,134,134,,,134,134,135,135,135,135,135,,,',
'135,135,,,,135,,135,135,135,135,135,135,135,,,,,,135,135,135,135,135',
'135,135,,,135,,,,,,135,135,,135,135,135,135,135,135,135,135,135,,135',
'135,135,,135,135,,135,135,135,,,,,,,,,,,,,,,,,,,,135,,,135,,,135,135',
',,135,,135,,,,135,,,,,,,,135,,,,,135,135,135,135,135,135,,,,135,135',
',,,,,,135,,,135,135,135,,,135,135,223,223,223,,223,,,,223,223,,,,223',
',223,223,223,223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223',
',,,,,,223,,,223,223,223,223,223,223,223,223,,223,223,223,,223,223,,223',
'223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,223,,,,223,,,',
',,,,223,,,,,223,223,223,223,223,223,,,,223,223,,,,,,,223,,,223,223,223',
',,223,223,224,224,224,,224,,,,224,224,,,,224,,224,224,224,224,224,224',
'224,,,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224',
'224,224,224,224,,224,224,224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,',
',,224,,,224,,,224,224,,,224,,224,,,,224,,,,,,,,224,,,,,224,224,224,224',
'224,224,,,,224,224,,,,,,,224,,,224,224,224,,,224,224,225,225,225,,225',
',,,225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225,225,225',
'225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,225,,225,225',
'225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225',
',,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,,,,,,,225',
',,225,225,225,,,225,225,226,226,226,,226,,,,226,226,,,,226,,226,226',
'226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,,,226',
',,226,226,226,226,226,226,226,226,,226,226,226,,226,226,,226,226,226',
',,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,',
',226,226,226,226,226,226,,,,226,226,,,,,,,226,,,226,226,226,,,226,226',
'227,227,227,,227,,,,227,227,,,,227,,227,227,227,227,227,227,227,,,,',
',227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227,227,227,227,227',
'227,227,,227,227,227,,227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,',
'227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,,,227,227,227,227,227,227',
',,,227,227,,,,,,,227,,,227,227,227,,,227,227,228,228,228,,228,,,,228',
'228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228,228,228,228,228',
'228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,228,228,228,228,228',
',228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,',
'228,,228,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,,,,',
',,228,,228,228,228,228,,,228,228,232,232,232,,232,,,,232,232,,,,232',
',232,232,232,232,232,232,232,,,,,,232,232,232,232,232,232,232,,,232',
',,,,,,232,,,232,232,232,232,232,232,232,232,,232,232,232,,232,232,,232',
'232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,',
',232,,,,,232,232,232,232,232,232,,,,232,232,,,,,,,232,,,232,232,232',
',,232,232,233,233,233,,233,,,,233,233,,,,233,,233,233,233,233,233,233',
'233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233',
'233,233,233,233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,',
',,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233',
'233,233,,,,233,233,,,,,,,233,,,233,233,233,,,233,233,234,234,234,,234',
',,,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234',
'234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234',
'234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234',
',,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234,234,234,,,,,',
'234,,,234,234,234,,,234,234,245,245,245,,245,,,,245,245,,,,245,,245',
'245,245,245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,',
',245,,,245,245,245,245,245,245,245,245,,245,245,245,,245,245,,245,245',
'245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245',
',,,,245,245,245,245,245,245,,,,245,245,,,,,,,245,,,245,245,245,,,245',
'245,248,248,248,,248,,,,248,248,,,,248,,248,248,248,248,248,248,248',
',,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248',
'248,248,248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248',
',,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248',
',,,248,248,,,,,,,248,,,248,248,248,,,248,248,249,249,249,,249,,,,249',
'249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249',
'249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,',
'249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,',
',,,249,,,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249,',
',249,249,249,,,249,249,250,250,250,,250,,,,250,250,,,,250,,250,250,250',
'250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250',
'250,250,250,250,250,250,250,,250,250,250,,250,250,,250,250,250,,,,,',
',,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250',
'250,250,250,250,250,,,,250,250,,,,,,,250,,,250,250,250,,,250,250,251',
'251,251,,251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251',
'251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251',
'251,,251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251',
',,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251',
'251,,,,,,,251,,,251,251,251,,,251,251,252,252,252,,252,,,,252,252,,',
',252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,',
',252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252',
',252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,',
',,,,,,252,,,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252',
'252,,,252,252,253,253,253,,253,,,,253,253,,,,253,,253,253,253,253,253',
'253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253',
'253,253,253,253,253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,',
',,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253',
'253,253,253,,,,253,253,,,,,,,253,,,253,253,253,,,253,253,254,254,254',
',254,,,,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254',
'254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254',
'254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254',
',,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,',
',,,254,,,254,254,254,,,254,254,255,255,255,,255,,,,255,255,,,,255,,255',
'255,255,255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,',
',255,,,255,255,255,255,255,255,255,255,,255,255,255,,255,255,,255,255',
'255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255',
',,,,255,255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255',
'255,256,256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256',
',,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256',
'256,256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256',
',,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256',
',,,256,256,,,,,,,256,,,256,256,256,,,256,256,257,257,257,,257,,,,257',
'257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257',
'257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257,',
'257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,',
',,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,',
',257,257,257,,,257,257,258,258,258,,258,,,,258,258,,,,258,,258,258,258',
'258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258',
'258,258,258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,',
',,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258',
'258,258,258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258,258,259',
'259,259,,259,,,,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259',
'259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259',
'259,,259,259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259',
',,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259',
'259,,,,,,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260,260,,',
',260,,260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,',
',260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260,260,,260,260',
',260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,',
',,,,,,260,,,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260',
'260,,,260,260,261,261,261,,261,,,,261,261,,,,261,,261,261,261,261,261',
'261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261',
'261,261,261,261,261,,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,',
',,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261,261,261',
'261,261,261,,,,261,261,,,,,,,261,,,261,261,261,,,261,261,262,262,262',
',262,,,,262,262,,,,262,,262,262,262,262,262,262,262,,,,,,262,262,262',
'262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262,262,,262',
'262,262,,262,262,,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262',
',,262,,,,,,262,,,,,,,,262,,,,,262,262,262,262,262,262,,,,262,262,,,',
',,,262,,,262,262,262,,,262,262,263,263,263,,263,,,,263,263,,,,263,,263',
'263,263,263,263,263,263,,,,,,263,263,263,263,263,263,263,,,263,,,,,',
',263,,,263,263,263,263,263,263,263,263,,263,263,263,,263,263,,263,263',
'263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263,,,,,,,,263',
',,,,263,263,263,263,263,263,,,,263,263,,,,,,,263,,,263,263,263,,,263',
'263,264,264,264,,264,,,,264,264,,,,264,,264,264,264,264,264,264,264',
',,,,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264',
'264,264,264,,264,264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264',
',,264,,,264,264,,,264,,,,,,264,,,,,,,,264,,,,,264,264,264,264,264,264',
',,,264,264,,,,,,,264,,,264,264,264,,,264,264,265,265,265,,265,,,,265',
'265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265,265,265',
'265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,,265,265,265,',
'265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,',
',,,265,,,,,,,,265,,,,,265,265,265,265,265,265,,,,265,265,,,,,,,265,',
',265,265,265,,,265,265,266,266,266,,266,,,,266,266,,,,266,,266,266,266',
'266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266',
'266,266,266,266,266,266,266,,266,266,266,,266,266,,266,266,266,,,,,',
',,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,,,266,,,,,266',
'266,266,266,266,266,,,,266,266,,,,,,,266,,,266,266,266,,,266,266,267',
'267,267,,267,,,,267,267,,,,267,,267,267,267,267,267,267,267,,,,,,267',
'267,267,267,267,267,267,,,267,,,,,,,267,,,267,267,267,267,267,267,267',
'267,,267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267',
',,267,267,,,267,,,,,,267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267',
'267,,,,,,,267,,,267,267,267,,,267,267,268,268,268,,268,,,,268,268,,',
',268,,268,268,268,268,268,268,268,,,,,,268,268,268,268,268,268,268,',
',268,,,,,,,268,,,268,268,268,268,268,268,268,268,,268,268,268,,268,268',
',268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,,,,,268,',
',,,,,,268,,,,,268,268,268,268,268,268,,,,268,268,,,,,,,268,,,268,268',
'268,,,268,268,269,269,269,,269,,,,269,269,,,,269,,269,269,269,269,269',
'269,269,,,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269',
'269,269,269,269,269,,269,269,269,,269,269,,269,269,269,,,,,,,,,,,,,',
',,,,,,269,,,269,,,269,269,,,269,,,,,,269,,,,,,,,269,,,,,269,269,269',
'269,269,269,,,,269,269,,,,,,,269,,,269,269,269,,,269,269,274,274,274',
',274,,,,274,274,,,,274,,274,274,274,274,274,274,274,,,,,,274,274,274',
'274,274,274,274,,,274,,,,,,,274,,,274,274,274,274,274,274,274,274,,274',
'274,274,,274,274,,274,274,274,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,274',
',,274,,,,,,274,,,,,,,,274,,,,,274,274,274,274,274,274,,,,274,274,,,',
',,,274,,,274,274,274,,,274,274,282,282,282,,282,,,,282,282,,,,282,,282',
'282,282,282,282,282,282,,,,,,282,282,282,282,282,282,282,,,282,,,,,',
',282,,,282,282,282,282,282,282,282,282,282,282,282,282,,282,282,,282',
'282,282,,,,,,,,,,,,,,,,,,,,282,,,282,,,282,282,,,282,,282,,282,,282',
',,,,,,,282,,,,,282,282,282,282,282,282,,,,282,282,,,,,,,282,,282,282',
'282,282,,,282,282,289,289,289,,289,,,,289,289,,,,289,,289,289,289,289',
'289,289,289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,,289,,,289,289',
'289,289,289,289,289,289,289,289,289,289,,289,289,,289,289,289,,,,,,',
',,,,,,,,,,,,,289,,,289,,,289,289,,,289,,289,,289,,289,,,,,,,,289,,,',
',289,289,289,289,289,289,,,,289,289,,,,,,,289,,289,289,289,289,,,289',
'289,292,292,292,,292,,,,292,292,,,,292,,292,292,292,292,292,292,292',
',,,,,292,292,292,292,292,292,292,,,292,,,,,,,292,,,292,292,292,292,292',
'292,292,292,292,292,292,292,,292,292,,292,292,292,,,,,,,,,,,,,,,,,,',
',292,,,292,,,292,292,,,292,,292,,292,,292,,,,,,,,292,,,,,292,292,292',
'292,292,292,,,,292,292,292,,,,,,292,,292,292,292,292,,,292,292,299,299',
'299,,299,,,,299,299,,,,299,,299,299,299,299,299,299,299,,,,,,299,299',
'299,299,299,299,299,,,299,,,,,,,299,,,299,299,299,299,299,299,299,299',
',299,299,299,,299,299,,299,299,299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299',
'299,,,299,,,,,,299,,,,,,,,299,,,,,299,299,299,299,299,299,,,,299,299',
',,,,,,299,,,299,299,299,,,299,299,301,301,301,,301,,,,301,301,,,,301',
',301,301,301,301,301,301,301,,,,,,301,301,301,301,301,301,301,,,301',
',,,,,,301,,,301,301,301,301,301,301,301,301,,301,301,301,,301,301,,301',
'301,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301,301,,,301,,,,,,301,,,,,,',
',301,,,,,301,301,301,301,301,301,,,,301,301,,,,,,,301,,,301,301,301',
',,301,301,304,304,304,,304,,,,304,304,,,,304,,304,304,304,304,304,304',
'304,,,,,,304,304,304,304,304,304,304,,,304,,,,,,,304,,,304,304,304,304',
'304,304,304,304,,304,304,304,,304,304,,304,304,304,,,,,,,,,,,,,,,,,',
',,304,,,304,,,304,304,,,304,,,,,,304,,,,,,,,304,,,,,304,304,304,304',
'304,304,,,,304,304,,,,,,,304,,,304,304,304,,,304,304,305,305,305,,305',
',,,305,305,,,,305,,305,305,305,305,305,305,305,,,,,,305,305,305,305',
'305,305,305,,,305,,,,,,,305,,,305,305,305,305,305,305,305,305,,305,305',
'305,,305,305,,305,305,305,,,,,,,,,,,,,,,,,,,,305,,,305,,,305,305,,,305',
',,,,,305,,,,,,,,305,,,,,305,305,305,305,305,305,,,,305,305,,,,,,,305',
',,305,305,305,,,305,305,311,311,311,311,311,,,,311,311,,,,311,,311,311',
'311,311,311,311,311,,,,,,311,311,311,311,311,311,311,,,311,,,,,,311',
'311,,311,311,311,311,311,311,311,311,311,,311,311,311,,311,311,,311',
'311,311,,,,,,,,,,,,,,,,,,,,311,,,311,,,311,311,,,311,,311,,,,311,,,',
',,,,311,,,,,311,311,311,311,311,311,,,,311,311,,,,,,,311,,,311,311,311',
',,311,311,319,319,319,,319,,,,319,319,,,,319,,319,319,319,319,319,319',
'319,,,,,,319,319,319,319,319,319,319,,,319,,,,,,,319,,,319,319,319,319',
'319,319,319,319,,319,319,319,,319,319,,,,319,,,,,,,,,,,,,,,,,,,,319',
',,319,,,319,319,,,319,,,,,,,,,,,,,,,,,,,319,319,319,319,319,319,,,,319',
'319,,,,319,,,319,,,319,319,319,,,319,319,336,336,336,,336,,,,336,336',
',,,336,,336,336,336,336,336,336,336,,,,,,336,336,336,336,336,336,336',
',,336,,,,,,,336,,,336,336,336,336,336,336,336,336,,336,336,336,,336',
'336,,,,336,,,,,,,,,,,,,,,,,,,,336,,,336,,,336,336,,,336,,,,,,,,,,,,',
',,,,,,336,336,336,336,336,336,,,,336,336,,,,,,,336,,,336,336,336,,,336',
'336,343,343,343,,343,,,,343,343,,,,343,,343,343,343,343,343,343,343',
',,,,,343,343,343,343,343,343,343,,,343,,,,,,,343,,,343,343,343,343,343',
'343,343,343,,343,343,343,,343,343,,343,343,343,,,,,,,,,,,,,,,,,,,,343',
',,343,,,343,343,,,343,,,,,,343,,,,,,,,343,,,,,343,343,343,343,343,343',
',,,343,343,,,,,,,343,,,343,343,343,,,343,343,345,345,345,,345,,,,345',
'345,,,,345,,345,345,345,345,345,345,345,,,,,,345,345,345,345,345,345',
'345,,,345,,,,,,,345,,,345,345,345,345,345,345,345,345,,345,345,345,',
'345,345,,345,345,345,,,,,,,,,,,,,,,,,,,,345,,,345,345,,345,345,,,345',
',,,,,345,,,,,,,,345,,,,,345,345,345,345,345,345,,,,345,345,,,,,,,345',
',,345,345,345,,,345,345,349,349,349,,349,,,,349,349,,,,349,,349,349',
'349,349,349,349,349,,,,,,349,349,349,349,349,349,349,,,349,,,,,,,349',
',,349,349,349,349,349,349,349,349,349,349,349,349,,349,349,,349,349',
'349,,,,,,,,,,,,,,,,,,,,349,,,349,,,349,349,,,349,,349,,,,349,,,,,,,',
'349,,,,,349,349,349,349,349,349,,,,349,349,,,,,,,349,,349,349,349,349',
',,349,349,350,350,350,,350,,,,350,350,,,,350,,350,350,350,350,350,350',
'350,,,,,,350,350,350,350,350,350,350,,,350,,,,,,,350,,,350,350,350,350',
'350,350,350,350,350,350,350,350,,350,350,,350,350,350,,,,,,,,,,,,,,',
',,,,,350,,,350,,,350,350,,,350,,,,,,350,,,,,,,,350,,,,,350,350,350,350',
'350,350,,,,350,350,,,,,,,350,,350,350,350,350,,,350,350,357,357,357',
',357,,,,357,357,,,,357,,357,357,357,357,357,357,357,,,,,,357,357,357',
'357,357,357,357,,,357,,,,,,,357,,,357,357,357,357,357,357,357,357,,357',
'357,357,,357,357,,357,357,357,,,,,,,,,,,,,,,,,,,,357,,,357,,,357,357',
',,357,,,,,,357,,,,,,,,357,,,,,357,357,357,357,357,357,,,,357,357,,,',
',,,357,,,357,357,357,,,357,357,371,371,371,,371,,,,371,371,,,,371,,371',
'371,371,371,371,371,371,,,,,,371,371,371,371,371,371,371,,,371,,,,,',
',371,,,371,371,371,371,371,371,371,371,,371,371,371,,371,371,,,,371',
',,,,,,,,,,,,,,,,,,,371,,,371,,,371,371,,,371,,,,,,,,,,,,,,,,,,,371,371',
'371,371,371,371,,,,371,371,,,,,,,371,,,371,371,371,,,371,371,373,373',
'373,,373,,,,373,373,,,,373,,373,373,373,373,373,373,373,,,,,,373,373',
'373,373,373,373,373,,,373,,,,,,,373,,,373,373,373,373,373,373,373,373',
',373,373,373,,373,373,,,,373,,,,,,,,,,,,,,,,,,,,373,,,373,,,373,373',
',,373,,,,,,,,,,,,,,,,,,,373,373,373,373,373,373,,,,373,373,,,,,,,373',
',,373,373,373,,,373,373,431,431,431,,431,,,,431,431,,,,431,,431,431',
'431,431,431,431,431,,,,,,431,431,431,431,431,431,431,,,431,,,,,,,431',
',,431,431,431,431,431,431,431,431,,431,431,431,,431,431,,431,431,431',
',,,,,,,,,,,,,,,,,,,431,,,431,,,431,431,,,431,,,,,,431,,,,,,,,431,,,',
',431,431,431,431,431,431,,,,431,431,,,,,,,431,,,431,431,431,,,431,431',
'475,475,475,,475,,,,475,475,,,,475,,475,475,475,475,475,475,475,,,,',
',475,475,475,475,475,475,475,,,475,,,,,,,475,,,475,475,475,475,475,475',
'475,475,475,475,475,475,,475,475,,475,475,475,,,,,,,,,,,,,,,,,,,,475',
',,475,,,475,475,,,475,,475,,475,,475,,,,,,,,475,,,,,475,475,475,475',
'475,475,,,,475,475,,,,,,,475,,475,475,475,475,,,475,475,477,477,477',
',477,,,,477,477,,,,477,,477,477,477,477,477,477,477,,,,,,477,477,477',
'477,477,477,477,,,477,,,,,,,477,,,477,477,477,477,477,477,477,477,,477',
'477,477,,477,477,,477,477,477,,,,,,,,,,,,,,,,,,,,477,,,477,,,477,477',
',,477,,,,,,477,,,,,,,,477,,,,,477,477,477,477,477,477,,,,477,477,,,',
',,,477,,,477,477,477,,,477,477,478,478,478,,478,,,,478,478,,,,478,,478',
'478,478,478,478,478,478,,,,,,478,478,478,478,478,478,478,,,478,,,,,',
',478,,,478,478,478,478,478,478,478,478,,478,478,478,,478,478,,478,478',
'478,,,,,,,,,,,,,,,,,,,,478,,,478,,,478,478,,,478,,,,,,478,,,,,,,,478',
',,,,478,478,478,478,478,478,,,,478,478,,,,,,,478,,,478,478,478,,,478',
'478,479,479,479,,479,,,,479,479,,,,479,,479,479,479,479,479,479,479',
',,,,,479,479,479,479,479,479,479,,,479,,,,,,,479,,,479,479,479,479,479',
'479,479,479,,479,479,479,,479,479,,479,479,479,,,,,,,,,,,,,,,,,,,,479',
',,479,,,479,479,,,479,,,,,,479,,,,,,,,479,,,,,479,479,479,479,479,479',
',,,479,479,,,,,,,479,,,479,479,479,,,479,479,518,518,518,,518,,,,518',
'518,,,,518,,518,518,518,518,518,518,518,,,,,,518,518,518,518,518,518',
'518,,,518,,,,,,,518,,,518,518,518,518,518,518,518,518,518,518,518,518',
',518,518,,518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518,,,518,518,,,518,',
'518,,518,,518,,,,,,,,518,,,,,518,518,518,518,518,518,,,,518,518,,,,',
',,518,,518,518,518,518,,,518,518,521,521,521,,521,,,,521,521,,,,521',
',521,521,521,521,521,521,521,,,,,,521,521,521,521,521,521,521,,,521',
',,,,,,521,,,521,521,521,521,521,521,521,521,521,521,521,521,,521,521',
',521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,,,,521,,521',
',,,,,,,521,,,,,521,521,521,521,521,521,,,,521,521,,,,,,,521,,521,521',
'521,521,,,521,521,523,523,523,,523,,,,523,523,,,,523,,523,523,523,523',
'523,523,523,,,,,,523,523,523,523,523,523,523,,,523,,,,,,,523,,,523,523',
'523,523,523,523,523,523,,523,523,523,,523,523,,523,523,523,,,,,,,,,',
',,,,,,,,,,523,,,523,,,523,523,,,523,,,,,,523,,,,,,,,523,,,,,523,523',
'523,523,523,523,,,,523,523,,,,,,,523,,,523,523,523,,,523,523,529,529',
'529,529,529,,,,529,529,,,,529,,529,529,529,529,529,529,529,,,,,,529',
'529,529,529,529,529,529,,,529,,,,,,529,529,529,529,529,529,529,529,529',
'529,529,529,,529,529,529,,529,529,,529,529,529,,,,,,,,,,,,,,,,,,,,529',
',,529,,,529,529,,,529,,529,,,,529,,,,,,,,529,,,,,529,529,529,529,529',
'529,,,,529,529,,,,,,529,529,,,529,529,529,,,529,529,536,536,536,,536',
',,,536,536,,,,536,,536,536,536,536,536,536,536,,,,,,536,536,536,536',
'536,536,536,,,536,,,,,,,536,,,536,536,536,536,536,536,536,536,,536,536',
'536,,536,536,,,,536,,,,,,,,,,,,,,,,,,,,536,,,536,,,536,536,,,536,,,',
',,,,,,,,,,,,,,,536,536,536,536,536,536,,,,536,536,,,,,,,536,,,536,536',
'536,,,536,536,538,538,538,,538,,,,538,538,,,,538,,538,538,538,538,538',
'538,538,,,,,,538,538,538,538,538,538,538,,,538,,,,,,,538,,,538,538,538',
'538,538,538,538,538,538,538,538,538,,538,538,,538,538,538,,,,,,,,,,',
',,,,,,,,,538,,,538,,,538,538,,,538,,538,,538,,538,,,,,,,,538,,,,,538',
'538,538,538,538,538,,,,538,538,,,,,,,538,,538,538,538,538,,,538,538',
'544,544,544,,544,,,,544,544,,,,544,,544,544,544,544,544,544,544,,,,',
',544,544,544,544,544,544,544,,,544,,,,,,,544,,,544,544,544,544,544,544',
'544,544,,544,544,544,,544,544,,,,544,,,,,,,,,,,,,,,,,,,,544,,,544,,',
'544,544,,,544,,,,,,,,,,,,,,,,,,,544,544,544,544,544,544,,,,544,544,',
',,,,,544,,,544,544,544,,,544,544,548,548,548,,548,,,,548,548,,,,548',
',548,548,548,548,548,548,548,,,,,,548,548,548,548,548,548,548,,,548',
',,,,,,548,,,548,548,548,548,548,548,548,548,,548,548,548,,548,548,,548',
'548,548,,,,,,,,,,,,,,,,,,,,548,,,548,,,548,548,,,548,,,,,,548,,,,,,',
',548,,,,,548,548,548,548,548,548,,,,548,548,,,,,,,548,,,548,548,548',
',,548,548,553,553,553,,553,,,,553,553,,,,553,,553,553,553,553,553,553',
'553,,,,,,553,553,553,553,553,553,553,,,553,,,,,,,553,,,553,553,553,553',
'553,553,553,553,,553,553,553,,553,553,,553,553,553,,,,,,,,,,,,,,,,,',
',,553,,,553,,,553,553,,,553,,,,,,553,,,,,,,,553,,,,,553,553,553,553',
'553,553,,,,553,553,,,,,,,553,,,553,553,553,,,553,553,587,587,587,,587',
',,,587,587,,,,587,,587,587,587,587,587,587,587,,,,,,587,587,587,587',
'587,587,587,,,587,,,,,,,587,,,587,587,587,587,587,587,587,587,,587,587',
'587,,587,587,,587,587,587,,,,,,,,,,,,,,,,,,,,587,,,587,,,587,587,,,587',
',,,,,587,,,,,,,,587,,,,,587,587,587,587,587,587,,,,587,587,,,,,,,587',
',,587,587,587,,,587,587,610,610,610,,610,,,,610,610,,,,610,,610,610',
'610,610,610,610,610,,,,,,610,610,610,610,610,610,610,,,610,,,,,,,610',
',,610,610,610,610,610,610,610,610,610,610,610,610,,610,610,,610,610',
'610,,,,,,,,,,,,,,,,,,,,610,,,610,,,610,610,,,610,,610,,610,,610,,,,',
',,,610,,,,,610,610,610,610,610,610,,,,610,610,,,,,,,610,,610,610,610',
'610,,,610,610,622,622,622,,622,,,,622,622,,,,622,,622,622,622,622,622',
'622,622,,,,,,622,622,622,622,622,622,622,,,622,,,,,,,622,,,622,622,622',
'622,622,622,622,622,,622,622,622,,622,622,,622,622,622,,,,,,,,,,,,,',
',,,,,,622,,,622,,,622,622,,,622,,,,,,622,,,,,,,,622,,,,,622,622,622',
'622,622,622,,,,622,622,,,,,,,622,,,622,622,622,,,622,622,628,628,628',
',628,,,,628,628,,,,628,,628,628,628,628,628,628,628,,,,,,628,628,628',
'628,628,628,628,,,628,,,,,,,628,,,628,628,628,628,628,628,628,628,,628',
'628,628,,628,628,,628,628,628,,,,,,,,,,,,,,,,,,,,628,,,628,,,628,628',
',,628,,,,,,628,,,,,,,,628,,,,,628,628,628,628,628,628,,,,628,628,,,',
',,,628,,,628,628,628,,,628,628,657,657,657,,657,,,,657,657,,,,657,,657',
'657,657,657,657,657,657,,,,,,657,657,657,657,657,657,657,,,657,,,,,',
',657,,,657,657,657,657,657,657,657,657,,657,657,657,,657,657,,657,657',
'657,,,,,,,,,,,,,,,,,,,,657,,,657,,,657,657,,,657,,657,,,,657,,,,,,,',
'657,,,,,657,657,657,657,657,657,,,,657,657,,,,,,,657,,,657,657,657,',
',657,657,658,658,658,,658,,,,658,658,,,,658,,658,658,658,658,658,658',
'658,,,,,,658,658,658,658,658,658,658,,,658,,,,,,,658,,,658,658,658,658',
'658,658,658,658,,658,658,658,,658,658,,658,658,658,,,,,,,,,,,,,,,,,',
',,658,,,658,,,658,658,,,658,,,,,,658,,,,,,,,658,,,,,658,658,658,658',
'658,658,,,,658,658,,,,,,,658,,,658,658,658,,,658,658,659,659,659,,659',
',,,659,659,,,,659,,659,659,659,659,659,659,659,,,,,,659,659,659,659',
'659,659,659,,,659,,,,,,,659,,,659,659,659,659,659,659,659,659,659,659',
'659,659,,659,659,,659,659,659,,,,,,,,,,,,,,,,,,,,659,,,659,,,659,659',
',,659,,659,,659,,659,,,,,,,,659,,,,,659,659,659,659,659,659,,,,659,659',
',,,,,,659,,659,659,659,659,,,659,659,662,662,662,,662,,,,662,662,,,',
'662,,662,662,662,662,662,662,662,,,,,,662,662,662,662,662,662,662,,',
'662,,,,,,,662,,,662,662,662,662,662,662,662,662,,662,662,662,,662,662',
',662,662,662,,,,,,,,,,,,,,,,,,,,662,,,662,,,662,662,,,662,,,,,,662,',
',,,,,,662,,,,,662,662,662,662,662,662,,,,662,662,,,,,,,662,,,662,662',
'662,,,662,662,665,665,665,,665,,,,665,665,,,,665,,665,665,665,665,665',
'665,665,,,,,,665,665,665,665,665,665,665,,,665,,,,,,,665,,,665,665,665',
'665,665,665,665,665,665,665,665,665,,665,665,,665,665,665,,,,,,,,,,',
',,,,,,,,,665,,,665,,,665,665,,,665,,665,,665,,665,,,,,,,,665,,,,,665',
'665,665,665,665,665,,,,665,665,,,,,,,665,,665,665,665,665,,,665,665',
'666,666,666,,666,,,,666,666,,,,666,,666,666,666,666,666,666,666,,,,',
',666,666,666,666,666,666,666,,,666,,,,,,,666,,,666,666,666,666,666,666',
'666,666,666,666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,,,,,,,,666',
',,666,,,666,666,,,666,,,,666,,666,,,,,,,,666,,,,,666,666,666,666,666',
'666,,,,666,666,,,,,,,666,,666,666,666,666,,,666,666,667,667,667,,667',
',,,667,667,,,,667,,667,667,667,667,667,667,667,,,,,,667,667,667,667',
'667,667,667,,,667,,,,,,,667,,,667,667,667,667,667,667,667,667,,667,667',
'667,,667,667,,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667',
',,,,,667,,,,,,,,667,,,,,667,667,667,667,667,667,,,,667,667,,,,,,,667',
',,667,667,667,,,667,667,668,668,668,,668,,,,668,668,,,,668,,668,668',
'668,668,668,668,668,,,,,,668,668,668,668,668,668,668,,,668,,,,,,,668',
',,668,668,668,668,668,668,668,668,,668,668,668,,668,668,,668,668,668',
',,,,,,,,,,,,,,,,,,,668,,,668,,,668,668,,,668,,,,,,668,,,,,,,,668,,,',
',668,668,668,668,668,668,,,,668,668,,,,,,,668,,,668,668,668,,,668,668',
'673,673,673,,673,,,,673,673,,,,673,,673,673,673,673,673,673,673,,,,',
',673,673,673,673,673,673,673,,,673,,,,,,,673,,,673,673,673,673,673,673',
'673,673,,673,673,673,,673,673,,673,673,673,,,,,,,,,,,,,,,,,,,,673,,',
'673,,,673,673,,,673,,,,,,673,,,,,,,,673,,,,,673,673,673,673,673,673',
',,,673,673,,,,,,,673,,,673,673,673,,,673,673,674,674,674,,674,,,,674',
'674,,,,674,,674,674,674,674,674,674,674,,,,,,674,674,674,674,674,674',
'674,,,674,,,,,,,674,,,674,674,674,674,674,674,674,674,,674,674,674,',
'674,674,,674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674,,',
',,,674,,,,,,,,674,,,,,674,674,674,674,674,674,,,,674,674,,,,,,,674,',
',674,674,674,,,674,674,698,698,698,,698,,,,698,698,,,,698,,698,698,698',
'698,698,698,698,,,,,,698,698,698,698,698,698,698,,,698,,,,,,,698,,,698',
'698,698,698,698,698,698,698,,698,698,698,,698,698,,698,698,698,,,,,',
',,,,,,,,,,,,,,698,,,698,,,698,698,,,698,,,,,,698,,,,,,,,698,,,,,698',
'698,698,698,698,698,,,,698,698,,,,,,,698,,,698,698,698,,,698,698,701',
'701,701,,701,,,,701,701,,,,701,,701,701,701,701,701,701,701,,,,,,701',
'701,701,701,701,701,701,,,701,,,,,,,701,,,701,701,701,701,701,701,701',
'701,,701,701,701,,701,701,,701,701,701,,,,,,,,,,,,,,,,,,,,701,,,701',
',,701,701,,,701,,,,,,701,,,,,,,,701,,,,,701,701,701,701,701,701,,,,701',
'701,,,,,,,701,,,701,701,701,,,701,701,704,704,704,,704,,,,704,704,,',
',704,,704,704,704,704,704,704,704,,,,,,704,704,704,704,704,704,704,',
',704,,,,,,,704,,,704,704,704,704,704,704,704,704,,704,704,704,,704,704',
',,,704,,,,,,,,,,,,,,,,,,,,704,,,704,,,704,704,,,704,,,,,,,,,,,,,,,,',
',,704,704,704,704,704,704,,,,704,704,,,,,,,704,,,704,704,704,,,704,704',
'715,715,715,,715,,,,715,715,,,,715,,715,715,715,715,715,715,715,,,,',
',715,715,715,715,715,715,715,,,715,,,,,,,715,,,715,715,715,715,715,715',
'715,715,,715,715,715,,715,715,,,,715,,,,,,,,,,,,,,,,,,,,715,,,715,,',
'715,715,,,715,,,,,,,,,,,,,,,,,,,715,715,715,715,715,715,,,,715,715,',
',,,,,715,,,715,715,715,,,715,715,716,716,716,,716,,,,716,716,,,,716',
',716,716,716,716,716,716,716,,,,,,716,716,716,716,716,716,716,,,716',
',,,,,,716,,,716,716,716,716,716,716,716,716,,716,716,716,,716,716,,716',
'716,716,,,,,,,,,,,,,,,,,,,,716,,,716,,,716,716,,,716,,,,,,716,,,,,,',
',716,,,,,716,716,716,716,716,716,,,,716,716,,,,,,,716,,,716,716,716',
',,716,716,721,721,721,,721,,,,721,721,,,,721,,721,721,721,721,721,721',
'721,,,,,,721,721,721,721,721,721,721,,,721,,,,,,,721,,,721,721,721,721',
'721,721,721,721,,721,721,721,,721,721,,721,721,721,,,,,,,,,,,,,,,,,',
',,721,,,721,,,721,721,,,721,,721,,,,721,,,,,,,,721,,,,,721,721,721,721',
'721,721,,,,721,721,,,,,,,721,,,721,721,721,,,721,721,726,726,726,,726',
',,,726,726,,,,726,,726,726,726,726,726,726,726,,,,,,726,726,726,726',
'726,726,726,,,726,,,,,,,726,,,726,726,726,726,726,726,726,726,726,726',
'726,726,,726,726,,726,726,726,,,,,,,,,,,,,,,,,,,,726,,,726,,,726,726',
',,726,,726,,,,726,,,,,,,,726,,,,,726,726,726,726,726,726,,,,726,726',
',,,,,,726,,726,726,726,726,,,726,726,729,729,729,,729,,,,729,729,,,',
'729,,729,729,729,729,729,729,729,,,,,,729,729,729,729,729,729,729,,',
'729,,,,,,,729,,,729,729,729,729,729,729,729,729,729,729,729,729,,729',
'729,,729,729,729,,,,,,,,,,,,,,,,,,,,729,,,729,,,729,729,,,729,,,,,,729',
',,,,,,,729,,,,,729,729,729,729,729,729,,,,729,729,,,,,,,729,,729,729',
'729,729,,,729,729,745,745,745,,745,,,,745,745,,,,745,,745,745,745,745',
'745,745,745,,,,,,745,745,745,745,745,745,745,,,745,,,,,,,745,,,745,745',
'745,745,745,745,745,745,,745,745,745,,745,745,,745,745,745,,,,,,,,,',
',,,,,,,,,,745,,,745,,,745,745,,,745,,,,,,745,,,,,,,,745,,,,,745,745',
'745,745,745,745,,,,745,745,,,,,,,745,,,745,745,745,,,745,745,766,766',
'766,,766,,,,766,766,,,,766,,766,766,766,766,766,766,766,,,,,,766,766',
'766,766,766,766,766,,,766,,,,,,,766,,,766,766,766,766,766,766,766,766',
',766,766,766,,766,766,,766,766,766,,,,,,,,,,,,,,,,,,,,766,,,766,,,766',
'766,,,766,,766,,,,766,,,,,,,,766,,,,,766,766,766,766,766,766,,,,766',
'766,,,,,,,766,,,766,766,766,,,766,766,778,778,778,,778,,,,778,778,,',
',778,,778,778,778,778,778,778,778,,,,,,778,778,778,778,778,778,778,',
',778,,,,,,,778,,,778,778,778,778,778,778,778,778,778,778,778,778,,778',
'778,,778,778,778,,,,,,,,,,,,,,,,,,,,778,,,778,,,778,778,,,778,,778,',
'778,,778,,,,,,,,778,,,,,778,778,778,778,778,778,,,,778,778,,,,,,,778',
',778,778,778,778,,,778,778,800,800,800,,800,,,,800,800,,,,800,,800,800',
'800,800,800,800,800,,,,,,800,800,800,800,800,800,800,,,800,,,,,,,800',
',,800,800,800,800,800,800,800,800,,800,800,800,,800,800,,800,800,800',
',,,,,,,,,,,,,,,,,,,800,,,800,,,800,800,,,800,,,,,,800,,,,,,,,800,,,',
',800,800,800,800,800,800,,,,800,800,,,,,,,800,,,800,800,800,,,800,800',
'807,807,807,,807,,,,807,807,,,,807,,807,807,807,807,807,807,807,,,,',
',807,807,807,807,807,807,807,,,807,,,,,,,807,,,807,807,807,807,807,807',
'807,807,,807,807,807,,807,807,,807,807,807,,,,,,,,,,,,,,,,,,,,807,,',
'807,,,807,807,,,807,,,,,,807,,,,,,,,807,,,,,807,807,807,807,807,807',
',,,807,807,,,,,,,807,,,807,807,807,,,807,807,820,820,820,,820,,,,820',
'820,,,,820,,820,820,820,820,820,820,820,,,,,,820,820,820,820,820,820',
'820,,,820,,,,,,,820,,,820,820,820,820,820,820,820,820,,820,820,820,',
'820,820,,820,820,820,,,,,,,,,,,,,,,,,,,,820,,,820,,,820,820,,,820,,',
',,,820,,,,,,,,820,,,,,820,820,820,820,820,820,,,,820,820,,,,,,,820,',
',820,820,820,,,820,820,821,821,821,,821,,,,821,821,,,,821,,821,821,821',
'821,821,821,821,,,,,,821,821,821,821,821,821,821,,,821,,,,,,,821,,,821',
'821,821,821,821,821,821,821,,821,821,821,,821,821,,821,821,821,,,,,',
',,,,,,,,,,,,,,821,,,821,,,821,821,,,821,,,,,,821,,,,,,,,821,,,,,821',
'821,821,821,821,821,,,,821,821,,,,,,,821,,,821,821,821,,,821,821,822',
'822,822,,822,,,,822,822,,,,822,,822,822,822,822,822,822,822,,,,,,822',
'822,822,822,822,822,822,,,822,,,,,,,822,,,822,822,822,822,822,822,822',
'822,,822,822,822,,822,822,,822,822,822,,,,,,,,,,,,,,,,,,,,822,,,822',
',,822,822,,,822,,,,,,822,,,,,,,,822,,,,,822,822,822,822,822,822,,,,822',
'822,,,,,,,822,,,822,822,822,,,822,822,823,823,823,,823,,,,823,823,,',
',823,,823,823,823,823,823,823,823,,,,,,823,823,823,823,823,823,823,',
',823,,,,,,,823,,,823,823,823,823,823,823,823,823,,823,823,823,,823,823',
',823,823,823,,,,,,,,,,,,,,,,,,,,823,,,823,,,823,823,,,823,,,,,,823,',
',,,,,,823,,,,,823,823,823,823,823,823,,,,823,823,,,,,,,823,,,823,823',
'823,,,823,823,825,825,825,,825,,,,825,825,,,,825,,825,825,825,825,825',
'825,825,,,,,,825,825,825,825,825,825,825,,,825,,,,,,,825,,,825,825,825',
'825,825,825,825,825,,825,825,825,,825,825,,825,825,825,,,,,,,,,,,,,',
',,,,,,825,,,825,,,825,825,,,825,,,,,,825,,,,,,,,825,,,,,825,825,825',
'825,825,825,,,,825,825,,,,,,,825,,,825,825,825,,,825,825,882,882,882',
',882,,,,882,882,,,,882,,882,882,882,882,882,882,882,,,,,,882,882,882',
'882,882,882,882,,,882,,,,,,,882,,,882,882,882,882,882,882,882,882,,882',
'882,882,,882,882,,882,882,882,,,,,,,,,,,,,,,,,,,,882,,,882,,,882,882',
',,882,,,,,,882,,,,,,,,882,,,,,882,882,882,882,882,882,,,,882,882,,,',
',,,882,,,882,882,882,,,882,882,896,896,896,,896,,,,896,896,,,,896,,896',
'896,896,896,896,896,896,,,,,,896,896,896,896,896,896,896,,,896,,,,,',
',896,,,896,896,896,896,896,896,896,896,,896,896,896,,896,896,,896,896',
'896,,,,,,,,,,,,,,,,,,,,896,,,896,,,896,896,,,896,,,,,,896,,,,,,,,896',
',,,,896,896,896,896,896,896,,,,896,896,,,,,,,896,,,896,896,896,,,896',
'896,916,916,916,,916,,,,916,916,,,,916,,916,916,916,916,916,916,916',
',,,,,916,916,916,916,916,916,916,,,916,,,,,,,916,,,916,916,916,916,916',
'916,916,916,916,916,916,916,,916,916,,916,916,916,,,,,,,,,,,,,,,,,,',
',916,,,916,,,916,916,,,916,,,,916,,916,,,,,,,,916,,,,,916,916,916,916',
'916,916,,,,916,916,,,,,,,916,,916,916,916,916,,,916,916,917,917,917',
',917,,,,917,917,,,,917,,917,917,917,917,917,917,917,,,,,,917,917,917',
'917,917,917,917,,,917,,,,,,,917,,,917,917,917,917,917,917,917,917,,917',
'917,917,,917,917,,917,917,917,,,,,,,,,,,,,,,,,,,,917,,,917,,,917,917',
',,917,,,,,,917,,,,,,,,917,,,,,917,917,917,917,917,917,,,,917,917,,,',
',,,917,,,917,917,917,,,917,917,929,929,929,,929,,,,929,929,,,,929,,929',
'929,929,929,929,929,929,,,,,,929,929,929,929,929,929,929,,,929,,,,,',
',929,,,929,929,929,929,929,929,929,929,,929,929,929,,929,929,,,,929',
',,,,,,,,,,,,,,,,,,,929,,,929,,,929,929,,,929,,,,,,,,,,,,,,,,,,,929,929',
'929,929,929,929,,,,929,929,,,,,,,929,,,929,929,929,,,929,929,938,938',
'938,,938,,,,938,938,,,,938,,938,938,938,938,938,938,938,,,,,,938,938',
'938,938,938,938,938,,,938,,,,,,,938,,,938,938,938,938,938,938,938,938',
',938,938,938,,938,938,,,,938,,,,,,,,,,,,,,,,,,,,938,,,938,,,938,938',
',,938,,,,,,,,,,,,,,,,,,,938,938,938,938,938,938,,,,938,938,,,,,,,938',
',,938,938,938,,,938,938,964,964,964,,964,,,,964,964,,,,964,,964,964',
'964,964,964,964,964,,,,,,964,964,964,964,964,964,964,,,964,,,,,,,964',
',,964,964,964,964,964,964,964,964,,964,964,964,,964,964,,964,964,964',
',,,,,,,,,,,,,,,,,,,964,,,964,,,964,964,,,964,,964,,,,964,,,,,,,,964',
',,,,964,964,964,964,964,964,,,,964,964,,,,,,,964,,,964,964,964,,,964',
'964,989,989,989,,989,,,,989,989,,,,989,,989,989,989,989,989,989,989',
',,,,,989,989,989,989,989,989,989,,,989,,,,,,,989,,,989,989,989,989,989',
'989,989,989,,989,989,989,,989,989,,,,989,,,,,,,,,,,,,,,,,,,,989,,,989',
',,989,989,,,989,,,,,,,,,,,,,,,,,,,989,989,989,989,989,989,,,,989,989',
',,,,,,989,,,989,989,989,,,989,989,1038,1038,1038,,1038,,,,1038,1038',
',,,1038,,1038,1038,1038,1038,1038,1038,1038,,,,,,1038,1038,1038,1038',
'1038,1038,1038,,,1038,,,,,,,1038,,,1038,1038,1038,1038,1038,1038,1038',
'1038,1038,1038,1038,1038,,1038,1038,,1038,1038,1038,,,,,,,,,,,,,,,,',
',,,1038,,,1038,,,1038,1038,,,1038,,1038,,1038,,1038,,,,,,,,1038,,,,',
'1038,1038,1038,1038,1038,1038,,,,1038,1038,,,,,,,1038,,1038,1038,1038',
'1038,30,,1038,1038,,,,30,30,30,,,30,30,30,743,30,743,743,743,743,743',
',,,30,30,30,,,,743,,,,,30,30,,30,30,30,30,30,,,,,,,,,,743,,,,,,,,,,',
'743,743,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,',
'30,30,,,30,30,,30,743,30,,30,,30,30,30,30,30,30,30,,30,30,30,,,,,,,',
',,,,,30,30,31,30,,30,,,,31,31,31,30,,31,31,31,785,31,785,785,785,785',
'785,,,,,31,31,,,,785,,,,,31,31,,31,31,31,31,31,,,,,,,,,,785,,,,,,,,',
'785,785,785,785,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31',
',,31,,31,31,,,31,31,,31,785,31,,31,,31,31,31,31,31,31,31,,31,,31,,,',
',,,,,,,,,31,31,60,31,,31,,,,60,60,60,31,,60,60,60,786,60,786,786,786',
'786,786,,,,,60,60,60,,,786,,,,,60,60,,60,60,60,60,60,,,,,,,,,,786,,',
',,,,,,786,786,786,786,,60,60,60,60,60,60,60,60,60,60,60,60,60,60,,,60',
'60,60,,,60,,,60,,,60,60,,60,786,60,,60,,60,60,60,60,60,60,60,,60,,60',
'828,,828,828,828,828,828,,,,,,60,60,60,60,828,60,456,60,,,,,60,456,456',
'456,,,456,456,456,,456,,,,828,,,,,456,456,456,,828,828,828,828,,,,456',
'456,,456,456,456,456,456,,,,,,,,,,,,,,828,,,,,,,,828,,456,456,456,456',
'456,456,456,456,456,456,456,456,456,456,,,456,456,456,,,456,,456,456',
',,456,456,,456,,456,,456,,456,456,456,456,456,456,456,,456,456,456,',
',,,,,,,,,,,456,456,465,456,,456,,,,465,465,465,456,,465,465,465,946',
'465,946,946,946,946,946,,,,465,465,465,465,,,946,,,,,465,465,,465,465',
'465,465,465,,,,,,,,,,946,,,,,,,,,946,946,946,946,,465,465,465,465,465',
'465,465,465,465,465,465,465,465,465,,,465,465,465,,,465,,,465,,,465',
'465,,465,946,465,,465,,465,465,465,465,465,465,465,,465,465,465,948',
',948,948,948,948,948,,,,,,465,465,465,465,948,465,466,465,,,,,465,466',
'466,466,,,466,466,466,,466,,,,948,,,,,466,466,466,466,,,948,948,,,,466',
'466,,466,466,466,466,466,,,,,,,,,,,,,,,,,,,,,,948,,466,466,466,466,466',
'466,466,466,466,466,466,466,466,466,,,466,466,466,,,466,,,466,,,466',
'466,,466,,466,,466,,466,466,466,466,466,466,466,,466,466,466,950,,950',
'950,950,950,950,,,,,,466,466,466,466,950,466,505,466,,,,,466,505,505',
'505,,,505,505,505,,505,,,,950,,,,,505,505,,,,,950,950,,,,505,505,,505',
'505,505,505,505,952,,952,952,952,952,952,980,,980,980,980,980,980,,',
'952,,,,,950,,980,,,,,,,,,,,505,,,,952,,,505,,,,980,505,505,,952,952',
',,,980,980,980,980,,,,,,,,,,,505,505,,,,,,,,,,,,,505,952,,,,505,,,980',
',,,505,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11',
'11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11',
'11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,',
',,,,,11,,,,,,,,,11,,,,,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,',
'12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12',
',,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12',
'12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,,,,,12,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,,,,75,75,75,75,75,75',
'75,75,75,75,,,,,,75,75,75,75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75',
',75,75,75,75,75,75,75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75',
'75,75,75,75,75,75,75,75,75,75,,,75,,,,,,,,,,,,,,,,,,,,75,,,,,75,103',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,,,,103,103,103,103,103,103,103,103,103,103,',
',,,,103,103,103,103,103,103,103,103,103,103,103,103,,103,,,,,,,103,103',
',103,103,103,103,103,103,103,,,103,103,,,,103,103,103,103,,,,,,,,,,',
',,,103,103,,103,103,103,103,103,103,103,103,103,103,103,,,103,,,,,,',
',,,,,,,,,,,,,103,,,,,103,422,422,422,422,422,422,422,422,422,422,422',
'422,422,422,422,422,422,422,422,422,422,422,422,422,,,,422,422,422,422',
'422,422,422,422,422,422,,,,,,422,422,422,422,422,422,422,422,422,,,422',
',,,,,,,,422,422,,422,422,422,422,422,422,422,,,422,422,,,,422,422,422',
'422,,,,,,,,,,,,,,422,422,,422,422,422,422,422,422,422,422,422,422,422',
',,422,422,,,,,,,,,,422,,,,,,,,,422,,,,,422,654,654,654,654,654,654,654',
'654,654,654,654,654,654,654,654,654,654,654,654,654,654,654,654,654',
',,,654,654,654,654,654,654,654,654,654,654,,,,,,654,654,654,654,654',
'654,654,654,654,,,654,,,,,,,,,654,654,,654,654,654,654,654,654,654,',
',654,654,,,,654,654,654,654,,,,,,,,,,,,,,654,654,,654,654,654,654,654',
'654,654,654,654,654,654,,,654,654,,,,,,,,,,654,,,,,,,,,654,,,,,654,787',
'787,787,787,787,787,787,787,787,787,787,787,787,787,787,787,787,787',
'787,787,787,787,787,787,,,,787,787,787,787,787,787,787,787,787,787,',
',,,,787,787,787,787,787,787,787,787,787,,,787,,,,,,,,,787,787,,787,787',
'787,787,787,787,787,,,787,787,,,,787,787,787,787,,,,,,,,,,,,,,787,787',
',787,787,787,787,787,787,787,787,787,787,787,,,787,,,,,,,,,,229,229',
',,229,,,,,,787,,,229,229,787,229,229,229,229,229,229,229,,,229,229,',
',,229,229,229,229,,,,,,229,,,,,,,,229,229,,229,229,229,229,229,229,229',
'229,229,229,229,,,229,,,,,,,,,,230,230,,,230,,,,,,229,,,230,230,229',
'230,230,230,230,230,230,230,,,230,230,,,,230,230,230,230,,,,,,230,,',
',,,,,230,230,,230,230,230,230,230,230,230,230,230,230,230,,983,230,983',
'983,983,983,983,,,,,278,278,,,278,983,,,,,230,,,278,278,230,278,278',
'278,278,278,278,278,,,278,278,983,,,278,278,278,278,,,983,983,983,983',
',,,,,,,278,278,,278,278,278,278,278,278,278,278,278,278,278,,,278,,',
',,,,,,983,473,473,,,473,,,,,,278,,,473,473,278,473,473,473,473,473,473',
'473,,,473,473,,,,473,473,473,473,,,,,,473,,,,,,,,473,473,,473,473,473',
'473,473,473,473,473,473,473,473,,,473,,,,,,,,,,474,474,,,474,,,,,,473',
',,474,474,473,474,474,474,474,474,474,474,,,474,474,,,,474,474,474,474',
',,,,,474,,,,,,,,474,474,,474,474,474,474,474,474,474,474,474,474,474',
',,474,,,,,,,,,,539,539,,,539,,,,,,474,,,539,539,474,539,539,539,539',
'539,539,539,,,539,539,,,,539,539,539,539,,,,,,539,,,,,,,,539,539,,539',
'539,539,539,539,539,539,539,539,539,539,,,539,,,,,,,,,,540,540,,,540',
',,,,,539,,,540,540,539,540,540,540,540,540,540,540,,,540,540,,,,540',
'540,540,540,,,,,,540,,,,,,,,540,540,,540,540,540,540,540,540,540,540',
'540,540,540,,,540,,,,,,,,,,549,549,,,549,,,,,,540,,,549,549,540,549',
'549,549,549,549,549,549,,,549,549,,,,549,549,549,549,,,,,,549,,,,,,',
',549,549,,549,549,549,549,549,549,549,549,549,549,549,,,549,,,,,,,,',
',550,550,,,550,,,,,,549,,,550,550,549,550,550,550,550,550,550,550,,',
'550,550,,,,550,550,550,550,,,,,,550,,,,,,,,550,550,,550,550,550,550',
'550,550,550,550,550,550,550,,,550,,,,,,,,,,611,611,,,611,,,,,,550,,',
'611,611,550,611,611,611,611,611,611,611,,,611,611,,,,611,611,611,611',
',,,,,611,,,,,,,,611,611,,611,611,611,611,611,611,611,611,611,611,611',
',,611,,,,,,,,,,612,612,,,612,,,,,,611,,,612,612,611,612,612,612,612',
'612,612,612,,,612,612,,,,612,612,612,612,,,,,,612,,,,,,,,612,612,,612',
'612,612,612,612,612,612,612,612,612,612,,,612,,,,,,,,,,660,660,,,660',
',,,,,612,,,660,660,612,660,660,660,660,660,660,660,,,660,660,,,,660',
'660,660,660,,,,,,660,,,,,,,,660,660,,660,660,660,660,660,660,660,660',
'660,660,660,,,660,,,,,,,,,,661,661,,,661,,,,,,660,,,661,661,660,661',
'661,661,661,661,661,661,,,661,661,,,,661,661,661,661,,,,,,661,,,,,,',
',661,661,,661,661,661,661,661,661,661,661,661,661,661,,,661,,,,,,,,',
',776,776,,,776,,,,,,661,,,776,776,661,776,776,776,776,776,776,776,,',
'776,776,,,,776,776,776,776,,,,,,776,,,,,,,,776,776,,776,776,776,776',
'776,776,776,776,776,776,776,,,776,,,,,,,,,,777,777,,,777,,,,,,776,,',
'777,777,776,777,777,777,777,777,777,777,,,777,777,,,,777,777,777,777',
',,,,,777,,,,,,,,777,777,,777,777,777,777,777,777,777,777,777,777,777',
',,777,,,,,,,,,,1034,1034,,,1034,,,,,,777,,,1034,1034,777,1034,1034,1034',
'1034,1034,1034,1034,,,1034,1034,,,,1034,1034,1034,1034,,,,,,1034,,,',
',,,,1034,1034,,1034,1034,1034,1034,1034,1034,1034,1034,1034,1034,1034',
',,1034,,,,,,,,,,1039,1039,,,1039,,,,,,1034,,,1039,1039,1034,1039,1039',
'1039,1039,1039,1039,1039,,,1039,1039,,,,1039,1039,1039,1039,,,,,,1039',
',,,,,,,1039,1039,,1039,1039,1039,1039,1039,1039,1039,1039,1039,1039',
'1039,,,1039,985,,985,985,985,985,985,,,1040,1040,,,1040,,,985,,,1039',
',,1040,1040,1039,1040,1040,1040,1040,1040,1040,1040,,,1040,1040,,,985',
'1040,1040,1040,1040,,,,,,1040,985,985,,,,,,1040,1040,,1040,1040,1040',
'1040,1040,1040,1040,1040,1040,1040,1040,,1044,1040,1044,1044,1044,1044',
'1044,,,,,,985,,,,1044,,,,,1040,,,,1058,1040,1058,1058,1058,1058,1058',
',,,,,,1044,,1060,1058,1060,1060,1060,1060,1060,,,1044,1044,,,,,1062',
'1060,1062,1062,1062,1062,1062,,1058,1064,,1064,1064,1064,1064,1064,1062',
'1058,1058,1058,1058,,,1060,,1064,,1087,1044,1087,1087,1087,1087,1087',
'1060,1060,,,1062,,,,,1087,,,,1064,,1062,1062,,,1058,,,,,1064,1064,,',
',,,1087,,,1060,,,,,,,,1087,1087,,,,,,1062,,,,,,,,,1064,,,,,,,,,,,,,',
',,,,1087' ]
        racc_action_check = arr = ::Array.new(26124, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    44,  1060,    65,   nil,    69,   nil,   nil,  5148,  1468,
   nil, 23703, 23841,   -31,   nil,   -46,   -42,   486,    53,   -31,
   335,   nil,   -70,  5288,  1342,   155,   nil,   108,   nil,   144,
 22786, 22914,  5428,  5568,  5708,   nil,  1201,  5848,  5988,   nil,
    55,   364,   369,   141,   128,  6128,  6268,   108,  6408,   120,
   443,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 23042,   nil,  6548,   nil,   nil,   -19,   nil,  6688,  6828,   nil,
   nil,  6968,  7108,   165,   nil, 23979,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -86,   nil,   nil,   nil,   nil,   nil,   nil,   166,
   168,   185,   226, 24117,   nil,   nil,   nil,   nil,   nil,   nil,
     0,   nil,   nil,   134,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  7248,   nil,   nil,   nil,
   nil,  7388,  7528,  7668,  7808,  7948,   254,   nil,   228,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   247,   nil,  1342,  8088,  8228,  8368,  8508,  8648,  8788, 24604,
 24677,   nil,  8928,  9068,  9208,   nil,   nil,   539,   -86,   -30,
   325,   140,   259,   329,   nil,  9348,  1483,   342,  9488,  9628,
  9768,  9908, 10048, 10188, 10328, 10468, 10608, 10748, 10888, 11028,
 11168, 11308, 11448, 11588, 11728, 11868, 12008, 12148, 12288, 12428,
   nil,   nil,   nil,   nil, 12568,   nil,   nil,   nil, 24750,   nil,
   nil,   360, 12708,   nil,   nil,   373,   nil,   nil,   nil, 12848,
   nil,   nil, 12988,   nil,  1483,   nil,   357,   359,   nil, 13128,
   408, 13268,   nil,   nil, 13408, 13548,   nil,   nil,   420,   nil,
   nil, 13688,  1609,   nil,   390,  1624,   440,   489,   483, 13828,
  1765,   576,   625,   722,   566,   855,   nil,   533,   501,     4,
   nil,   nil,   nil,   541,   136,   547, 13968,   nil,   371,   633,
   861,   nil,   647, 14108,   nil, 14248,  1906,  1624,   590, 14388,
 14528,   nil,   nil,   463,   513,    -8,    -1, 14668,  2047,  2188,
   434,   701,   590,   -19,   -14,   899,   670,    -7,   704,   nil,
   nil, 14808,   nil, 14948,   114,   207,   233,   343,   374,   375,
   376,   377,   498,   nil,   511,   nil,   nil,   nil,   nil,   nil,
   131,   nil,   304,   nil,   373,   nil,   606,   308,   nil,   608,
   nil,   623,   -27,   nil,   628,   134,   nil,   322,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 24255,   nil,   nil,   nil,   nil,   641,   nil,   nil,
   626, 15088,   628,   nil,   nil,   617,   nil,   933,   149,   nil,
   nil,   nil,  1060,   nil,   nil,   nil,   nil,   nil,  1201,   637,
   nil,   nil,   636,   646,   397,   404, 23174,   nil,   nil,   nil,
   266,   398,   687,   nil,   nil, 23302, 23434,   nil,   nil,   nil,
   -34,   nil,   689, 24823, 24896, 15228,   204, 15368, 15508, 15648,
  2188,  2329,   849,   918,   720,   721,   722,   723,  3598,  3739,
  3622,  2470,  2611,  2752,  2893,  3034,  3175,   488,   719,  3316,
  3457,  1624,   747,   790,   nil, 23566,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   675,   676,   nil,   nil, 15788,   nil,
   nil, 15928,   nil, 16068,   nil,   128,   nil,   nil,   nil, 16208,
  1750,   682,   683,   nil,   nil,   686, 16348,   693, 16488, 24969,
 25042,   965,   730,   nil, 16628,   692,   nil,   745, 16768, 25115,
 25188,   877,  1765, 16908,   828,   833,   723,   nil,   nil,   171,
   361,   759,   742,   nil,   406,   790,   nil,   596,   nil,   761,
   763,   nil,   764,   765,   768,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   755,   531,   nil,   nil, 17048,   nil,   nil,
   nil,   856,   nil,   nil,   nil,   866,   nil,   nil,   867,  2329,
   907,   nil,  2470,    25,   911,   913,   911,   921,   nil,   nil,
 17188, 25261, 25334,     7,   nil,   205,   269,    11,   nil,   991,
   nil,   824, 17328,   nil,   842,   nil,   nil,   nil, 17468,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   198,   nil,   nil,   327,   nil,   nil,   nil,   804,   nil,   nil,
   820,   nil,  2611,   nil, 24393,   nil,   822, 17608, 17748, 17888,
 25407, 25480, 18028,   425,   867, 18168, 18308, 18448, 18588,   866,
   nil,   nil,   nil, 18728, 18868,   867,   nil,   nil,   nil,   214,
   217,   531,   665,   841,   845,   nil,   -54,   947,    75,   nil,
   862,   nil,   970,   nil,   nil,   858,   nil,   901, 19008,   nil,
   nil, 19148,   nil,   -83, 19288,   861,   nil,   865,    -9,    -5,
   904,   306,  1060,   905,   881, 19428, 19568,   948,   -14,   212,
   nil, 19708,   nil,   nil,   nil,   nil, 19848,   nil,   nil, 19988,
   nil,   nil,   nil,    20,   893,   188,   nil,   nil,   555,   728,
   nil,   858,   nil, 22750,   nil, 20128,   nil,   629,   nil,   895,
   259,   899,   nil,   nil,   nil,   nil,   654,   nil,  1012,   nil,
   nil,   nil,   nil,   nil,  1020,   nil, 20268,   905,    26,    28,
    95,   142,  2752,   nil,  1063,   nil, 25553, 25626, 20408,   nil,
   nil,   nil,   652,  2893,  3034, 22878, 23006, 24531,    53,   994,
  3175,   nil,   nil,   264,   nil,   nil,   nil,   926,   nil,   915,
 20548,   919,   234,   245,   797,   929,  1906, 20688,   nil,   917,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 20828, 20968, 21108, 21248,   265, 21388,   nil,   nil, 23105,   nil,
  3316,   nil,   nil,   936,   nil,   -50,   nil,   nil,   nil,   nil,
   925,   305,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  3457,
   nil,   928,   980,   nil,   nil,   519,   nil,  3598,  3739,   941,
   948,   955,   nil,   nil,   nil,   957,   958,   nil,   959,   967,
   nil,   968,   nil,   nil,   973,   669,   971,   524,   nil,  1092,
   nil,   nil, 21528,   nil,  3880,  1093,   nil,   nil,    23,    36,
  1107,   330,  1096,   nil,   994,  4021, 21668,   464,  1114,   nil,
  1016,   515,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1009,
   nil,   nil,  1022,   275,   nil,   nil, 21808, 21948,  2047,  1026,
  1031,   nil,  1043,  1044,  1053,   nil,  1074,  1062,  1047, 22088,
   nil,   nil,   nil,   nil,  4162,  4303,   nil,     6, 22228,   nil,
   nil,  1080,  1185,  1328,   nil,   nil, 23266,   nil, 23365,   nil,
 23497,   nil, 23559,   nil,   nil,   nil,   nil,   272,   658,  1069,
   nil,    33,   nil,   nil, 22368,  4444,   nil,   nil,  1190,   540,
   nil,   nil,  1199,   nil,   nil,  1119,   nil,   346,   nil,   nil,
 23566,   nil,   nil, 24739,   nil, 25836,   nil,   nil,  1104, 22508,
  1132,  1159,   nil,  1207,  4585,  1201,  1204,  1237,  1170,  1245,
   nil,   nil,   nil,   561,   nil,   nil,   nil,  1098,  1099,  1100,
  1108,  1109,   790,  1111,   806,  4726,   nil,    18,   nil,   nil,
  4867,   nil,  5008,  1112,   nil,   nil,  1113,  1114,  1128,  1132,
   nil,  1135,   nil,  1273, 25699,   nil,   nil,  1276, 22648, 25772,
 25845,  1342,   nil,  1469, 25907,   nil,   nil,   nil,   nil,   832,
  1159,   685,   nil,   nil,   nil,  1282,  1283,   nil, 25932,   nil,
 25947,   nil, 25962,   nil, 25971,   nil,   nil,  1206,  1211,   nil,
  1187,    37,    41,   133,  1378,   nil,  1185,  1195,   nil,   nil,
   nil,  1198,  1200,  1203,  1205,    52,   nil, 25989,   nil,   nil,
   nil,   nil,  1206,   nil ]

racc_action_default = [
    -1,  -650,  -649,  -650,    -2,  -636,    -4,    -5,  -650,    -8,
    -9,  -650,  -650,  -650,   -35,  -650,  -650,   -39,  -650,  -650,
  -294,   -50,  -638,  -650,   -55,   -60,   -61,   -62,   -66,  -271,
  -271,  -271,  -309,  -343,  -344,   -78,  -649,   -82,   -90,   -92,
  -650,  -538,  -539,  -650,  -650,  -650,  -650,  -230,  -650,  -638,
  -244,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -623,  -296,  -298,  -305,  -307,  -317,  -423,  -650,  -650,   -57,
   -57,  -636,  -650,  -327,  -334,  -650,  -345,  -346,  -348,  -349,
  -350,  -351,  -352,  -353,  -354,  -355,  -356,  -357,  -366,  -468,
  -469,  -470,  -471,  -472,  -473,  -649,  -476,  -649,  -649,  -649,
  -486,  -649,  -649,  -649,  -514,  -520,  -522,  -523,  -524,  -525,
  -621,  -527,  -528,  -622,  -530,  -531,  -532,  -533,  -534,  -535,
  -536,  -537,  -542,  -543,  1094,    -3,  -637,  -645,  -646,  -647,
    -7,  -650,  -650,  -650,  -650,  -650,  -650,   -23,  -650,  -121,
  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,
  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,
   -28,  -130,  -649,  -650,  -650,  -650,  -650,  -650,  -649,  -650,
  -650,  -633,  -650,  -650,  -638,  -639,   -54,  -650,  -538,  -539,
  -650,  -294,  -650,  -650,  -236,  -650,  -649,  -650,  -650,  -650,
  -650,  -650,  -650,  -650,  -650,  -650,  -650,  -650,  -650,  -650,
  -650,  -650,  -650,  -650,  -650,  -650,  -650,  -650,  -650,  -650,
  -245,  -246,  -247,  -248,  -650,  -359,  -452,  -431,  -650,  -634,
  -635,   -67,  -650,  -316,  -358,  -650,  -445,  -447,   -73,  -649,
  -442,   -74,  -638,   -75,  -251,  -266,  -649,  -649,  -270,  -650,
  -276,  -650,  -649,  -615,  -650,  -650,   -76,   -77,  -636,   -17,
   -18,  -650,   -21,   -22,   -80,  -649,  -638,  -650,   -83,   -86,
  -649,   -98,   -99,  -650,  -650,  -106,  -309,  -312,  -638,  -435,
  -343,  -344,  -347,  -443,  -650,   -88,  -650,   -94,  -304,  -521,
  -650,  -224,  -225,  -650,  -237,  -650,  -649,  -300,  -638,  -649,
  -649,  -318,  -319,  -570,   -56,  -650,  -650,  -650,  -649,  -649,
  -636,  -650,  -637,  -538,  -539,  -650,  -650,  -294,  -650,  -376,
  -377,  -650,  -330,  -650,  -121,  -122,  -164,  -165,  -166,  -182,
  -187,  -194,  -197,  -337,  -650,  -538,  -539,  -610,  -611,  -474,
  -650,  -498,  -650,  -500,  -650,  -502,  -650,  -650,  -481,  -650,
  -649,  -650,  -650,  -494,  -650,  -650,  -496,  -650,  -513,  -515,
  -516,  -517,  -518,    -6,  -648,   -29,   -30,   -31,   -32,   -33,
   -10,   -11,  -650,   -25,   -26,   -27,  -131,  -650,   -36,   -38,
  -281,  -650,  -650,  -280,   -37,  -650,   -40,  -650,  -294,   -48,
   -49,  -205,  -256,  -276,   -51,   -52,   -41,  -206,  -256,  -638,
  -261,  -262,  -649,  -649,  -624,  -625,  -271,  -440,  -626,  -627,
  -625,  -624,  -271,  -439,  -441,  -626,  -627,   -47,  -214,   -53,
  -638,  -315,  -650,  -650,  -650,  -649,  -304,  -650,  -650,  -650,
  -215,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -226,  -227,
  -228,  -229,  -231,  -232,  -233,  -234,  -235,  -238,  -239,  -240,
  -241,  -638,  -249,  -650,  -453,  -271,  -624,  -625,   -64,   -68,
  -272,  -436,  -449,  -452,  -638,  -638,  -311,  -267,  -650,  -275,
  -268,  -650,  -273,  -650,  -277,  -650,  -618,  -620,   -16,  -637,
   -20,  -638,   -79,  -302,   -95,   -84,  -650,  -638,  -649,  -650,
  -650,  -105,  -650,  -521,  -650,   -91,   -96,  -650,  -650,  -650,
  -650,  -250,  -242,  -650,  -460,  -650,  -638,  -299,  -252,  -642,
  -642,  -650,  -650,  -613,  -642,  -650,  -424,  -570,  -427,  -609,
  -609,  -553,  -555,  -555,  -555,  -569,  -571,  -572,  -573,  -574,
  -575,  -576,  -577,  -578,  -650,  -580,  -582,  -584,  -589,  -591,
  -592,  -594,  -599,  -601,  -602,  -604,  -605,  -606,  -650,  -649,
  -367,  -368,  -649,  -650,  -650,  -650,  -650,  -650,  -362,  -455,
  -649,  -650,  -650,  -304,   -57,  -116,  -117,  -650,  -119,  -650,
  -294,  -649,  -650,  -335,  -548,  -340,  -631,  -632,  -650,  -475,
  -499,  -504,  -505,  -507,  -477,  -501,  -478,  -503,  -479,  -480,
  -650,  -483,  -485,  -650,  -488,  -490,  -491,  -650,  -492,  -493,
  -650,  -519,  -649,   -24,  -650,   -34,  -284,  -650,  -650,  -649,
  -650,  -650,  -650,  -444,  -650,  -263,  -265,  -650,  -650,   -69,
  -259,  -260,  -437,  -650,  -650,   -71,  -438,  -314,  -640,  -624,
  -625,  -624,  -625,  -638,  -650,  -430,  -649,   -63,  -432,  -449,
  -650,  -450,  -650,  -258,  -310,  -649,  -274,  -278,  -650,  -616,
  -617,  -650,   -19,   -81,  -650,   -87,   -93,  -638,  -624,  -625,
  -649,  -102,  -104,  -650,   -89,  -650,  -650,  -223,  -638,  -649,
  -360,  -649,  -297,  -365,  -301,  -253,  -644,  -643,  -255,  -644,
  -306,  -308,  -614,  -650,  -638,  -650,  -551,  -552,  -650,  -650,
  -562,  -650,  -565,  -650,  -567,  -650,  -378,  -650,  -380,  -382,
  -389,  -638,  -583,  -593,  -603,  -607,  -649,  -369,  -649,   -58,
  -370,  -371,  -322,  -323,  -650,  -325,  -650,  -638,  -624,  -625,
  -628,  -303,  -649,  -116,  -117,  -118,  -650,  -650,  -649,  -328,
  -544,  -546,  -331,  -649,  -649,  -570,  -570,  -650,  -638,  -650,
  -649,  -482,  -484,  -650,  -487,  -495,  -497,  -650,  -132,  -282,
  -650,  -638,  -624,  -625,  -625,  -624,  -257,  -650,  -641,  -649,
   -43,  -208,   -44,  -209,   -70,   -45,  -211,   -46,  -210,   -72,
  -650,  -650,  -650,  -650,  -444,  -650,  -412,  -413,  -638,  -415,
  -649,  -434,  -433,  -650,  -446,  -649,  -448,  -269,  -279,  -619,
   -85,  -100,   -97,  -213,  -313,   -13,   -15,  -361,  -363,  -649,
  -467,  -461,  -649,  -462,  -463,  -642,  -425,  -649,  -649,  -417,
  -638,  -609,  -590,  -608,  -554,  -555,  -555,  -581,  -555,  -555,
  -600,  -555,  -578,  -595,  -638,  -650,  -387,  -650,  -579,  -650,
  -364,  -372,  -650,  -374,  -649,  -650,   -59,  -324,  -650,  -444,
  -650,  -116,  -117,  -120,  -638,  -649,  -650,  -650,  -650,  -338,
  -638,  -650,  -341,  -612,  -506,  -509,  -510,  -511,  -512,  -650,
  -489,   -12,  -283,  -444,   -42,  -207,  -264,  -650,  -243,  -609,
  -609,  -394,  -649,  -649,  -649,  -411,  -650,  -638,  -578,  -586,
  -587,  -597,  -454,   -65,  -649,  -649,  -466,  -650,  -650,  -465,
  -254,  -650,  -650,  -650,  -426,  -550,  -650,  -558,  -650,  -560,
  -650,  -563,  -650,  -566,  -568,  -379,  -381,  -385,  -650,  -390,
  -320,  -650,  -375,  -321,  -650,  -649,  -326,  -444,  -650,  -650,
  -332,  -336,  -650,  -547,  -549,  -548,  -508,  -650,  -392,  -393,
  -402,  -396,  -404,  -650,  -407,  -650,  -409,  -414,  -650,  -650,
  -585,  -650,  -451,  -649,  -649,  -107,  -108,  -650,  -650,  -115,
  -464,  -428,  -429,  -638,  -419,  -421,  -422,  -555,  -555,  -555,
  -555,  -383,  -650,  -388,  -650,  -649,  -278,  -649,  -329,  -545,
  -649,  -339,  -649,  -609,  -588,  -395,  -649,  -649,  -649,  -649,
  -598,  -649,  -416,  -596,  -650,  -304,   -14,  -460,  -649,  -650,
  -650,  -114,  -418,  -650,  -650,  -556,  -559,  -561,  -564,  -650,
  -386,  -649,  -456,  -457,  -458,  -650,  -650,  -391,  -650,  -399,
  -650,  -401,  -650,  -405,  -650,  -408,  -410,  -303,  -628,  -459,
  -638,  -624,  -625,  -628,  -113,  -420,  -555,  -384,  -373,  -333,
  -342,  -649,  -649,  -649,  -649,  -444,  -557,  -650,  -397,  -400,
  -403,  -406,  -649,  -398 ]

clist = [
'6,4,233,607,351,295,295,295,277,229,383,449,456,462,290,142,142,279',
'9,355,356,137,221,360,9,332,332,440,555,345,440,236,129,358,359,440',
'520,719,409,354,354,696,722,354,696,784,318,145,145,433,434,296,296',
'296,599,602,147,147,867,583,332,505,568,281,288,291,575,699,736,737',
'545,126,514,297,297,297,879,335,347,142,509,885,846,415,416,417,418',
'870,339,471,640,762,763,391,765,393,395,398,129,403,406,393,503,354',
'354,354,354,142,690,125,860,446,923,725,728,775,467,663,732,390,314',
'956,316,751,1004,635,959,637,830,130,641,392,1,1006,1030,2,621,407,623',
'420,635,136,9,652,845,935,702,516,220,370,429,419,422,759,886,278,866',
'317,868,689,293,306,307,654,343,561,688,387,562,352,368,532,779,384',
'625,361,346,348,556,349,350,371,895,622,897,1020,373,783,696,696,624',
'972,520,787,975,925,927,444,445,1003,566,295,856,557,926,469,470,1013',
'353,1030,733,512,699,457,513,835,686,1052,766,852,937,389,394,397,1075',
'643,450,473,400,402,405,428,439,1006,466,439,904,789,790,408,439,896',
'432,432,865,924,862,413,764,1024,628,887,,,,295,456,462,683,,956,1050',
'295,,1026,295,,,,511,705,867,,583,893,699,734,934,714,,575,,,,19,833',
'874,450,,,19,,870,,519,519,,,1077,867,391,296,,988,,237,,332,542,603',
',296,,539,237,237,237,290,19,323,323,707,710,297,332,677,525,530,,354',
'549,,710,297,,129,793,,,692,1053,,,427,19,546,,558,563,237,237,824,',
'237,365,611,1036,,535,332,945,332,,1007,,,960,317,559,693,694,1078,963',
'792,529,841,641,966,543,,,,,867,,971,703,129,,,560,564,706,767,710,',
'1022,1027,644,314,1028,531,,,314,,537,,19,940,510,724,528,237,237,237',
'237,19,978,979,515,,,,,746,142,660,,664,,,653,,837,889,317,,840,696',
'671,317,801,456,462,583,676,583,295,,519,519,,,670,1018,,457,145,1021',
',440,699,,606,898,899,147,814,913,440,440,,450,819,1081,440,440,466',
'604,605,684,,,,,,,,671,669,583,583,,900,901,675,,575,575,,,,670,19,237',
'437,237,237,437,237,295,,,437,237,237,,861,,1069,,1057,457,332,718,792',
',19,,,,332,457,928,,450,,,687,942,,1079,1080,466,546,,853,837,,,810',
'812,546,466,,,815,817,695,710,894,967,,237,,,,,,,237,,844,237,,,968',
'772,,,,,295,,,,965,746,,,876,,19,782,457,,19,,,788,323,19,,,,878,,450',
',440,920,,,,,466,,323,781,,,,,,,,832,19,,760,,295,,,,994,,,237,19,19',
',903,457,,,,,,6,797,583,619,,619,,450,142,1054,1015,,,664,798,466,439',
',9,,831,,,,,439,439,,,,,439,439,,826,,928,664,,928,145,914,332,519,671',
',,676,,147,,,1055,332,1056,,809,,670,,740,742,744,546,859,944,746,850',
'746,854,756,,902,758,842,,,,,955,,929,,,,,,,1085,,432,,,,,,,664,,,,295',
',,883,973,883,237,,,1023,457,,920,928,,920,855,920,,,,,,,,450,,,,466',
'664,,,,888,,,,,,142,,,,,,,1011,746,,,,863,,,863,519,859,,,19,,,,439',
',,323,,237,1070,710,,,,323,,,,,,,826,961,237,,,,,,920,,920,,920,,920',
'969,,939,,,746,354,746,,,,,,,,,,,,447,354,,920,,468,,664,,,,,,929,19',
',929,19,,929,,929,,746,,237,890,,,921,,,,,,,,237,,,859,,,237,909,,,',
',,332,,,981,981,981,,970,,332,,974,,,,,,19,,430,443,,,437,237,,,,,,',
',437,437,932,,,,437,437,,,,,929,,929,,929,,929,29,,936,,,,29,,,332,941',
',,,,1042,,,323,1039,,29,929,850,,,,,1019,323,29,29,29,,29,947,949,962',
'951,953,,954,,295,522,,524,883,,526,527,,,,,457,981,981,981,981,29,981',
',,,29,29,,450,29,466,,,,,,466,863,,,921,883,664,921,,921,19,992,993',
',,,237,,,565,,19,19,,,,,,19,,,,,,,981,981,981,981,,,869,1017,871,,437',
'981,,29,,,,,29,29,29,29,29,,,,,,,,,,,19,,,1037,,468,,447,,,,982,984',
'986,921,,921,,921,19,921,,,,1051,32,,19,19,,,32,656,1045,1046,1047,1048',
',,,,,,921,,,32,,,,,,237,,19,32,32,32,,32,922,,,,,19,237,,,,,,,,,,29',
'29,29,29,29,29,29,,,32,29,29,29,,32,32,,,32,,,,,990,29,,1086,,19,19',
',,997,,,,,,,1059,1061,1063,1065,697,1066,,565,,700,,,,,,,,,,,19,29,',
',,,,,29,,,29,,,32,,,,,32,32,32,32,32,1033,,,,,19,29,,,,29,1088,1089',
'1090,1091,29,,,,1008,,1009,1093,1010,,,19,,,752,,19,,19,,,811,813,,',
',29,816,818,,,,,,237,,,29,29,29,,1029,,1031,,,,,,,,,,,,,,,,,,,,16,,',
',,,16,843,32,32,32,32,32,32,32,,,,32,32,32,799,,,,,,,,697,565,,32,,16',
',,,,1076,,,,,,,,,,,,,,1082,,1083,,1084,,,16,,838,,,839,,,32,,369,,,',
',32,,,32,,,,1092,,,851,,,,,697,,29,565,,,,32,915,,,32,,,,,32,,,873,',
'811,813,818,816,,,,,,,,,,16,,,,,,443,,32,16,,,,,,,,,,32,32,32,29,,,',
',,,,,29,,,,,,,,,912,,,,,,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,18,,',
',915,,,,,,,,29,,,29,16,,435,,,435,,29,,,435,,18,,,,,,,29,,,,,16,29,',
',,,,,,,,,,,18,,,32,,,,,,,,29,,,,,,29,29,,,,565,,,,29,29,,,,,29,29,,',
',,,,,,,,,,,,,,,16,,,,16,,32,,,16,,,,18,,32,,,,1016,,,18,,,,,,,,32,,',
',,16,,,,,,,,,,,,16,16,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,32,29,,,,,,29',
'32,,,,29,29,,,,,,29,32,,,,,,32,,,,18,,18,,,18,29,,,,18,,,,,,,,,,32,',
',,18,,32,32,,29,,,,,,32,32,,,,,32,32,,,,,,29,,,,,,,,29,29,,,,,,,,,,',
',,,,,,,,,,,,,29,,29,,,,,,18,,,,18,29,29,,,18,,,,,,,,,,,16,,,,,,,,,,',
',,,,18,,,,,,,,,29,29,,18,18,,,32,,,,,,32,,,,,32,32,,,,,,32,,,,,,29,',
',,,,,,,,,32,,,,16,,,16,,,,,,,,,,,29,,20,,,32,,,20,,,,,,,,,,,,,29,,,32',
',29,,29,,,,32,32,,,20,325,325,16,,,,,29,435,,,,,,,,,435,435,,32,,32',
'435,435,20,,,,,,,,32,32,367,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,32',
',,,18,,,,,,,,,,,,20,,,,,,,,,20,,,,,32,,,,,,,,,,,,,,,,,,,16,,,,,,,,,',
'32,16,16,,,,,,16,,,,,,,18,,,18,,,32,,,,435,32,,32,,,,,,,41,,,,,,41,',
',32,,,,16,,,,,20,,438,,,438,,,,,438,,,,16,18,41,321,321,,,18,16,16,20',
',,,,,18,18,,,,,18,18,,,,,41,,,,,,,16,,,363,,,385,,,,,16,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,20,,,,20,,,,325,20,16,16,,,1000,42,,41,,,,42,,,,325',
'41,,,,,,,,,20,,,,,,16,,,,,18,20,20,42,322,322,,,,,,18,18,,620,,620,',
'18,,,,,,16,,,,,42,,,,,,18,,,,364,,,386,,,16,,,,,16,,16,,,,,,18,,,,,',
',,,41,,,,,,,,,,18,,,,,,,,18,18,,,,,41,,42,,,,,,,,,42,,,,,,,,,,18,,,',
',,,,,,,18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,41,,18,18,321,41,,,',
',,,20,,,,,,,325,,321,,,,,,325,,42,,41,,18,,,,,,,,,,41,41,,,,,,,,,42',
',,385,,385,,,,18,,,,,,,,,,,,,,,,,,,,20,18,,20,,,18,,18,,,,,,,,,,,,,',
',,,,,,,,,,,,,,42,,,,42,,,,322,42,,,,,,,,20,,,,,,438,,322,,,,,,,438,438',
',42,,,438,438,,,,,,,,42,42,,,,,,,,,,,,386,,386,,,,,,,325,,,,,,,,,,,325',
',,,,,,,,,,,,,,,41,,,,,,,321,,,,,,,,321,,,,,,,,,,,,,,,,,,,,,,,,,,20,',
',,,,,,,,,20,20,,,,,908,20,,,,,,,,,,,41,,,41,,,438,,,,,,,,,,,,,,,,,,',
',,,,20,,,,,,,,,,,,,,,,,,,20,,,,42,41,,,20,20,,322,,,,,,,,322,,,,,,,',
',,,,,,,,20,,,,,,,,,,,20,,,,,,,,,,,321,,,,,,,,,,,321,,,,,,42,,,42,,,620',
',,,,20,20,,,999,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,41,,42,,,,,,,,',
'41,41,,,620,,,41,,20,,,,,,,244,,,,,,,,,294,294,294,,,20,,,,,20,,20,341',
'342,,344,,322,,,,41,,,,,,,322,,,,,,,,,,,,41,,,,,,,,41,41,,,,,,,,,,,',
',,,,,,,,,,,,,,41,,,,,,,,,,42,41,,,,,,,,,,42,42,,,,,,42,,,,,,,,,,,,,',
',,,385,,,,,41,41,,,995,,,,,,,,,,,,,,42,,,,,,,,,,,,,41,,,,,,42,,,,,,',
',42,42,,,,,,,,,385,,,,,41,,,,,294,442,,,448,294,,42,,448,,,,,,,41,,42',
',,41,244,41,,480,481,482,483,484,485,486,487,488,489,490,491,492,493',
'494,495,496,497,498,499,500,501,,,,,502,386,,,,,42,42,294,,996,,,,,294',
',,294,,,,,,,294,,294,,,294,294,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,386,,',
',,42,,,551,,552,,,,294,294,,,,,,,,,,,42,,,,,42,,42,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,294,,448,448,448,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,294,,,294,,294,,,,,,,,,,,,,,,294,,,,,,,,,,717,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,448,294,,,806,,,294,294,448,448',
',,,,448,448,,,,,,,,,,,,,,,,,,,,,,,,294,,,294,,,,,,,,,,,,,,,448,,,,,294',
',,,,294,,,294,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,',
'294,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,448,,,,,,,,,,,,,448,448,448,448,',
'918,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,294,448,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,294' ]
        racc_goto_table = arr = ::Array.new(3977, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,2,39,115,104,45,45,45,173,37,69,35,49,49,87,70,70,37,9,23,23,21,21',
'23,9,79,79,24,12,39,24,26,120,41,41,24,89,15,69,30,30,90,102,30,90,123',
'62,73,73,28,28,84,84,84,108,108,74,74,211,210,79,49,172,50,50,50,205',
'221,155,155,64,8,35,86,86,86,109,63,9,70,51,111,17,23,23,23,23,216,77',
'60,194,102,102,6,102,6,6,6,120,6,6,6,174,30,30,30,30,70,52,5,164,32',
'160,85,85,67,32,36,85,190,58,148,59,150,166,195,151,195,162,7,195,191',
'1,167,217,3,68,191,68,10,195,11,9,13,16,18,20,60,22,25,29,9,31,42,44',
'48,161,14,161,54,57,57,57,75,80,83,88,100,103,106,117,60,119,124,125',
'5,126,127,128,129,130,131,132,133,134,135,136,137,90,90,138,139,89,140',
'141,152,158,30,30,165,168,45,169,60,164,30,30,151,170,217,171,177,221',
'87,178,180,182,183,184,185,186,189,192,193,166,196,6,37,197,198,199',
'26,26,167,70,26,200,201,202,203,26,204,84,84,209,161,213,7,115,214,220',
'102,,,,45,49,49,35,,148,151,45,,160,45,,,,87,64,211,,210,67,221,172',
'162,64,,205,,,,34,52,150,6,,,34,,216,,6,6,,,151,211,6,84,,164,,34,,79',
'39,23,,84,,37,34,34,34,87,34,34,34,35,49,86,79,60,190,9,,30,37,,49,86',
',120,194,,,174,111,,,14,34,62,,6,6,34,34,36,,34,34,37,17,,63,79,155',
'79,,161,,,102,14,84,60,60,109,102,195,8,36,195,102,77,,,,,211,,102,60',
'120,,,86,86,60,35,49,,123,161,6,58,161,59,,,58,,59,,34,85,57,60,5,34',
'34,34,34,34,155,155,57,,,,,149,70,37,,39,,,21,,89,36,14,,64,90,87,14',
'35,49,49,210,87,210,45,,6,6,,,6,102,,87,73,102,,24,221,,5,12,12,74,51',
'36,24,24,,6,51,161,24,24,70,14,14,39,,,,,,,,87,50,210,210,,172,172,50',
',205,205,,,,6,34,34,34,34,34,34,34,45,,,34,34,34,,154,,15,,155,87,79',
'30,195,,34,,,,79,87,210,,6,,,50,12,,102,102,70,62,,28,89,,,32,32,62',
'70,,,32,32,86,49,35,36,,34,,,,,,,34,,60,34,,,12,41,,,,,45,,,,108,149',
',,149,,34,30,87,,34,,,30,34,34,,,,60,,6,,24,154,,,,,70,,34,6,,,,,,,',
'104,34,,120,,45,,,,108,,,34,34,34,,60,87,,,,,,6,2,210,34,,34,,6,70,115',
'108,,,39,21,70,26,,9,,173,,,,,26,26,,,,,26,26,,6,,210,39,,210,73,32',
'79,6,87,,,87,,74,,,12,79,12,,86,,6,,208,208,208,62,39,60,149,6,149,6',
'14,,69,14,62,,,,,60,,212,,,,,,,36,,84,,,,,,,39,,,,45,,,6,60,6,34,,,154',
'87,,154,210,,154,86,154,,,,,,,,6,,,,70,39,,,,84,,,,,,70,,,,,,,149,149',
',,,156,,,156,6,39,,,34,,,,26,,,34,,34,35,49,,,,34,,,,,,,6,23,34,,,,',
',154,,154,,154,,154,23,,6,,,149,30,149,,,,,,,,,,,,76,30,,154,,76,,39',
',,,,,212,34,,212,34,,212,,212,,149,,34,14,,,156,,,,,,,,34,,,39,,,34',
'14,,,,,,79,,,6,6,6,,120,,79,,120,,,,,,34,,82,82,,,34,34,,,,,,,,34,34',
'14,,,,34,34,,,,,212,,212,,212,,212,53,,14,,,,53,,,79,14,,,,,39,,,34',
'37,,53,212,6,,,,,120,34,53,53,53,,53,208,208,14,208,208,,208,,45,82',
',82,6,,82,82,,,,,87,6,6,6,6,53,6,,,,53,53,,6,53,70,,,,,,70,156,,,156',
'6,39,156,,156,34,14,14,,,,34,,,82,,34,34,,,,,,34,,,,,,,6,6,6,6,,,159',
'14,159,,34,6,,53,,,,,53,53,53,53,53,,,,,,,,,,,34,,,14,,76,,76,,,,157',
'157,157,156,,156,,156,34,156,,,,14,56,,34,34,,,56,82,208,208,208,208',
',,,,,,156,,,56,,,,,,34,,34,56,56,56,,56,159,,,,,34,34,,,,,,,,,,53,53',
'53,53,53,53,53,,,56,53,53,53,,56,56,,,56,,,,,34,53,,208,,34,34,,,34',
',,,,,,157,157,157,157,82,157,,82,,82,,,,,,,,,,,34,53,,,,,,,53,,,53,',
',56,,,,,56,56,56,56,56,34,,,,,34,53,,,,53,157,157,157,157,53,,,,159',
',159,157,159,,,34,,,82,,34,,34,,,76,76,,,,53,76,76,,,,,,34,,,53,53,53',
',159,,159,,,,,,,,,,,,,,,,,,,,27,,,,,,27,76,56,56,56,56,56,56,56,,,,56',
'56,56,82,,,,,,,,82,82,,56,,27,,,,,159,,,,,,,,,,,,,,159,,159,,159,,,27',
',82,,,82,,,56,,27,,,,,56,,,56,,,,159,,,82,,,,,82,,53,82,,,,56,76,,,56',
',,,,56,,,82,,76,76,76,76,,,,,,,,,,27,,,,,,82,,56,27,,,,,,,,,,56,56,56',
'53,,,,,,,,,53,,,,,,,,,82,,,,,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,',
'33,,,,76,,,,,,,,53,,,53,27,,27,,,27,,53,,,27,,33,,,,,,,53,,,,,27,53',
',,,,,,,,,,,,33,,,56,,,,,,,,53,,,,,,53,53,,,,82,,,,53,53,,,,,53,53,,',
',,,,,,,,,,,,,,,27,,,,27,,56,,,27,,,,33,,56,,,,82,,,33,,,,,,,,56,,,,',
'27,,,,,,,,,,,,27,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,,,56,53,,,,,,53,56',
',,,53,53,,,,,,53,56,,,,,,56,,,,33,,33,,,33,53,,,,33,,,,,,,,,,56,,,,33',
',56,56,,53,,,,,,56,56,,,,,56,56,,,,,,53,,,,,,,,53,53,,,,,,,,,,,,,,,',
',,,,,,,,53,,53,,,,,,33,,,,33,53,53,,,33,,,,,,,,,,,27,,,,,,,,,,,,,,,33',
',,,,,,,,53,53,,33,33,,,56,,,,,,56,,,,,56,56,,,,,,56,,,,,,53,,,,,,,,',
',,56,,,,27,,,27,,,,,,,,,,,53,,38,,,56,,,38,,,,,,,,,,,,,53,,,56,,53,',
'53,,,,56,56,,,38,38,38,27,,,,,53,27,,,,,,,,,27,27,,56,,56,27,27,38,',
',,,,,,56,56,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,56,,,,33,,,,,',
',,,,,,38,,,,,,,,,38,,,,,56,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,56,27,27,,',
',,,27,,,,,,,33,,,33,,,56,,,,27,56,,56,,,,,,,65,,,,,,65,,,56,,,,27,,',
',,38,,38,,,38,,,,,38,,,,27,33,65,65,65,,,33,27,27,38,,,,,,33,33,,,,',
'33,33,,,,,65,,,,,,,27,,,65,,,65,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38',
',,,38,,,,38,38,27,27,,,27,66,,65,,,,66,,,,38,65,,,,,,,,,38,,,,,,27,',
',,,33,38,38,66,66,66,,,,,,33,33,,38,,38,,33,,,,,,27,,,,,66,,,,,,33,',
',,66,,,66,,,27,,,,,27,,27,,,,,,33,,,,,,,,,65,,,,,,,,,,33,,,,,,,,33,33',
',,,,65,,66,,,,,,,,,66,,,,,,,,,,33,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,65,,,,65,,33,33,65,65,,,,,,,38,,,,,,,38,,65,,,,,,38,,66,',
'65,,33,,,,,,,,,,65,65,,,,,,,,,66,,,65,,65,,,,33,,,,,,,,,,,,,,,,,,,,38',
'33,,38,,,33,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,66,,,,66,66,,,,,,,',
'38,,,,,,38,,66,,,,,,,38,38,,66,,,38,38,,,,,,,,66,66,,,,,,,,,,,,66,,66',
',,,,,,38,,,,,,,,,,,38,,,,,,,,,,,,,,,,65,,,,,,,65,,,,,,,,65,,,,,,,,,',
',,,,,,,,,,,,,,,,38,,,,,,,,,,,38,38,,,,,38,38,,,,,,,,,,,65,,,65,,,38',
',,,,,,,,,,,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,38,,,,66,65,,,38,38,,66,',
',,,,,,66,,,,,,,,,,,,,,,,38,,,,,,,,,,,38,,,,,,,,,,,65,,,,,,,,,,,65,,',
',,,66,,,66,,,38,,,,,38,38,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,,,,',
'65,,66,,,,,,,,,65,65,,,38,,,65,,38,,,,,,,40,,,,,,,,,40,40,40,,,38,,',
',,38,,38,40,40,,40,,66,,,,65,,,,,,,66,,,,,,,,,,,,65,,,,,,,,65,65,,,',
',,,,,,,,,,,,,,,,,,,,,,65,,,,,,,,,,66,65,,,,,,,,,,66,66,,,,,,66,,,,,',
',,,,,,,,,,,65,,,,,65,65,,,65,,,,,,,,,,,,,,66,,,,,,,,,,,,,65,,,,,,66',
',,,,,,,66,66,,,,,,,,,65,,,,,65,,,,,40,40,,,40,40,,66,,40,,,,,,,65,,66',
',,65,40,65,,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40',
'40,40,40,,,,,40,66,,,,,66,66,40,,66,,,,,40,,,40,,,,,,,40,,40,,,40,40',
',,,,,66,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,66,,,40,,40,,,,40,40,,,,,,,,,',
',66,,,,,66,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,40,40,40',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,40,,40,,,,,,,,,,,,,,,40,',
',,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,',
',,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,40,,,40',
',,40,40,40,40,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,40,,,40,,,,,,,,,,,,,',
',40,,,,,40,,,,,40,,,40,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,40,,,,',
',,,,,,,40,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,40,,,,,,,,,,,,,40,40,40,40,',
'40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3977, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   132,    -1,   135,   nil,   104,    -2,   121,    66,    16,
     3,   131,  -318,  -278,   121,  -517,  -575,  -637,  -700,   nil,
  -383,    10,   136,   -48,  -197,    77,     8,  1347,  -174,   -73,
   -28,    15,  -116,  1545,   282,  -217,  -332,   -10,  1960,   -20,
  2938,   -36,  -450,   nil,  -605,   -27,   nil,   nil,   128,  -217,
    34,  -201,  -404,   966,  -349,   nil,  1135,   128,    84,    86,
  -145,   nil,     9,    39,  -266,  2162,  2284,  -502,  -235,   -65,
     4,   nil,   nil,    36,    45,  -263,   640,    44,   nil,   -12,
   117,   nil,   713,  -184,    19,  -446,    41,   -16,  -339,  -261,
  -477,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    92,   nil,  -513,  -182,   -61,   nil,   103,   nil,  -301,  -680,
   nil,  -677,   nil,   nil,   nil,  -358,   nil,    98,   nil,  -449,
    27,   nil,   nil,  -579,    98,  -210,   115,   115,  -169,   116,
   116,   108,  -597,  -189,  -598,  -785,   112,  -436,  -193,  -708,
  -432,  -708,   nil,   nil,   nil,   nil,   nil,   nil,  -754,  -159,
  -461,  -751,  -633,   nil,  -217,  -501,    68,   201,  -632,   344,
  -716,  -583,  -558,   nil,  -624,  -744,  -819,  -810,  -153,  -531,
   142,  -356,  -291,   -17,  -174,   nil,   nil,   -75,   -73,   nil,
  -476,   nil,  -288,  -800,  -391,  -502,  -632,   nil,   nil,   129,
    24,    34,   124,   124,  -307,  -267,  -175,   128,   128,   128,
  -553,  -395,  -395,   136,  -539,  -287,   nil,   nil,   138,  -495,
  -294,  -681,   -97,  -489,  -728,   nil,  -654,  -849,   nil,   nil,
  -138,  -454 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   309,     7,   362,   312,
   nil,   nil,   nil,   nil,   554,   nil,   nil,   nil,   nil,   308,
   310,   nil,   nil,   nil,    14,    15,    21,   242,   nil,   nil,
    17,   nil,   436,   243,   340,   nil,   nil,   777,   241,   472,
    24,   nil,   nil,   357,   nil,    25,    26,    27,   nil,   713,
   nil,   nil,   nil,   329,   nil,    28,   326,   451,    35,   nil,
   nil,    37,    40,    39,   nil,   238,   239,   618,   nil,   144,
   459,   143,   146,    90,    91,   nil,   441,   105,    47,    50,
   274,   547,   300,   nil,   452,   nil,   453,   464,   672,   517,
   298,   282,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    61,   nil,   nil,   283,    65,   nil,    67,   nil,   nil,
    68,   881,    69,    70,    71,   nil,    72,   nil,    73,   nil,
   600,    74,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   287,   276,   721,   849,   609,   882,   748,   582,
   nil,   749,  1025,   919,   570,   nil,   571,   nil,   nil,   572,
   nil,   574,   nil,   827,   nil,   nil,   nil,   580,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   463,   285,   nil,   nil,   691,
   nil,   504,   nil,   nil,   nil,   nil,   nil,    89,    92,    94,
   nil,   nil,   nil,   nil,   nil,   630,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   864,   786,   569,   nil,   573,
   872,   585,   587,   588,   930,   591,   592,   931,   595,   598,
   nil,   303 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 150, :_reduce_1,
  2, 148, :_reduce_2,
  2, 149, :_reduce_3,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  3, 151, :_reduce_6,
  2, 151, :_reduce_none,
  1, 154, :_reduce_none,
  0, 158, :_reduce_9,
  3, 154, :_reduce_10,
  0, 160, :_reduce_11,
  4, 157, :_reduce_12,
  0, 165, :_reduce_13,
  6, 159, :_reduce_14,
  3, 159, :_reduce_15,
  2, 161, :_reduce_16,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  3, 166, :_reduce_19,
  2, 166, :_reduce_20,
  1, 167, :_reduce_none,
  1, 167, :_reduce_22,
  0, 178, :_reduce_23,
  4, 156, :_reduce_24,
  3, 156, :_reduce_25,
  3, 156, :_reduce_26,
  3, 156, :_reduce_27,
  2, 156, :_reduce_28,
  3, 156, :_reduce_29,
  3, 156, :_reduce_30,
  3, 156, :_reduce_31,
  3, 156, :_reduce_32,
  3, 156, :_reduce_33,
  4, 156, :_reduce_34,
  1, 156, :_reduce_none,
  3, 156, :_reduce_36,
  3, 156, :_reduce_37,
  3, 156, :_reduce_38,
  1, 156, :_reduce_none,
  3, 171, :_reduce_40,
  3, 171, :_reduce_41,
  6, 171, :_reduce_42,
  5, 171, :_reduce_43,
  5, 171, :_reduce_44,
  5, 171, :_reduce_45,
  5, 171, :_reduce_46,
  3, 171, :_reduce_47,
  1, 179, :_reduce_48,
  1, 179, :_reduce_none,
  1, 177, :_reduce_none,
  3, 177, :_reduce_51,
  3, 177, :_reduce_52,
  3, 177, :_reduce_53,
  2, 177, :_reduce_54,
  1, 177, :_reduce_none,
  1, 170, :_reduce_56,
  0, 190, :_reduce_57,
  0, 191, :_reduce_58,
  4, 188, :_reduce_59,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 193, :_reduce_none,
  4, 193, :_reduce_63,
  0, 201, :_reduce_64,
  4, 198, :_reduce_65,
  1, 200, :_reduce_66,
  2, 192, :_reduce_67,
  3, 192, :_reduce_68,
  4, 192, :_reduce_69,
  5, 192, :_reduce_70,
  4, 192, :_reduce_71,
  5, 192, :_reduce_72,
  2, 192, :_reduce_73,
  2, 192, :_reduce_74,
  2, 192, :_reduce_75,
  2, 192, :_reduce_76,
  2, 192, :_reduce_77,
  1, 172, :_reduce_none,
  3, 172, :_reduce_79,
  1, 206, :_reduce_none,
  3, 206, :_reduce_81,
  1, 205, :_reduce_82,
  2, 205, :_reduce_83,
  3, 205, :_reduce_84,
  5, 205, :_reduce_85,
  2, 205, :_reduce_86,
  4, 205, :_reduce_87,
  2, 205, :_reduce_88,
  4, 205, :_reduce_89,
  1, 205, :_reduce_90,
  3, 205, :_reduce_91,
  1, 209, :_reduce_none,
  3, 209, :_reduce_93,
  2, 208, :_reduce_94,
  3, 208, :_reduce_95,
  1, 211, :_reduce_96,
  3, 211, :_reduce_97,
  1, 210, :_reduce_98,
  1, 210, :_reduce_99,
  4, 210, :_reduce_100,
  3, 210, :_reduce_101,
  3, 210, :_reduce_102,
  3, 210, :_reduce_103,
  3, 210, :_reduce_104,
  2, 210, :_reduce_105,
  1, 210, :_reduce_106,
  1, 174, :_reduce_107,
  1, 174, :_reduce_108,
  4, 174, :_reduce_109,
  3, 174, :_reduce_110,
  3, 174, :_reduce_111,
  3, 174, :_reduce_112,
  3, 174, :_reduce_113,
  2, 174, :_reduce_114,
  1, 174, :_reduce_115,
  1, 214, :_reduce_116,
  1, 214, :_reduce_none,
  2, 215, :_reduce_118,
  1, 215, :_reduce_119,
  3, 215, :_reduce_120,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_124,
  1, 216, :_reduce_125,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 168, :_reduce_128,
  1, 168, :_reduce_none,
  1, 169, :_reduce_130,
  0, 222, :_reduce_131,
  4, 169, :_reduce_132,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  3, 187, :_reduce_205,
  3, 187, :_reduce_206,
  6, 187, :_reduce_207,
  5, 187, :_reduce_208,
  5, 187, :_reduce_209,
  5, 187, :_reduce_210,
  5, 187, :_reduce_211,
  0, 228, :_reduce_212,
  5, 187, :_reduce_213,
  3, 187, :_reduce_214,
  3, 187, :_reduce_215,
  3, 187, :_reduce_216,
  3, 187, :_reduce_217,
  3, 187, :_reduce_218,
  3, 187, :_reduce_219,
  3, 187, :_reduce_220,
  3, 187, :_reduce_221,
  3, 187, :_reduce_222,
  4, 187, :_reduce_223,
  2, 187, :_reduce_224,
  2, 187, :_reduce_225,
  3, 187, :_reduce_226,
  3, 187, :_reduce_227,
  3, 187, :_reduce_228,
  3, 187, :_reduce_229,
  1, 187, :_reduce_none,
  3, 187, :_reduce_231,
  3, 187, :_reduce_232,
  3, 187, :_reduce_233,
  3, 187, :_reduce_234,
  3, 187, :_reduce_235,
  2, 187, :_reduce_236,
  2, 187, :_reduce_237,
  3, 187, :_reduce_238,
  3, 187, :_reduce_239,
  3, 187, :_reduce_240,
  3, 187, :_reduce_241,
  3, 187, :_reduce_242,
  6, 187, :_reduce_243,
  1, 187, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  3, 225, :_reduce_249,
  3, 225, :_reduce_250,
  1, 229, :_reduce_251,
  1, 230, :_reduce_none,
  2, 230, :_reduce_253,
  4, 230, :_reduce_254,
  2, 230, :_reduce_255,
  1, 223, :_reduce_none,
  3, 223, :_reduce_257,
  3, 234, :_reduce_258,
  1, 235, :_reduce_none,
  1, 235, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  2, 182, :_reduce_263,
  4, 182, :_reduce_264,
  2, 182, :_reduce_265,
  1, 204, :_reduce_266,
  2, 204, :_reduce_267,
  2, 204, :_reduce_268,
  4, 204, :_reduce_269,
  1, 204, :_reduce_270,
  0, 238, :_reduce_271,
  2, 197, :_reduce_272,
  2, 237, :_reduce_273,
  2, 236, :_reduce_274,
  1, 236, :_reduce_none,
  1, 231, :_reduce_276,
  2, 231, :_reduce_277,
  3, 231, :_reduce_278,
  4, 231, :_reduce_279,
  1, 176, :_reduce_280,
  1, 176, :_reduce_281,
  3, 175, :_reduce_282,
  4, 175, :_reduce_283,
  2, 175, :_reduce_284,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_295,
  0, 273, :_reduce_296,
  4, 226, :_reduce_297,
  0, 274, :_reduce_298,
  3, 226, :_reduce_299,
  0, 275, :_reduce_300,
  4, 226, :_reduce_301,
  3, 226, :_reduce_302,
  3, 226, :_reduce_303,
  2, 226, :_reduce_304,
  0, 276, :_reduce_305,
  4, 226, :_reduce_306,
  0, 277, :_reduce_307,
  4, 226, :_reduce_308,
  1, 226, :_reduce_309,
  4, 226, :_reduce_310,
  3, 226, :_reduce_311,
  1, 226, :_reduce_312,
  5, 226, :_reduce_313,
  4, 226, :_reduce_314,
  3, 226, :_reduce_315,
  2, 226, :_reduce_316,
  1, 226, :_reduce_none,
  2, 226, :_reduce_318,
  2, 226, :_reduce_319,
  6, 226, :_reduce_320,
  6, 226, :_reduce_321,
  4, 226, :_reduce_322,
  4, 226, :_reduce_323,
  5, 226, :_reduce_324,
  4, 226, :_reduce_325,
  6, 226, :_reduce_326,
  0, 278, :_reduce_327,
  0, 279, :_reduce_328,
  7, 226, :_reduce_329,
  0, 280, :_reduce_330,
  0, 281, :_reduce_331,
  0, 282, :_reduce_332,
  9, 226, :_reduce_333,
  0, 283, :_reduce_334,
  0, 284, :_reduce_335,
  6, 226, :_reduce_336,
  0, 285, :_reduce_337,
  0, 286, :_reduce_338,
  7, 226, :_reduce_339,
  0, 287, :_reduce_340,
  0, 288, :_reduce_341,
  9, 226, :_reduce_342,
  1, 226, :_reduce_343,
  1, 226, :_reduce_344,
  1, 226, :_reduce_345,
  1, 226, :_reduce_346,
  1, 181, :_reduce_347,
  1, 248, :_reduce_none,
  1, 254, :_reduce_none,
  1, 257, :_reduce_none,
  1, 259, :_reduce_none,
  1, 260, :_reduce_none,
  1, 261, :_reduce_none,
  1, 263, :_reduce_none,
  1, 265, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 289, :_reduce_none,
  1, 290, :_reduce_none,
  1, 291, :_reduce_none,
  1, 292, :_reduce_none,
  1, 293, :_reduce_none,
  1, 163, :_reduce_none,
  1, 294, :_reduce_none,
  1, 249, :_reduce_none,
  1, 203, :_reduce_none,
  1, 255, :_reduce_none,
  1, 255, :_reduce_none,
  2, 255, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 256, :_reduce_none,
  5, 256, :_reduce_373,
  1, 258, :_reduce_none,
  2, 258, :_reduce_375,
  1, 264, :_reduce_none,
  1, 264, :_reduce_377,
  1, 295, :_reduce_none,
  3, 295, :_reduce_379,
  1, 298, :_reduce_380,
  3, 298, :_reduce_381,
  1, 297, :_reduce_382,
  4, 297, :_reduce_383,
  6, 297, :_reduce_384,
  3, 297, :_reduce_385,
  5, 297, :_reduce_386,
  2, 297, :_reduce_387,
  4, 297, :_reduce_388,
  1, 297, :_reduce_389,
  3, 297, :_reduce_390,
  4, 299, :_reduce_391,
  2, 299, :_reduce_392,
  2, 299, :_reduce_393,
  1, 299, :_reduce_394,
  2, 304, :_reduce_395,
  1, 304, :_reduce_none,
  6, 305, :_reduce_397,
  8, 305, :_reduce_398,
  4, 305, :_reduce_399,
  6, 305, :_reduce_400,
  4, 305, :_reduce_401,
  2, 305, :_reduce_402,
  6, 305, :_reduce_403,
  2, 305, :_reduce_404,
  4, 305, :_reduce_405,
  6, 305, :_reduce_406,
  2, 305, :_reduce_407,
  4, 305, :_reduce_408,
  2, 305, :_reduce_409,
  4, 305, :_reduce_410,
  1, 305, :_reduce_411,
  1, 309, :_reduce_412,
  1, 309, :_reduce_413,
  3, 310, :_reduce_414,
  1, 310, :_reduce_415,
  4, 310, :_reduce_416,
  1, 311, :_reduce_none,
  4, 311, :_reduce_418,
  1, 312, :_reduce_419,
  3, 312, :_reduce_420,
  1, 313, :_reduce_421,
  1, 313, :_reduce_none,
  0, 317, :_reduce_423,
  0, 318, :_reduce_424,
  4, 253, :_reduce_425,
  4, 315, :_reduce_426,
  1, 315, :_reduce_427,
  3, 316, :_reduce_428,
  3, 316, :_reduce_429,
  3, 320, :_reduce_430,
  2, 194, :_reduce_431,
  4, 194, :_reduce_432,
  5, 194, :_reduce_433,
  5, 194, :_reduce_434,
  0, 323, :_reduce_435,
  3, 252, :_reduce_436,
  4, 252, :_reduce_437,
  4, 252, :_reduce_438,
  3, 252, :_reduce_439,
  3, 252, :_reduce_440,
  3, 252, :_reduce_441,
  2, 252, :_reduce_442,
  1, 252, :_reduce_443,
  4, 252, :_reduce_444,
  0, 324, :_reduce_445,
  4, 251, :_reduce_446,
  0, 325, :_reduce_447,
  4, 251, :_reduce_448,
  0, 326, :_reduce_449,
  0, 327, :_reduce_450,
  4, 199, :_reduce_451,
  0, 328, :_reduce_452,
  0, 329, :_reduce_453,
  4, 321, :_reduce_454,
  0, 331, :_reduce_455,
  6, 262, :_reduce_456,
  1, 330, :_reduce_none,
  1, 330, :_reduce_none,
  6, 162, :_reduce_459,
  0, 162, :_reduce_460,
  1, 332, :_reduce_461,
  1, 332, :_reduce_none,
  1, 332, :_reduce_none,
  2, 333, :_reduce_464,
  1, 333, :_reduce_none,
  2, 164, :_reduce_466,
  1, 164, :_reduce_none,
  1, 239, :_reduce_468,
  1, 239, :_reduce_469,
  1, 239, :_reduce_none,
  1, 240, :_reduce_471,
  1, 335, :_reduce_472,
  1, 335, :_reduce_none,
  2, 335, :_reduce_474,
  3, 336, :_reduce_475,
  1, 336, :_reduce_476,
  3, 241, :_reduce_477,
  3, 242, :_reduce_478,
  3, 243, :_reduce_479,
  3, 243, :_reduce_480,
  1, 340, :_reduce_481,
  3, 340, :_reduce_482,
  1, 341, :_reduce_none,
  2, 341, :_reduce_484,
  3, 245, :_reduce_485,
  0, 344, :_reduce_486,
  4, 245, :_reduce_487,
  1, 343, :_reduce_488,
  3, 343, :_reduce_489,
  3, 244, :_reduce_490,
  3, 244, :_reduce_491,
  3, 246, :_reduce_492,
  3, 246, :_reduce_493,
  1, 345, :_reduce_494,
  3, 345, :_reduce_495,
  1, 346, :_reduce_496,
  3, 346, :_reduce_497,
  1, 337, :_reduce_498,
  2, 337, :_reduce_499,
  1, 338, :_reduce_500,
  2, 338, :_reduce_501,
  1, 339, :_reduce_502,
  2, 339, :_reduce_503,
  1, 342, :_reduce_504,
  0, 348, :_reduce_505,
  3, 342, :_reduce_506,
  0, 349, :_reduce_507,
  4, 342, :_reduce_508,
  1, 347, :_reduce_509,
  1, 347, :_reduce_510,
  1, 347, :_reduce_511,
  1, 347, :_reduce_none,
  2, 220, :_reduce_513,
  1, 220, :_reduce_514,
  1, 350, :_reduce_none,
  1, 350, :_reduce_none,
  1, 350, :_reduce_none,
  1, 350, :_reduce_none,
  3, 221, :_reduce_519,
  1, 334, :_reduce_none,
  2, 334, :_reduce_521,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 213, :_reduce_531,
  1, 213, :_reduce_532,
  1, 213, :_reduce_533,
  1, 213, :_reduce_534,
  1, 213, :_reduce_535,
  1, 213, :_reduce_536,
  1, 213, :_reduce_537,
  1, 247, :_reduce_538,
  1, 247, :_reduce_539,
  1, 180, :_reduce_540,
  1, 180, :_reduce_541,
  1, 185, :_reduce_542,
  1, 185, :_reduce_543,
  0, 351, :_reduce_544,
  4, 266, :_reduce_545,
  1, 266, :_reduce_546,
  3, 270, :_reduce_547,
  0, 353, :_reduce_548,
  3, 270, :_reduce_549,
  4, 352, :_reduce_550,
  2, 352, :_reduce_551,
  2, 352, :_reduce_552,
  1, 352, :_reduce_none,
  2, 355, :_reduce_554,
  0, 355, :_reduce_555,
  6, 319, :_reduce_556,
  8, 319, :_reduce_557,
  4, 319, :_reduce_558,
  6, 319, :_reduce_559,
  4, 319, :_reduce_560,
  6, 319, :_reduce_561,
  2, 319, :_reduce_562,
  4, 319, :_reduce_563,
  6, 319, :_reduce_564,
  2, 319, :_reduce_565,
  4, 319, :_reduce_566,
  2, 319, :_reduce_567,
  4, 319, :_reduce_568,
  1, 319, :_reduce_569,
  0, 319, :_reduce_570,
  1, 314, :_reduce_571,
  1, 314, :_reduce_572,
  1, 314, :_reduce_573,
  1, 314, :_reduce_574,
  1, 296, :_reduce_none,
  1, 296, :_reduce_576,
  1, 357, :_reduce_none,
  1, 358, :_reduce_none,
  3, 358, :_reduce_579,
  1, 306, :_reduce_580,
  3, 306, :_reduce_581,
  1, 359, :_reduce_none,
  2, 360, :_reduce_583,
  1, 360, :_reduce_584,
  2, 361, :_reduce_585,
  1, 361, :_reduce_586,
  1, 300, :_reduce_none,
  3, 300, :_reduce_588,
  1, 354, :_reduce_none,
  3, 354, :_reduce_590,
  1, 362, :_reduce_none,
  1, 362, :_reduce_none,
  2, 301, :_reduce_593,
  1, 301, :_reduce_594,
  3, 363, :_reduce_595,
  3, 364, :_reduce_596,
  1, 307, :_reduce_597,
  3, 307, :_reduce_598,
  1, 356, :_reduce_599,
  3, 356, :_reduce_600,
  1, 365, :_reduce_none,
  1, 365, :_reduce_none,
  2, 308, :_reduce_603,
  1, 308, :_reduce_604,
  1, 366, :_reduce_none,
  1, 366, :_reduce_none,
  2, 303, :_reduce_607,
  2, 302, :_reduce_608,
  0, 302, :_reduce_609,
  1, 271, :_reduce_none,
  0, 367, :_reduce_611,
  4, 271, :_reduce_612,
  1, 250, :_reduce_613,
  2, 250, :_reduce_none,
  1, 233, :_reduce_none,
  3, 233, :_reduce_616,
  3, 368, :_reduce_617,
  2, 368, :_reduce_618,
  4, 368, :_reduce_619,
  2, 368, :_reduce_620,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  1, 272, :_reduce_none,
  1, 272, :_reduce_none,
  1, 184, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  0, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 186, :_reduce_none,
  1, 186, :_reduce_none,
  2, 207, :_reduce_none,
  2, 183, :_reduce_none,
  0, 232, :_reduce_none,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  1, 267, :_reduce_645,
  1, 267, :_reduce_none,
  1, 155, :_reduce_none,
  2, 155, :_reduce_648,
  0, 153, :_reduce_649 ]

racc_reduce_n = 650

racc_shift_n = 1094

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLOWEST => 143,
  :tEQL => 144,
  :tBDOT2 => 145,
  :tBDOT3 => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLOWEST",
  "tEQL",
  "tBDOT2",
  "tBDOT3",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "@29",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "@36",
  "cases",
  "@37",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "@38",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@39",
  "@40",
  "sym",
  "@41",
  "args_tail",
  "@42",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@43",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

                      lexer.cond.pop # local_pop
                      lexer.cmdarg.pop

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug20 2, val, result

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_24(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_28(val, _values, result)
                      result = val[1]

    result
end

def _reduce_29(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_30(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_31(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_34(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_37(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_43(val, _values, result)
                      prim, _, id, opasgn, rhs = val
                      result = s(:op_asgn, prim, rhs, id.to_sym, opasgn.to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_45(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

# reduce 49 omitted

# reduce 50 omitted

def _reduce_51(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_52(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_53(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_54(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 55 omitted

def _reduce_56(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_57(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_59(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      blk, _, msg, args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_64(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_65(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend

    result
end

def _reduce_66(val, _values, result)
                      msg, = val
                      result = new_call(nil, msg.to_sym).line lexer.lineno

    result
end

def _reduce_67(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_68(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_69(val, _values, result)
                      lhs, callop, op, args = val
                      result = new_call lhs, op.to_sym, args, callop

    result
end

def _reduce_70(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_71(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_72(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_73(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_74(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_75(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_76(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 78 omitted

def _reduce_79(val, _values, result)
                      result = val[1]

    result
end

# reduce 80 omitted

def _reduce_81(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_82(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_83(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_84(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_85(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_86(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_87(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_88(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_89(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_90(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_91(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = val[1]

    result
end

def _reduce_94(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_95(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_96(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_97(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_102(val, _values, result)
                      recv, _, id = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, id = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      _, id = val
                      l = lexer.lineno

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_107(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line

    result
end

def _reduce_108(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line
                      debug20 9, val, result

    result
end

def _reduce_109(val, _values, result)
                      lhs, _, args, _ = val
                      result = self.aryset lhs, args

    result
end

def _reduce_110(val, _values, result)
                      lhs, op, id = val
                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_111(val, _values, result)
                      lhs, _, id = val
                      result = new_attrasgn lhs, id

    result
end

def _reduce_112(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_113(val, _values, result)
                      expr, _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_114(val, _values, result)
                      _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      l = lexer.lineno
                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_115(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_116(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 117 omitted

def _reduce_118(val, _values, result)
                      _, name = val
                      result = s(:colon3, name.to_sym).line lexer.lineno

    result
end

def _reduce_119(val, _values, result)
                      result = val[0].to_sym

    result
end

def _reduce_120(val, _values, result)
                      pval, _, name = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

def _reduce_124(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]

    result
end

def _reduce_125(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym

    result
end

# reduce 126 omitted

# reduce 127 omitted

def _reduce_128(val, _values, result)
                      id, = val
                      result = s(:lit, id.to_sym).line lexer.lineno

    result
end

# reduce 129 omitted

def _reduce_130(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_131(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_132(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

def _reduce_205(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_206(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_210(val, _values, result)
                      lhs, _, id, op, rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_211(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_212(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_213(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_214(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_215(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_223(val, _values, result)
                      lit = s(:lit, val[1]).line lexer.lineno
                      result = new_call(new_call(lit, :"**", argl(val[3])), :"-@")


    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_234(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_235(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_236(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_237(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_238(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_239(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_240(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_241(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_242(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_243(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_250(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_251(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_254(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_255(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_258(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = args val

    result
end

def _reduce_264(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_265(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_266(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_267(val, _values, result)
                      result = call_args val

    result
end

def _reduce_268(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_269(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_270(val, _values, result)
                      result = call_args val

    result
end

def _reduce_271(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_272(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_273(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_274(val, _values, result)
                      result = val[1]

    result
end

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_277(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_278(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_279(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_280(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_281(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_283(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_284(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      msg, = val
                      result = new_call nil, msg.to_sym

    result
end

def _reduce_296(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_297(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_298(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_299(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_301(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_302(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_303(val, _values, result)
                      expr, _, id = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_304(val, _values, result)
                      _, id = val

                      result = s(:colon3, id.to_sym).line lexer.lineno

    result
end

def _reduce_305(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_306(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_307(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_308(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_309(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_310(val, _values, result)
                      result = new_yield val[2]

    result
end

def _reduce_311(val, _values, result)
                      result = new_yield

    result
end

def _reduce_312(val, _values, result)
                      result = new_yield

    result
end

def _reduce_313(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_314(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_315(val, _values, result)
                      debug20 14, val, result

    result
end

def _reduce_316(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 317 omitted

def _reduce_318(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_319(val, _values, result)
                      result = val[1] # TODO: fix lineno

    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_321(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_323(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_324(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_325(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_326(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_327(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_329(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_330(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_331(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_332(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_333(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_334(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_335(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_336(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_337(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      self.comments.push self.lexer.comments

    result
end

def _reduce_338(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_339(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_340(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_341(val, _values, result)
                      result = [self.in_def, lexer.lineno]

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL
                      self.comments.push self.lexer.comments

    result
end

def _reduce_342(val, _values, result)
                      _, _recv, _, _, _name, (in_def, _lineno), _args, _body, _ = val

                      result = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_343(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_344(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_345(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_346(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_347(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[1]

    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = val[1]

    result
end

def _reduce_380(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_381(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_382(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_383(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym

    result
end

def _reduce_384(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2

    result
end

def _reduce_385(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*

    result
end

def _reduce_386(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2

    result
end

def _reduce_387(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"

    result
end

def _reduce_388(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args

    result
end

def _reduce_389(val, _values, result)
                      result = block_var :*

    result
end

def _reduce_390(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args

    result
end

def _reduce_391(val, _values, result)
                      result = call_args val

    result
end

def _reduce_392(val, _values, result)
                      result = call_args val

    result
end

def _reduce_393(val, _values, result)
                      result = call_args val

    result
end

def _reduce_394(val, _values, result)
                      line = lexer.lineno
                      result = call_args val # TODO: push line down
                      result.line line

    result
end

def _reduce_395(val, _values, result)
                      result = args val

    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = args val

    result
end

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args val

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_403(val, _values, result)
                      result = args val

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
                      result = args val

    result
end

def _reduce_407(val, _values, result)
                      result = args val

    result
end

def _reduce_408(val, _values, result)
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = args val

    result
end

def _reduce_410(val, _values, result)
                      result = args val

    result
end

def _reduce_411(val, _values, result)
                      result = args val

    result
end

def _reduce_412(val, _values, result)
 result = 0
    result
end

def _reduce_413(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_414(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_416(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 417 omitted

def _reduce_418(val, _values, result)
                      result = args val

    result
end

def _reduce_419(val, _values, result)
                      result = args val

    result
end

def _reduce_420(val, _values, result)
                      result = args val

    result
end

def _reduce_421(val, _values, result)
                      id, = val
                      line = lexer.lineno
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 422 omitted

def _reduce_423(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_424(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_425(val, _values, result)
                      (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line = line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_426(val, _values, result)
                      result = args val

    result
end

def _reduce_427(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_428(val, _values, result)
                      result = val[1]

    result
end

def _reduce_429(val, _values, result)
                      result = val[1]

    result
end

def _reduce_430(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_431(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      cmd, blk = val

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_432(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_433(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_434(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_435(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_436(val, _values, result)
                      call, lineno, args = val

                      result = call.concat args.sexp_body if args
                      result.line lineno

    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]

    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], val[2].to_sym

    result
end

def _reduce_440(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_441(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_442(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_443(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_444(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_445(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_446(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_447(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_448(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_449(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_450(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_451(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_452(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_453(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_454(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_455(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_456(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]

    result
end

# reduce 457 omitted

# reduce 458 omitted

def _reduce_459(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_460(val, _values, result)
                      result = nil

    result
end

def _reduce_461(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 462 omitted

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = val[1]

    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

def _reduce_469(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_472(val, _values, result)
                      debug20 23, val, result

    result
end

# reduce 473 omitted

def _reduce_474(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_475(val, _values, result)
                      _, str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_ICNTNT

                      result = str

    result
end

def _reduce_476(val, _values, result)
                      result = new_string val

    result
end

def _reduce_477(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_478(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_479(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_480(val, _values, result)
                      result = val[1]

    result
end

def _reduce_481(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_482(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 483 omitted

def _reduce_484(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_485(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_486(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_487(val, _values, result)
                      _, line, list, _, = val
                      list.line = line
                      result = list

    result
end

def _reduce_488(val, _values, result)
                      result = new_symbol_list.line lexer.lineno

    result
end

def _reduce_489(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_490(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_491(val, _values, result)
                      result = val[1]

    result
end

def _reduce_492(val, _values, result)
                      result = s(:array).line lexer.lineno # FIX

    result
end

def _reduce_493(val, _values, result)
                      result = val[1]

    result
end

def _reduce_494(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_495(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_496(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_497(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_498(val, _values, result)
                      result = s(:str, "").line lexer.lineno

    result
end

def _reduce_499(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_500(val, _values, result)
                      result = nil

    result
end

def _reduce_501(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_502(val, _values, result)
                      result = nil

    result
end

def _reduce_503(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_504(val, _values, result)
                      result = new_string val

    result
end

def _reduce_505(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_506(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_507(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_508(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cmdarg.pop
                      lexer.cond.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_509(val, _values, result)
 result = s(:gvar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_510(val, _values, result)
 result = s(:ivar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_511(val, _values, result)
 result = s(:cvar, val[0].to_sym).line lexer.lineno
    result
end

# reduce 512 omitted

def _reduce_513(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym

    result
end

def _reduce_514(val, _values, result)
                      result = val[0].to_sym

    result
end

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug20 26, val, result
                      end

    result
end

# reduce 520 omitted

def _reduce_521(val, _values, result)
                      result = -val[1] # TODO: pt_testcase

    result
end

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

def _reduce_531(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_532(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_533(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_534(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_535(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_536(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_537(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_538(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_539(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_540(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_541(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result

    result
end

def _reduce_542(val, _values, result)
 result = s(:nth_ref,  val[0]).line lexer.lineno
    result
end

def _reduce_543(val, _values, result)
 result = s(:back_ref, val[0]).line lexer.lineno
    result
end

def _reduce_544(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_545(val, _values, result)
                      result = val[2]

    result
end

def _reduce_546(val, _values, result)
                      result = nil

    result
end

def _reduce_547(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true

    result
end

def _reduce_548(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_549(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_550(val, _values, result)
                      result = args val

    result
end

def _reduce_551(val, _values, result)
                      result = args val

    result
end

def _reduce_552(val, _values, result)
                      result = args val

    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      result = val[1]

    result
end

def _reduce_555(val, _values, result)
                      result = nil

    result
end

def _reduce_556(val, _values, result)
                      result = args val

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val

    result
end

def _reduce_568(val, _values, result)
                      result = args val

    result
end

def _reduce_569(val, _values, result)
                      result = args val

    result
end

def _reduce_570(val, _values, result)
                      result = args val

    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_572(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_573(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_574(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier

    result
end

# reduce 577 omitted

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      result = val[1]

    result
end

def _reduce_580(val, _values, result)
                      arg, = val

                      case arg
                      when Symbol then
                        result = s(:args, arg).line lexer.lineno
                      when Sexp then
                        result = arg
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end

    result
end

def _reduce_581(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << item

    result
end

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_584(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_585(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_586(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      result = args val

    result
end

# reduce 591 omitted

# reduce 592 omitted

def _reduce_593(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"

    result
end

def _reduce_594(val, _values, result)
                      result = :"**"

    result
end

def _reduce_595(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names

    result
end

def _reduce_596(val, _values, result)
                      result = self.assignable val[0], val[2]

    result
end

def _reduce_597(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_598(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_599(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_600(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 601 omitted

# reduce 602 omitted

def _reduce_603(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"

    result
end

def _reduce_604(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name

    result
end

# reduce 605 omitted

# reduce 606 omitted

def _reduce_607(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym

    result
end

def _reduce_608(val, _values, result)
                      result = val[1]

    result
end

def _reduce_609(val, _values, result)
                      result = nil

    result
end

# reduce 610 omitted

def _reduce_611(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_612(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_613(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 614 omitted

# reduce 615 omitted

def _reduce_616(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_617(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_618(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_619(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value).line sym.line

    result
end

def _reduce_620(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

# reduce 643 omitted

# reduce 644 omitted

def _reduce_645(val, _values, result)
 yyerrok
    result
end

# reduce 646 omitted

# reduce 647 omitted

def _reduce_648(val, _values, result)
 yyerrok
    result
end

def _reduce_649(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby22Parser
