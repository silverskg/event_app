#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby23Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-526,8,85,86,87,12,78,-526,-526,-526,79,80,-526,-526,-526,83,-526,81',
'82,84,33,34,76,77,-526,285,-526,-526,-526,88,31,30,116,115,117,118,-526',
'-526,22,-526,-526,-526,-526,-526,11,49,10,13,120,119,121,110,60,112',
'111,113,-101,114,122,123,3,106,107,-107,45,46,44,-526,-526,-526,-526',
'-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,602,-103,-526,-526',
'-526,43,-526,-526,36,-435,-526,62,63,-526,-526,64,-526,38,-526,-108',
'-526,48,-526,-526,-526,-526,-526,-526,-526,23,-526,287,-526,285,103',
'95,97,98,99,101,225,226,-101,96,104,-526,-526,-526,-526,-102,-526,66',
'-526,-115,93,100,102,-526,-529,108,109,285,-526,602,-526,-529,-529,-529',
'-103,602,-529,-529,-529,-100,-529,-114,602,-101,225,226,-101,648,-529',
'830,-529,-529,-529,-98,602,225,226,124,-540,859,-529,-529,-101,-529',
'-529,-529,-529,-529,-107,-103,-108,-115,-103,-110,-114,762,-112,-110',
'-112,830,128,-624,-102,829,222,127,287,285,-103,-109,-99,-529,-529,-529',
'-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,-111,-100,-529',
'-529,-529,647,-529,-529,829,287,-529,-107,-102,-529,-529,-102,-529,235',
'-529,-106,-529,223,-529,-529,-529,-529,-529,-529,-529,236,-529,-102',
'-529,651,-113,-541,-100,-109,128,-100,236,-105,-111,127,128,-529,-529',
'-529,-529,127,-529,128,-529,236,965,-100,127,-529,-303,858,225,226,-529',
'128,-529,-303,-303,-303,127,287,128,-303,-303,-101,-303,127,-103,-107',
'-624,-108,-115,256,-107,-114,-108,-115,-110,-112,-114,-100,224,-110',
'-112,-108,-303,-303,650,-303,-303,-303,-303,-303,-113,582,-93,579,578',
'577,-624,580,227,632,-625,253,-111,231,632,255,254,-111,-79,276,281',
'-621,478,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,106,107,-303,-303,-303,885,674,609,-102,-113,-303,236,-109',
'-303,-113,106,107,-109,-303,233,-303,338,-303,-303,-303,-303,-303,-303',
'-303,-625,-303,339,-303,634,633,630,632,-526,634,633,630,232,878,-115',
'-526,-303,-303,-628,-104,-621,-303,225,226,-526,-628,-628,-628,-303',
'95,702,-628,-628,-303,-628,-113,587,96,-526,-104,774,236,-621,-628,775',
'-526,-622,590,-115,-529,108,109,-212,373,-628,-628,-529,-628,-628,-628',
'-628,-628,233,231,-536,108,109,397,634,633,230,-536,582,-526,579,578',
'577,792,580,228,598,597,821,-628,400,-628,-628,-628,-628,-628,-628,-628',
'-628,-628,-628,-628,-628,-628,-628,-529,-347,-628,-628,-628,-106,675',
'-529,-347,128,-628,-114,-622,-628,127,591,-529,-347,-628,632,-628,-115',
'-628,-628,-628,-628,-628,-628,-628,232,-628,-628,-628,632,-622,-540',
'231,-628,822,402,668,-110,669,475,-628,-628,-628,-628,-102,-624,-628',
'1013,476,-628,-628,-628,-628,-628,405,-628,-628,-628,-628,-628,-111',
'-529,-347,587,422,-535,918,-628,-628,-628,-628,-628,-535,-98,590,808',
'634,633,635,-628,-628,427,-628,-628,-628,-628,-628,-541,-538,-107,634',
'633,-112,-539,-110,-538,-112,232,-628,911,-539,632,728,728,-538,727',
'730,598,597,-539,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628',
'-628,-628,-628,-109,-537,-628,-628,-628,-99,823,-628,-537,-109,-628',
'477,728,-628,-628,730,-628,591,-628,632,-628,-108,-628,-628,-628,-628',
'-628,-628,-628,-538,-628,-628,-628,479,-539,-534,128,231,634,633,640',
'127,-534,632,541,-628,-628,-628,-628,-212,-628,668,-628,539,-531,128',
'632,-628,-303,637,127,-531,-628,424,-111,-303,-303,-303,426,425,-303',
'-303,-303,582,-303,579,578,577,587,580,634,633,652,-532,-303,-303,-303',
'128,480,590,-532,-105,127,-101,-303,-303,235,-303,-303,-303,-303,-303',
'232,-294,634,633,795,-114,231,-110,-294,585,568,728,509,551,730,634',
'633,-294,595,594,598,597,476,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,290,669,-303,-303,-303,231,824,-303,-533',
'519,-303,808,613,-303,-303,-533,-303,591,-303,522,-303,611,-303,-303',
'-303,-303,-303,-303,-303,-294,-303,128,-303,524,232,582,127,579,578',
'577,587,580,627,-103,-78,-303,-303,-303,-303,628,-303,590,-303,-100',
'848,256,128,-303,-303,-112,849,127,-303,236,-113,-303,-303,-303,534',
'-109,232,-303,-303,585,-303,582,535,579,578,577,542,580,595,594,598',
'597,231,253,293,-304,236,255,254,662,-303,-303,-304,-303,-303,-303,-303',
'-303,660,231,290,-304,236,-304,-303,1044,777,598,597,748,-304,-303,881',
'885,591,779,-625,545,751,-304,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,231,231,-303,-303,-303,549,674,1035',
'1041,256,-303,236,232,-303,609,-304,779,1039,-303,415,-303,614,-303',
'-303,-303,-303,-303,-303,-303,232,-303,615,-303,-304,-303,231,639,-303',
'256,225,226,643,1035,646,-303,-303,-303,-628,-303,-625,-303,779,649',
'-303,-628,-628,-628,-303,273,274,-628,-628,-303,-628,-113,232,232,881',
'885,656,253,256,-628,-276,255,254,251,252,131,132,133,134,135,-628,-628',
'658,-628,-628,-628,-628,-628,659,236,272,271,582,666,579,578,577,232',
'580,-303,253,667,290,679,255,254,251,252,256,256,256,-628,-628,-628',
'-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,256,686,-628',
'-628,-628,748,675,236,236,236,-628,906,907,-628,751,908,122,123,-628',
'-93,-628,705,-628,-628,-628,-628,-628,-628,-628,236,-628,-628,-628,582',
'554,579,578,577,582,580,579,578,577,716,580,-628,-628,-443,-628,717',
'-628,721,724,236,-443,-443,-443,-628,731,-443,-443,-443,-628,-443,-111',
'256,131,132,133,134,135,748,-443,-443,-443,732,748,524,736,739,958,266',
'267,-443,-443,740,-443,-443,-443,-443,-443,742,1006,744,579,578,577',
'253,580,259,746,255,254,251,252,754,755,257,756,258,758,724,724,609',
'-443,-443,-443,-443,-443,-443,-443,-443,-443,-443,-443,-443,-443,-443',
'724,781,-443,-443,-443,786,796,-443,797,290,-443,-277,809,-443,-443',
'509,-443,509,-443,236,-443,826,-443,-443,-443,-443,-443,-443,-443,276',
'-443,-443,-443,582,835,579,578,577,582,580,579,578,577,837,580,-443',
'-443,-312,-443,522,-443,524,716,236,-312,-312,-312,-443,290,-312,-312',
'-312,-443,-312,256,290,582,716,579,578,577,748,580,-312,-312,256,748',
'236,876,236,266,267,885,-312,-312,724,-312,-312,-312,-312,-312,582,236',
'579,578,577,253,580,259,912,255,254,251,252,748,-278,257,1006,258,579',
'578,577,236,580,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312,-312',
'-312,-312,-312,917,748,-312,-312,-312,934,716,-312,-276,293,-312,939',
'944,-312,-312,236,-312,739,-312,947,-312,949,-312,-312,-312,-312,-312',
'-312,-312,951,-312,953,-312,131,132,133,134,135,131,132,133,134,135',
'953,236,-312,-312,-295,-312,959,-312,724,724,724,-295,-295,-295,-312',
'236,-295,-295,-295,-312,-295,256,724,236,977,-279,978,739,981,984,-295',
'-295,-295,986,988,236,990,266,267,1002,-295,-295,1003,-295,-295,-295',
'-295,-295,1015,724,724,786,1033,253,1036,259,848,255,254,251,252,1042',
'1045,953,953,953,1050,1015,739,1059,1061,-295,-295,-295,-295,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,-295,1063,1065,-295,-295,-295,1065',
'721,-295,1015,724,-295,724,-625,-295,-295,-624,-295,236,-295,953,-295',
'1015,-295,-295,-295,-295,-295,-295,-295,1088,-295,1065,-295,582,1065',
'579,578,577,587,580,1065,1065,,,,-295,-295,-295,-295,590,-295,-650,-295',
',,,,-295,-650,-650,-650,,-295,-650,-650,-650,,-650,256,,,585,,,,,-650',
'-650,-650,,595,594,598,597,266,267,,-650,-650,,-650,-650,-650,-650,-650',
',,,,,253,,259,,255,254,251,252,,,,,,,,,591,,-650,-650,-650,-650,-650',
'-650,-650,-650,-650,-650,-650,-650,-650,-650,,,-650,-650,-650,,,-650',
',290,-650,,,-650,-650,,-650,,-650,,-650,,-650,-650,-650,-650,-650,-650',
'-650,,-650,-650,-650,,,,,,,,,,,,,-650,-650,-629,-650,,-650,,,,-629,-629',
'-629,-650,,-629,-629,-629,-650,-629,256,,,,,,,,-629,-629,-629,-629,',
',,,266,267,,-629,-629,,-629,-629,-629,-629,-629,,,,,,253,,,,255,254',
'251,252,,,,,,,,,,,-629,-629,-629,-629,-629,-629,-629,-629,-629,-629',
'-629,-629,-629,-629,,,-629,-629,-629,,,-629,,,-629,,,-629,-629,,-629',
',-629,,-629,,-629,-629,-629,-629,-629,-629,-629,,-629,-629,-629,582',
',579,578,577,587,580,,,,,,-629,-629,-629,-629,590,-629,-630,-629,,,',
',-629,-630,-630,-630,,-629,-630,-630,-630,,-630,,,,585,,,,,-630,-630',
'-630,-630,595,594,598,597,,,,-630,-630,,-630,-630,-630,-630,-630,,,',
',,,,,,,,,,,,,,,,,,591,,-630,-630,-630,-630,-630,-630,-630,-630,-630',
'-630,-630,-630,-630,-630,,,-630,-630,-630,,,-630,,,-630,,,-630,-630',
',-630,,-630,,-630,,-630,-630,-630,-630,-630,-630,-630,,-630,-630,-630',
'582,,579,578,577,587,580,,,,,,-630,-630,-630,-630,590,-630,-650,-630',
',,,,-630,-650,-650,-650,,-630,-650,-650,-650,,-650,,,,585,,,,,-650,-650',
',,,,598,597,,,,-650,-650,,-650,-650,-650,-650,-650,,582,,579,578,577',
'587,580,,,,,,,,,,590,,,,591,,,,,,,,,,,,,-650,,,,,585,,-650,,,,,290,-650',
'595,594,598,597,,,,,,,,,,,,,,,,,-650,-650,,,,,,,,,,,,,-650,,591,,,-650',
'312,85,86,87,12,78,-650,,,79,80,-650,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,663,11,49,314,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,269,264,265,,249,250,,,266,267,,43,,,316,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,270,,-251,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,',
',79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,663,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,',
',266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271',
'257,23,258,,,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266',
'267,,43,,,316,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257',
'23,258,,,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108',
'109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273,274',
'268,269,264,265,,249,250,,,266,267,,43,,,316,,,62,63,,,64,,38,253,,259',
'48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104',
'236,270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11',
'49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266,267,,43',
',,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258',
',,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108,109',
'312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,256,260,261,262,263,273,274,268,269',
'264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255',
'254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,270',
',,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256',
'260,261,262,263,273,274,268,269,264,265,,249,250,,,266,267,,43,,,36',
',,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103',
'95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108,109,312,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265,',
'-651,-651,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251',
'252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263',
'273,274,268,269,264,265,,-651,-651,,,266,267,,43,,,36,,,62,63,,,64,',
'38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,8,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,11,49,10,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,-651,-651,-651,-651,273,274,,,-651,-651,,,,,,266,267,',
'43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23',
'258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,256,-651,-651,-651,-651,273,274,,,-651',
'-651,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251',
'252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,-651,-651,-651',
'-651,273,274,,,-651,-651,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,256,-651,-651,-651,-651,273,274,,,-651,-651,,,,,,266,267,,43,',
',36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,256,-651,-651,-651,-651,273,274,,,-651,-651',
',,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272',
'271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,256,-651,-651,-651,-651',
'273,274,,,-651,-651,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259',
'48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256',
'260,261,262,263,273,274,,,264,265,,,,,,266,267,,43,,,36,,,62,63,,,64',
',38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,260,261,262,263,273,274,268,,264,265,,,,,,266,267,,43',
',,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,',
'38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62',
'63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,',
'66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120',
'119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,',
',,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103',
'303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300',
',48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,',
',,,,,,,,,,,,,325,,,321,,,62,63,,,64,,320,,,,,,,,,,,,,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'335,,,,,,,,,,,,,,,,,,,,325,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,337,,,66,,,93,100,102,,,108,109,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,128,,,,,127,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,367',
',,36,,,62,63,,,64,,38,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,415,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,432,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,432,,,,48,,,,,',
',,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,236,,,,,,66,,,93',
'100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77',
',,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,',
'120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,',
',103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302',
',300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,236,,,,,,66,',
'306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,',
',,,,,,,325,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,537,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,',
',,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335',
',,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,554,,62,63,,,64',
',,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,',
'247,,,62,63,,,64,,302,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49',
',,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,616,60,112,111,617',
',114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,618,,,247,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,616,60,112',
'111,617,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,618,,,247,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120',
'119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,',
',,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103',
'303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,699,,300,,48,,,,,,,,246,,',
',,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,',
'66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331',
'332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11',
'49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,415,66,,,93,100,102,,,108,109,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302',
',300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76',
'77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,',
',321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
',49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,',
',,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,801,,,,48,,,,,',
',,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,',
',,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,699,,300,,48',
',,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104',
',,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,',
',,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,',
',,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,432,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',241,,,247,,,62,63,,,64,,699,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101',
',,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,',
',,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,302,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,',
',,,,,,,,,241,,,247,,,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,992,,,247,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,999,,,247,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,699,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,',
',,,,,,,992,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,',
',,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109',
'189,200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219',
'198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203',
',,,,,184,191,182,183,179,180,181,139,141,138,,140,,,,,,,,,173,174,,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,103,,,,,,,,,',
'104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211',
'194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209',
'202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140',
',,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196',
'195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192',
',,,208,215,210,382,381,383,380,185,204,203,,,,,,184,191,182,183,377',
'378,379,375,141,112,111,376,,114,,,,,,,173,174,,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,389,,,,,,,,166,165,,150,172',
'168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170,,,',
',178,189,200,190,213,186,206,196,195,216,217,211,194,193,188,214,218',
'219,198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204',
'203,,,,,,184,191,182,183,179,180,181,139,141,412,411,140,,413,,,,,,',
'173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,',
',,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177',
',,,,,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217',
'211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210',
'209,202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141',
',,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148',
'171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186',
'206,196,195,216,217,211,194,193,188,214,218,219,198,187,201,205,207',
'199,192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182',
'183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178',
'189,200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219',
'198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203',
',,,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,455',
'459,,,456,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,,177,,,,,,,,,,462,466,,,461,,,,,,170,,,173,174',
'178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,582,177',
'579,578,577,587,580,,,,,507,459,,,508,590,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,585,,,175,176,161,162,,,595,594,598',
'597,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177',
',,,,,,,,591,680,459,,,681,,,,,,170,,,173,174,178,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172',
'168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,682,466,,,683,,,',
',,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176',
'161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148',
'171,149,,,177,,,,,,,,,,709,459,,,710,,,,,,170,,,173,174,178,169,151',
'152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,712',
'466,,,713,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,,177,,,,,,,,,,680,459,,,681,,,,,,170,,,173,174',
'178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,,,,,,682,466,,,683,,,,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,,769,459,,,770,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,771,466,,,772,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,803,459,,,804',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,806,466,,,805,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',892,466,,,893,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,507,459,,,508,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,1069,466,,,1068,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,1072,459,,,1073',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,1074,466,,,1075,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,582,177,579,578',
'577,587,580,582,,579,578,577,587,580,,,590,,,,,170,,590,,,178,582,,579',
'578,577,587,580,,,,,585,,,,,590,,585,,595,594,598,597,,,,595,594,598',
'597,582,,579,578,577,587,580,585,582,,579,578,577,587,580,,590,236,598',
'597,,,,,590,591,,,,,,582,591,579,578,577,587,580,585,582,,579,578,577',
'587,580,585,590,,598,597,,591,,,590,,598,597,582,,579,578,577,587,580',
',,582,585,579,578,577,587,580,590,,585,595,594,598,597,,591,590,,595',
'594,598,597,,591,,,,,582,585,579,578,577,587,580,,,,585,,598,597,,,590',
',591,,,598,597,,,582,591,579,578,577,587,580,,,,,,,585,,,590,,,,,591',
'595,594,598,597,,,,582,591,579,578,577,587,580,,582,585,579,578,577',
'587,580,,590,,,,598,597,,,590,,,,582,591,579,578,577,587,580,,,,585',
',,,,,590,,585,,,598,597,,,,591,,,598,597,,,,,,,,585,,,,,,,,,,,598,597',
',,,,591,,,,,,,,591,,,,,,,,,,,,,,,,,,,,591' ]
        racc_action_table = arr = ::Array.new(26141, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'110,2,2,2,2,2,2,110,110,110,2,2,110,110,110,2,110,2,2,2,2,2,2,2,110',
'29,110,110,110,2,2,2,2,2,2,2,110,110,2,110,110,110,110,110,2,2,2,2,2',
'2,2,2,2,2,2,2,709,2,2,2,1,2,2,364,2,2,2,110,110,110,110,110,110,110',
'110,110,110,110,110,110,110,356,710,110,110,110,2,110,110,2,29,110,2',
'2,110,110,2,110,2,110,365,110,2,110,110,110,110,110,110,110,2,110,29',
'110,65,2,2,2,2,2,2,17,17,709,2,2,110,110,110,110,712,110,2,110,368,2',
'2,2,110,113,2,2,330,110,357,110,113,113,113,710,938,113,113,113,842',
'113,614,889,709,471,471,709,403,113,687,113,113,113,364,962,719,719',
'3,239,734,113,113,709,113,113,113,113,113,996,710,997,1000,710,769,1042',
'604,770,1072,1073,836,356,712,712,687,13,356,65,689,710,890,365,113',
'113,113,113,113,113,113,113,113,113,113,113,113,113,1074,842,113,113',
'113,403,113,113,836,330,113,239,712,113,113,712,113,22,113,368,113,15',
'113,113,113,113,113,113,113,471,113,712,113,406,1075,240,842,1086,357',
'842,719,614,771,357,938,113,113,113,113,938,113,889,113,22,889,842,889',
'113,461,734,789,789,113,962,113,461,461,461,962,689,604,461,461,769',
'461,604,770,996,1074,997,1000,483,996,1042,997,1000,1072,1073,1042,890',
'16,1072,1073,240,461,461,406,461,461,461,461,461,772,751,704,751,751',
'751,771,751,18,391,1075,483,1074,27,526,483,483,1074,704,25,27,616,242',
'461,461,461,461,461,461,461,461,461,461,461,461,461,461,44,44,461,461',
'461,1018,461,1018,771,1075,461,789,1086,461,1075,335,335,1086,461,439',
'461,40,461,461,461,461,461,461,461,772,461,43,461,391,391,391,641,616',
'526,526,526,27,751,242,616,461,461,462,461,616,461,355,355,616,462,462',
'462,461,92,526,462,462,461,462,461,736,92,375,772,618,49,616,462,618',
'375,617,736,439,376,44,44,477,73,462,462,376,462,462,462,462,462,20',
'19,377,335,335,99,641,641,19,377,958,616,958,958,958,641,958,19,736',
'736,680,892,100,462,462,462,462,462,462,462,462,462,462,462,462,462',
'462,617,50,462,462,462,20,462,617,50,5,462,477,617,462,5,736,617,50',
'462,393,462,20,462,462,462,462,462,462,462,19,462,462,462,794,617,41',
'238,892,681,101,803,680,804,238,892,462,462,682,462,892,462,958,238',
'892,682,682,682,462,102,682,682,682,462,682,462,617,50,978,136,378,825',
'892,682,682,682,682,378,41,978,914,393,393,393,682,682,220,682,682,682',
'682,682,42,322,41,794,794,681,323,803,322,804,238,892,794,323,398,560',
'561,322,560,561,978,978,323,682,682,682,682,682,682,682,682,682,682',
'682,682,682,682,825,379,682,682,682,42,682,682,379,914,682,241,565,682',
'682,565,682,978,682,408,682,42,682,682,682,682,682,682,682,322,682,682',
'682,243,323,380,309,324,398,398,398,309,380,644,324,682,682,682,682',
'339,682,455,682,324,381,361,395,682,683,395,361,381,682,138,682,683',
'683,683,138,138,683,683,683,354,683,354,354,354,354,354,408,408,408',
'382,683,683,683,898,244,354,382,339,898,455,683,683,248,683,683,683',
'683,683,324,326,644,644,644,339,341,455,326,354,354,856,282,341,856',
'395,395,326,354,354,354,354,341,683,683,683,683,683,683,683,683,683',
'683,683,683,683,683,286,456,683,683,683,366,683,683,383,297,683,664',
'366,683,683,383,683,354,683,298,683,366,683,683,683,683,683,683,683',
'326,683,902,683,301,341,568,902,568,568,568,568,568,385,456,315,683',
'683,683,683,385,683,568,683,664,720,484,970,683,805,456,720,970,683',
'317,683,805,805,805,318,664,366,805,805,568,805,585,319,585,585,585',
'325,585,568,568,568,568,438,484,328,542,329,484,484,438,805,805,542',
'805,805,805,805,805,438,620,334,542,1004,775,713,1004,620,739,739,585',
'775,713,757,757,568,620,713,336,585,775,713,805,805,805,805,805,805',
'805,805,805,805,805,805,805,805,991,998,805,805,805,340,805,991,998',
'343,805,349,438,805,362,542,991,998,805,363,805,367,805,805,805,805',
'805,805,805,620,805,369,805,775,713,1034,397,893,498,783,783,400,1034',
'402,893,805,805,806,805,893,805,1034,405,893,806,806,806,805,47,47,806',
'806,805,806,805,991,998,1052,1052,428,498,499,806,431,498,498,498,498',
'9,9,9,9,9,806,806,433,806,806,806,806,806,436,450,47,47,748,453,748',
'748,748,1034,748,893,499,454,463,473,499,499,499,499,485,486,487,806',
'806,806,806,806,806,806,806,806,806,806,806,806,806,488,504,806,806',
'806,748,806,515,516,532,806,790,790,806,748,790,790,790,806,533,806',
'536,806,806,806,806,806,806,806,538,806,806,806,876,543,876,876,876',
'878,876,878,878,878,546,878,806,806,30,806,548,806,555,556,557,30,30',
'30,806,562,30,30,30,806,30,806,503,313,313,313,313,313,876,30,30,30',
'563,878,566,570,571,876,503,503,30,30,573,30,30,30,30,30,574,944,575',
'944,944,944,503,944,503,584,503,503,503,503,592,596,503,599,503,601',
'605,606,607,30,30,30,30,30,30,30,30,30,30,30,30,30,30,608,622,30,30',
'30,625,648,30,651,30,30,657,665,30,30,670,30,676,30,684,30,685,30,30',
'30,30,30,30,30,688,30,30,30,959,691,959,959,959,1013,959,1013,1013,1013',
'693,1013,30,30,31,30,696,30,698,706,708,31,31,31,30,711,31,31,31,30',
'31,552,714,1015,715,1015,1015,1015,959,1015,31,31,718,1013,735,750,752',
'552,552,759,31,31,765,31,31,31,31,31,1050,768,1050,1050,1050,552,1050',
'552,798,552,552,552,552,1015,800,552,1044,552,1044,1044,1044,802,1044',
'31,31,31,31,31,31,31,31,31,31,31,31,31,31,810,1050,31,31,31,834,841',
'31,852,31,31,853,860,31,31,861,31,862,31,866,31,867,31,31,31,31,31,31',
'31,869,31,870,31,348,348,348,348,348,531,531,531,531,531,872,875,31',
'31,60,31,877,31,880,886,891,60,60,60,31,895,60,60,60,31,60,489,899,901',
'910,913,920,921,923,924,60,60,60,925,927,928,929,489,489,942,60,60,943',
'60,60,60,60,60,960,969,973,976,989,489,992,489,994,489,489,489,489,999',
'1008,1009,1010,1011,1012,1014,1024,1027,1028,60,60,60,60,60,60,60,60',
'60,60,60,60,60,60,1029,1030,60,60,60,1032,1038,60,1051,1056,60,1057',
'1068,60,60,1069,60,1071,60,1077,60,1078,60,60,60,60,60,60,60,1082,60',
'1083,60,740,1084,740,740,740,740,740,1085,1093,,,,60,60,60,60,740,60',
'457,60,,,,,60,457,457,457,,60,457,457,457,,457,490,,,740,,,,,457,457',
'457,,740,740,740,740,490,490,,457,457,,457,457,457,457,457,,,,,,490',
',490,,490,490,490,490,,,,,,,,,740,,457,457,457,457,457,457,457,457,457',
'457,457,457,457,457,,,457,457,457,,,457,,457,457,,,457,457,,457,,457',
',457,,457,457,457,457,457,457,457,,457,457,457,,,,,,,,,,,,,457,457,466',
'457,,457,,,,466,466,466,457,,466,466,466,457,466,491,,,,,,,,466,466',
'466,466,,,,,491,491,,466,466,,466,466,466,466,466,,,,,,491,,,,491,491',
'491,491,,,,,,,,,,,466,466,466,466,466,466,466,466,466,466,466,466,466',
'466,,,466,466,466,,,466,,,466,,,466,466,,466,,466,,466,,466,466,466',
'466,466,466,466,,466,466,466,742,,742,742,742,742,742,,,,,,466,466,466',
'466,742,466,467,466,,,,,466,467,467,467,,466,467,467,467,,467,,,,742',
',,,,467,467,467,467,742,742,742,742,,,,467,467,,467,467,467,467,467',
',,,,,,,,,,,,,,,,,,,,,742,,467,467,467,467,467,467,467,467,467,467,467',
'467,467,467,,,467,467,467,,,467,,,467,,,467,467,,467,,467,,467,,467',
'467,467,467,467,467,467,,467,467,467,744,,744,744,744,744,744,,,,,,467',
'467,467,467,744,467,506,467,,,,,467,506,506,506,,467,506,506,506,,506',
',,,744,,,,,506,506,,,,,744,744,,,,506,506,,506,506,506,506,506,,786',
',786,786,786,786,786,,,,,,,,,,786,,,,744,,,,,,,,,,,,,506,,,,,786,,506',
',,,,506,506,786,786,786,786,,,,,,,,,,,,,,,,,506,506,,,,,,,,,,,,,506',
',786,,,506,36,36,36,36,36,36,506,,,36,36,506,,,36,,36,36,36,36,36,36',
'36,,,,,,36,36,36,36,36,36,36,,,36,,,,,443,36,36,36,36,36,36,36,36,36',
'36,36,36,,36,36,36,,36,36,,36,36,36,443,443,443,443,443,443,443,443',
'443,443,443,,443,443,,,443,443,,36,,,36,,,36,36,,,36,,36,443,,443,36',
'443,443,443,443,443,443,443,36,443,,,,36,36,36,36,36,36,,,,36,36,,443',
',443,,,36,,,36,36,36,,,36,36,222,222,222,222,222,222,,,,222,222,,,,222',
',222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222',
',,,,449,222,222,222,222,222,222,222,222,222,222,222,222,,222,222,222',
',222,222,,222,222,222,449,449,449,449,449,449,449,449,449,449,449,,449',
'449,,,449,449,,222,,,222,,,222,222,,,222,,222,449,,449,222,449,449,449',
'449,449,449,449,222,449,,,,222,222,222,222,222,222,,,,222,222,,449,',
',,,222,,,222,222,222,,,222,222,247,247,247,247,247,247,,,,247,247,,',
',247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,',
',247,,,,,,247,247,247,247,247,247,247,247,247,247,247,247,,247,247,247',
',247,247,,247,247,247,24,24,24,24,24,24,24,24,24,24,24,,24,24,,,24,24',
',247,,,247,,,247,247,,,247,,247,24,,24,247,24,24,24,24,24,24,24,247',
'24,,,,247,247,247,247,247,247,,,,247,247,,24,,,,,247,,,247,247,247,',
',247,247,316,316,316,316,316,316,,,,316,316,,,,316,,316,316,316,316',
'316,316,316,,,,,,316,316,316,316,316,316,316,,,316,,,,,,316,316,316',
'316,316,316,316,316,316,316,316,316,,316,316,316,,316,316,,316,316,316',
'295,295,295,295,295,295,295,295,295,295,295,,295,295,,,295,295,,316',
',,316,,,316,316,,,316,,316,295,,295,316,295,295,295,295,295,295,295',
'316,295,,,,316,316,316,316,316,316,,,,316,316,,295,,,,,316,,,316,316',
'316,,,316,316,321,321,321,321,321,321,,,,321,321,,,,321,,321,321,321',
'321,321,321,321,,,,,,321,321,321,321,321,321,321,,,321,,,,,,321,321',
'321,321,321,321,321,321,321,321,321,321,,321,321,321,,321,321,,321,321',
'321,502,502,502,502,502,502,502,502,502,502,502,,502,502,,,502,502,',
'321,,,321,,,321,321,,,321,,321,502,,502,321,502,502,502,502,502,502',
'502,321,502,,,,321,321,321,321,321,321,,,,321,321,502,502,,,,,321,,',
'321,321,321,,,321,321,347,347,347,347,347,347,,,,347,347,,,,347,,347',
'347,347,347,347,347,347,,,,,,347,347,347,347,347,347,347,,,347,,,,,',
'347,347,347,347,347,347,347,347,347,347,347,347,,347,347,347,,347,347',
',347,347,347,553,553,553,553,553,553,553,553,553,553,553,,553,553,,',
'553,553,,347,,,347,,,347,347,,,347,,347,553,,553,347,553,553,553,553',
'553,553,553,347,553,,,,347,347,347,347,347,347,,,,347,347,,553,,,,,347',
',,347,347,347,,,347,347,359,359,359,359,359,359,,,,359,359,,,,359,,359',
'359,359,359,359,359,359,,,,,,359,359,359,359,359,359,359,,,359,,,,,',
'359,359,359,359,359,359,359,359,359,359,359,359,,359,359,359,,359,359',
',359,359,359,807,807,807,807,807,807,807,807,807,807,807,,807,807,,',
'807,807,,359,,,359,,,359,359,,,359,,359,807,,807,359,807,807,807,807',
'807,807,807,359,807,,,,359,359,359,359,359,359,,,,359,359,,807,,,,,359',
',,359,359,359,,,359,359,360,360,360,360,360,360,,,,360,360,,,,360,,360',
'360,360,360,360,360,360,,,,,,360,360,360,360,360,360,360,,,360,,,,,',
'360,360,360,360,360,360,360,360,360,360,360,360,,360,360,360,,360,360',
',360,360,360,919,919,919,919,919,919,919,919,919,919,919,,919,919,,',
'919,919,,360,,,360,,,360,360,,,360,,360,919,,919,360,919,919,919,919',
'919,919,919,360,919,,,,360,360,360,360,360,360,,,,360,360,,919,,,,,360',
',,360,360,360,,,360,360,600,600,600,600,600,600,,,,600,600,,,,600,,600',
'600,600,600,600,600,600,,,,,,600,600,600,600,600,600,600,,,600,,,,,',
'600,600,600,600,600,600,600,600,600,600,600,600,,600,600,600,,600,600',
',600,600,600,481,481,481,481,481,481,481,481,481,481,481,,481,481,,',
'481,481,,600,,,600,,,600,600,,,600,,600,481,,481,600,481,481,481,481',
'481,481,481,600,481,,,,600,600,600,600,600,600,,,,600,600,,,,,,,600',
',,600,600,600,,,600,600,603,603,603,603,603,603,,,,603,603,,,,603,,603',
'603,603,603,603,603,603,,,,,,603,603,603,603,603,603,603,,,603,,,,,',
'603,603,603,603,603,603,603,603,603,603,603,603,,603,603,603,,603,603',
',603,603,603,482,482,482,482,482,482,482,482,482,482,482,,482,482,,',
'482,482,,603,,,603,,,603,603,,,603,,603,482,,482,603,482,482,482,482',
'482,482,482,603,482,,,,603,603,603,603,603,603,,,,603,603,,,,,,,603',
',,603,603,603,,,603,603,653,653,653,653,653,653,,,,653,653,,,,653,,653',
'653,653,653,653,653,653,,,,,,653,653,653,653,653,653,653,,,653,,,,,',
'653,653,653,653,653,653,653,653,653,653,653,653,,653,653,653,,653,653',
',653,653,653,492,492,492,492,492,492,492,,,492,492,,,,,,492,492,,653',
',,653,,,653,653,,,653,,653,492,,492,653,492,492,492,492,492,492,492',
'653,492,,,,653,653,653,653,653,653,,,,653,653,,,,,,,653,,,653,653,653',
',,653,653,773,773,773,773,773,773,,,,773,773,,,,773,,773,773,773,773',
'773,773,773,,,,,,773,773,773,773,773,773,773,,,773,,,,,,773,773,773',
'773,773,773,773,773,773,773,773,773,,773,773,773,,773,773,,773,773,773',
'493,493,493,493,493,493,493,,,493,493,,,,,,493,493,,773,,,773,,,773',
'773,,,773,,773,493,,493,773,493,493,493,493,493,493,493,773,493,,,,773',
'773,773,773,773,773,,,,773,773,,,,,,,773,,,773,773,773,,,773,773,784',
'784,784,784,784,784,,,,784,784,,,,784,,784,784,784,784,784,784,784,',
',,,,784,784,784,784,784,784,784,,,784,,,,,,784,784,784,784,784,784,784',
'784,784,784,784,784,,784,784,784,,784,784,,784,784,784,494,494,494,494',
'494,494,494,,,494,494,,,,,,494,494,,784,,,784,,,784,784,,,784,,784,494',
',494,784,494,494,494,494,494,494,494,784,494,,,,784,784,784,784,784',
'784,,,,784,784,,,,,,,784,,,784,784,784,,,784,784,785,785,785,785,785',
'785,,,,785,785,,,,785,,785,785,785,785,785,785,785,,,,,,785,785,785',
'785,785,785,785,,,785,,,,,,785,785,785,785,785,785,785,785,785,785,785',
'785,,785,785,785,,785,785,,785,785,785,495,495,495,495,495,495,495,',
',495,495,,,,,,495,495,,785,,,785,,,785,785,,,785,,785,495,,495,785,495',
'495,495,495,495,495,495,785,495,,,,785,785,785,785,785,785,,,,785,785',
',,,,,,785,,,785,785,785,,,785,785,791,791,791,791,791,791,,,,791,791',
',,,791,,791,791,791,791,791,791,791,,,,,,791,791,791,791,791,791,791',
',,791,,,,,,791,791,791,791,791,791,791,791,791,791,791,791,,791,791',
'791,,791,791,,791,791,791,496,496,496,496,496,496,496,,,496,496,,,,',
',496,496,,791,,,791,,,791,791,,,791,,791,496,,496,791,496,496,496,496',
'496,496,496,791,496,,,,791,791,791,791,791,791,,,,791,791,,,,,,,791',
',,791,791,791,,,791,791,831,831,831,831,831,831,,,,831,831,,,,831,,831',
'831,831,831,831,831,831,,,,,,831,831,831,831,831,831,831,,,831,,,,,',
'831,831,831,831,831,831,831,831,831,831,831,831,,831,831,831,,831,831',
',831,831,831,497,497,497,497,497,497,497,,,497,497,,,,,,497,497,,831',
',,831,,,831,831,,,831,,831,497,,497,831,497,497,497,497,497,497,497',
'831,497,,,,831,831,831,831,831,831,,,,831,831,,,,,,,831,,,831,831,831',
',,831,831,850,850,850,850,850,850,,,,850,850,,,,850,,850,850,850,850',
'850,850,850,,,,,,850,850,850,850,850,850,850,,,850,,,,,,850,850,850',
'850,850,850,850,850,850,850,850,850,,850,850,850,,850,850,,850,850,850',
'500,500,500,500,500,500,500,,,500,500,,,,,,500,500,,850,,,850,,,850',
'850,,,850,,850,500,,500,850,500,500,500,500,500,500,500,850,500,,,,850',
'850,850,850,850,850,,,,850,850,,,,,,,850,,,850,850,850,,,850,850,858',
'858,858,858,858,858,,,,858,858,,,,858,,858,858,858,858,858,858,858,',
',,,,858,858,858,858,858,858,858,,,858,,,,,,858,858,858,858,858,858,858',
'858,858,858,858,858,,858,858,858,,858,858,,858,858,858,501,501,501,501',
'501,501,501,501,,501,501,,,,,,501,501,,858,,,858,,,858,858,,,858,,858',
'501,,501,858,501,501,501,501,501,501,501,858,501,,,,858,858,858,858',
'858,858,,,,858,858,,,,,,,858,,,858,858,858,,,858,858,859,859,859,859',
'859,859,,,,859,859,,,,859,,859,859,859,859,859,859,859,,,,,,859,859',
'859,859,859,859,859,,,859,,,,,,859,859,859,859,859,859,859,859,859,859',
'859,859,,859,859,859,,859,859,,859,859,859,,,,,,,,,,,,,,,,,,,,859,,',
'859,,,859,859,,,859,,859,,,,859,,,,,,,,859,,,,,859,859,859,859,859,859',
',,,859,859,,,,,,,859,,,859,859,859,,,859,859,885,885,885,885,885,885',
',,,885,885,,,,885,,885,885,885,885,885,885,885,,,,,,885,885,885,885',
'885,885,885,,,885,,,,,,885,885,885,885,885,885,885,885,885,885,885,885',
',885,885,885,,885,885,,885,885,885,,,,,,,,,,,,,,,,,,,,885,,,885,,,885',
'885,,,885,,885,,,,885,,,,,,,,885,,,,,885,885,885,885,885,885,,,,885',
'885,,,,,,,885,,,885,885,885,,,885,885,896,896,896,896,896,896,,,,896',
'896,,,,896,,896,896,896,896,896,896,896,,,,,,896,896,896,896,896,896',
'896,,,896,,,,,,896,896,896,896,896,896,896,896,896,896,896,896,,896',
'896,896,,896,896,,896,896,896,,,,,,,,,,,,,,,,,,,,896,,,896,,,896,896',
',,896,,896,,,,896,,,,,,,,896,,,,,896,896,896,896,896,896,,,,896,896',
',,,,,,896,,,896,896,896,,,896,896,935,935,935,935,935,935,,,,935,935',
',,,935,,935,935,935,935,935,935,935,,,,,,935,935,935,935,935,935,935',
',,935,,,,,,935,935,935,935,935,935,935,935,935,935,935,935,,935,935',
'935,,935,935,,935,935,935,,,,,,,,,,,,,,,,,,,,935,,,935,,,935,935,,,935',
',935,,,,935,,,,,,,,935,,,,,935,935,935,935,935,935,,,,935,935,,,,,,',
'935,,,935,935,935,,,935,935,936,936,936,936,936,936,,,,936,936,,,,936',
',936,936,936,936,936,936,936,,,,,,936,936,936,936,936,936,936,,,936',
',,,,,936,936,936,936,936,936,936,936,936,936,936,936,,936,936,936,,936',
'936,,936,936,936,,,,,,,,,,,,,,,,,,,,936,,,936,,,936,936,,,936,,936,',
',,936,,,,,,,,936,,,,,936,936,936,936,936,936,,,,936,936,,,,,,,936,,',
'936,936,936,,,936,936,966,966,966,966,966,966,,,,966,966,,,,966,,966',
'966,966,966,966,966,966,,,,,,966,966,966,966,966,966,966,,,966,,,,,',
'966,966,966,966,966,966,966,966,966,966,966,966,,966,966,966,,966,966',
',966,966,966,,,,,,,,,,,,,,,,,,,,966,,,966,,,966,966,,,966,,966,,,,966',
',,,,,,,966,,,,,966,966,966,966,966,966,,,,966,966,,,,,,,966,,,966,966',
'966,,,966,966,995,995,995,995,995,995,,,,995,995,,,,995,,995,995,995',
'995,995,995,995,,,,,,995,995,995,995,995,995,995,,,995,,,,,,995,995',
'995,995,995,995,995,995,995,995,995,995,,995,995,995,,995,995,,995,995',
'995,,,,,,,,,,,,,,,,,,,,995,,,995,,,995,995,,,995,,995,,,,995,,,,,,,',
'995,,,,,995,995,995,995,995,995,,,,995,995,,,,,,,995,,,995,995,995,',
',995,995,1016,1016,1016,1016,1016,1016,,,,1016,1016,,,,1016,,1016,1016',
'1016,1016,1016,1016,1016,,,,,,1016,1016,1016,1016,1016,1016,1016,,,1016',
',,,,,1016,1016,1016,1016,1016,1016,1016,1016,1016,1016,1016,1016,,1016',
'1016,1016,,1016,1016,,1016,1016,1016,,,,,,,,,,,,,,,,,,,,1016,,,1016',
',,1016,1016,,,1016,,1016,,,,1016,,,,,,,,1016,,,,,1016,1016,1016,1016',
'1016,1016,,,,1016,1016,,,,,,,1016,,,1016,1016,1016,,,1016,1016,1021',
'1021,1021,1021,1021,1021,,,,1021,1021,,,,1021,,1021,1021,1021,1021,1021',
'1021,1021,,,,,,1021,1021,1021,1021,1021,1021,1021,,,1021,,,,,,1021,1021',
'1021,1021,1021,1021,1021,1021,1021,1021,1021,1021,,1021,1021,1021,,1021',
'1021,,1021,1021,1021,,,,,,,,,,,,,,,,,,,,1021,,,1021,,,1021,1021,,,1021',
',1021,,,,1021,,,,,,,,1021,,,,,1021,1021,1021,1021,1021,1021,,,,1021',
'1021,,,,,,,1021,,,1021,1021,1021,,,1021,1021,1023,1023,1023,1023,1023',
'1023,,,,1023,1023,,,,1023,,1023,1023,1023,1023,1023,1023,1023,,,,,,1023',
'1023,1023,1023,1023,1023,1023,,,1023,,,,,,1023,1023,1023,1023,1023,1023',
'1023,1023,1023,1023,1023,1023,,1023,1023,1023,,1023,1023,,1023,1023',
'1023,,,,,,,,,,,,,,,,,,,,1023,,,1023,,,1023,1023,,,1023,,1023,,,,1023',
',,,,,,,1023,,,,,1023,1023,1023,1023,1023,1023,,,,1023,1023,,,,,,,1023',
',,1023,1023,1023,,,1023,1023,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,',
',,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8',
',,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8',
',,,8,8,,,,,,,8,,,8,8,8,,,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23',
'23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23',
'23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23',
',,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23',
'23,23,,,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,',
',32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32',
'32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,',
'32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32',
',,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33',
'33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,',
'33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33',
',,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33',
'33,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34',
'34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34',
',34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,',
',34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,37',
'37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37',
'37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,',
',,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37',
'37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,',
'38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38',
'38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,',
'38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,',
',38,,,38,38,38,,,38,38,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45',
'45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45',
',45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,',
',,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45',
',,45,45,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46',
'46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46',
'46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,',
'46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,48,48',
'48,,48,,,,48,48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48',
',,48,,,,,,,48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48,,48,48,48,',
',,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48',
'48,48,48,,,,48,48,,,,,,,48,,,48,48,48,,,48,48,62,62,62,62,62,,,,62,62',
',,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,62,62',
',62,62,62,62,62,62,62,62,62,,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,',
',,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62',
',,,62,62,,,,,,,62,,,62,62,62,,,62,62,67,67,67,,67,,,,67,67,,,,67,,67',
'67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67',
'67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67',
',,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,',
'67,,,67,67,67,,,67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68',
'68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68',
',68,68,68,,68,68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,',
',,,,68,,,,,,,,68,,,,,68,68,68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68',
',,68,68,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71',
'71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71',
'71,,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,',
'71,,,,,71,71,71,71,71,71,,,,71,71,71,,,,,71,71,,,71,71,71,,,71,71,72',
'72,72,,72,,,,72,72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72',
'72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,',
',,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,72,,,,,,,,,,,,,,,,,72,72,72,72',
'72,72,,,,72,72,,,,,,,72,,,72,72,72,,,72,72,126,126,126,126,126,,,,126',
'126,,,,126,,126,126,126,126,126,126,126,,,,,,126,126,126,126,126,126',
'126,,,126,,,,,,126,126,126,126,126,126,126,126,126,126,126,126,,126',
'126,126,,126,126,,126,126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126,126',
',,126,,126,,,,126,,,,,,,,126,,,,,126,126,126,126,126,126,,,,126,126',
',,,,,126,126,,,126,126,126,,,126,126,131,131,131,,131,,,,131,131,,,',
'131,,131,131,131,131,131,131,131,,,,,,131,131,131,131,131,131,131,,',
'131,,,,,,,131,,,131,131,131,131,131,131,131,131,,131,131,131,,131,131',
',131,131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131,131,,,131,,,,,,131,',
',,,,,,131,,,,,131,131,131,131,131,131,,,,131,131,,,,,,,131,,,131,131',
'131,,,131,131,132,132,132,,132,,,,132,132,,,,132,,132,132,132,132,132',
'132,132,,,,,,132,132,132,132,132,132,132,,,132,,,,,,,132,,,132,132,132',
'132,132,132,132,132,,132,132,132,,132,132,,132,132,132,,,,,,,,,,,,,',
',,,,,,132,,,132,,,132,132,,,132,,,,,,132,,,,,,,,132,,,,,132,132,132',
'132,132,132,,,,132,132,,,,,,,132,,,132,132,132,,,132,132,133,133,133',
',133,,,,133,133,,,,133,,133,133,133,133,133,133,133,,,,,,133,133,133',
'133,133,133,133,,,133,,,,,,,133,,,133,133,133,133,133,133,133,133,,133',
'133,133,,133,133,,133,133,133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133',
',,133,,,,,,133,,,,,,,,133,,,,,133,133,133,133,133,133,,,,133,133,,,',
',,,133,,,133,133,133,,,133,133,134,134,134,,134,,,,134,134,,,,134,,134',
'134,134,134,134,134,134,,,,,,134,134,134,134,134,134,134,,,134,,,,,',
',134,,,134,134,134,134,134,134,134,134,,134,134,134,,134,134,,134,134',
'134,,,,,,,,,,,,,,,,,,,,134,,,134,,,134,134,,,134,,,,,,134,,,,,,,,134',
',,,,134,134,134,134,134,134,,,,134,134,,,,,,,134,,,134,134,134,,,134',
'134,135,135,135,135,135,,,,135,135,,,,135,,135,135,135,135,135,135,135',
',,,,,135,135,135,135,135,135,135,,,135,,,,,,135,135,,135,135,135,135',
'135,135,135,135,135,,135,135,135,,135,135,,135,135,135,,,,,,,,,,,,,',
',,,,,,135,,,135,,,135,135,,,135,,135,,,,135,,,,,,,,135,,,,,135,135,135',
'135,135,135,,,,135,135,,,,,,,135,,,135,135,135,,,135,135,223,223,223',
',223,,,,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223,223',
'223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223,,223',
'223,223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223',
',,223,,223,,,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223',
',,,,,,223,,,223,223,223,,,223,223,224,224,224,,224,,,,224,224,,,,224',
',224,224,224,224,224,224,224,,,,,,224,224,224,224,224,224,224,,,224',
',,,,,,224,,,224,224,224,224,224,224,224,224,,224,224,224,,224,224,,224',
'224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,224,,,,224,,,',
',,,,224,,,,,224,224,224,224,224,224,,,,224,224,,,,,,,224,,,224,224,224',
',,224,224,225,225,225,,225,,,,225,225,,,,225,,225,225,225,225,225,225',
'225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225',
'225,225,225,225,,225,225,225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,',
',,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225',
'225,225,,,,225,225,,,,,,,225,,,225,225,225,,,225,225,226,226,226,,226',
',,,226,226,,,,226,,226,226,226,226,226,226,226,,,,,,226,226,226,226',
'226,226,226,,,226,,,,,,,226,,,226,226,226,226,226,226,226,226,,226,226',
'226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226',
',,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,,,,,,,226',
',,226,226,226,,,226,226,227,227,227,,227,,,,227,227,,,,227,,227,227',
'227,227,227,227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227',
',,227,227,227,227,227,227,227,227,,227,227,227,,227,227,,227,227,227',
',,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,',
',227,227,227,227,227,227,,,,227,227,,,,,,,227,,,227,227,227,,,227,227',
'228,228,228,,228,,,,228,228,,,,228,,228,228,228,228,228,228,228,,,,',
',228,228,228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228',
'228,228,228,228,228,228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228',
',,228,,,228,228,,,228,,228,,228,,228,,,,,,,,228,,,,,228,228,228,228',
'228,228,,,,228,228,,,,,,,228,,228,228,228,228,,,228,228,233,233,233',
',233,,,,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233',
'233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233',
'233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233',
',,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,',
',,,233,,,233,233,233,,,233,233,234,234,234,,234,,,,234,234,,,,234,,234',
'234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,',
',234,,,234,234,234,234,234,234,234,234,,234,234,234,,234,234,,234,234',
'234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234',
',,,,234,234,234,234,234,234,,,,234,234,,,,,,,234,,,234,234,234,,,234',
'234,235,235,235,,235,,,,235,235,,,,235,,235,235,235,235,235,235,235',
',,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235',
'235,235,235,,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235',
',,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235',
',,,235,235,235,,,,,,235,,,235,235,235,,,235,235,246,246,246,,246,,,',
'246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246',
'246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246',
',246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,',
',,,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246',
',,246,246,246,,,246,246,249,249,249,,249,,,,249,249,,,,249,,249,249',
'249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249',
',,249,249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249,249',
',,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,',
',249,249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249',
'250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,',
',250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250',
'250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,',
'250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250',
',,,250,250,,,,,,,250,,,250,250,250,,,250,250,251,251,251,,251,,,,251',
'251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251',
'251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,',
'251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,',
',251,251,251,,,251,251,252,252,252,,252,,,,252,252,,,,252,,252,252,252',
'252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252',
'252,252,252,252,252,252,252,,252,252,252,,252,252,,252,252,252,,,,,',
',,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252',
'252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,,252,252,253',
'253,253,,253,,,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253',
'253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253',
'253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253',
',,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253',
'253,,,,,,,253,,,253,253,253,,,253,253,254,254,254,,254,,,,254,254,,',
',254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,',
',254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254',
',254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,',
',,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254',
'254,,,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255',
'255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255',
'255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,',
',,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255',
'255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255,255,256,256,256',
',256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256',
'256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256',
'256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256',
',,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,',
',,,256,,,256,256,256,,,256,256,257,257,257,,257,,,,257,257,,,,257,,257',
'257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,',
',257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257',
'257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257',
',,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257',
'257,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258,258,258',
',,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258',
'258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258',
',,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258',
',,,258,258,,,,,,,258,,,258,258,258,,,258,258,259,259,259,,259,,,,259',
'259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259',
'259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,',
'259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,',
',,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,',
',259,259,259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260,260',
'260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260',
'260,260,260,260,260,260,260,,260,260,260,,260,260,,260,260,260,,,,,',
',,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260',
'260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260,260,261',
'261,261,,261,,,,261,261,,,,261,,261,261,261,261,261,261,261,,,,,,261',
'261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261',
'261,,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261',
',,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261',
'261,,,,,,,261,,,261,261,261,,,261,261,262,262,262,,262,,,,262,262,,',
',262,,262,262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262,',
',262,,,,,,,262,,,262,262,262,262,262,262,262,262,,262,262,262,,262,262',
',262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,',
',,,,,,262,,,,,262,262,262,262,262,262,,,,262,262,,,,,,,262,,,262,262',
'262,,,262,262,263,263,263,,263,,,,263,263,,,,263,,263,263,263,263,263',
'263,263,,,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263,263,263',
'263,263,263,263,263,,263,263,263,,263,263,,263,263,263,,,,,,,,,,,,,',
',,,,,,263,,,263,,,263,263,,,263,,,,,,263,,,,,,,,263,,,,,263,263,263',
'263,263,263,,,,263,263,,,,,,,263,,,263,263,263,,,263,263,264,264,264',
',264,,,,264,264,,,,264,,264,264,264,264,264,264,264,,,,,,264,264,264',
'264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264',
'264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264',
',,264,,,,,,264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,,,',
',,,264,,,264,264,264,,,264,264,265,265,265,,265,,,,265,265,,,,265,,265',
'265,265,265,265,265,265,,,,,,265,265,265,265,265,265,265,,,265,,,,,',
',265,,,265,265,265,265,265,265,265,265,,265,265,265,,265,265,,265,265',
'265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265,,,,,,,,265',
',,,,265,265,265,265,265,265,,,,265,265,,,,,,,265,,,265,265,265,,,265',
'265,266,266,266,,266,,,,266,266,,,,266,,266,266,266,266,266,266,266',
',,,,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266',
'266,266,266,,266,266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266',
',,266,,,266,266,,,266,,,,,,266,,,,,,,,266,,,,,266,266,266,266,266,266',
',,,266,266,,,,,,,266,,,266,266,266,,,266,266,267,267,267,,267,,,,267',
'267,,,,267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267',
'267,,,267,,,,,,,267,,,267,267,267,267,267,267,267,267,,267,267,267,',
'267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,',
',,,267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267,267,,,,,,,267,',
',267,267,267,,,267,267,268,268,268,,268,,,,268,268,,,,268,,268,268,268',
'268,268,268,268,,,,,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268',
'268,268,268,268,268,268,268,,268,268,268,,268,268,,268,268,268,,,,,',
',,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,,,,,268,,,,,,,,268,,,,,268',
'268,268,268,268,268,,,,268,268,,,,,,,268,,,268,268,268,,,268,268,269',
'269,269,,269,,,,269,269,,,,269,,269,269,269,269,269,269,269,,,,,,269',
'269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269,269,269,269,269',
'269,,269,269,269,,269,269,,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269',
',,269,269,,,269,,,,,,269,,,,,,,,269,,,,,269,269,269,269,269,269,,,,269',
'269,,,,,,,269,,,269,269,269,,,269,269,270,270,270,,270,,,,270,270,,',
',270,,270,270,270,270,270,270,270,,,,,,270,270,270,270,270,270,270,',
',270,,,,,,,270,,,270,270,270,270,270,270,270,270,,270,270,270,,270,270',
',270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,,,,,,270,',
',,,,,,270,,,,,270,270,270,270,270,270,,,,270,270,,,,,,,270,,,270,270',
'270,,,270,270,275,275,275,,275,,,,275,275,,,,275,,275,275,275,275,275',
'275,275,,,,,,275,275,275,275,275,275,275,,,275,,,,,,,275,,,275,275,275',
'275,275,275,275,275,,275,275,275,,275,275,,275,275,275,,,,,,,,,,,,,',
',,,,,,275,,,275,,,275,275,,,275,,,,,,275,,,,,,,,275,,,,,275,275,275',
'275,275,275,,,,275,275,,,,,,,275,,,275,275,275,,,275,275,283,283,283',
',283,,,,283,283,,,,283,,283,283,283,283,283,283,283,,,,,,283,283,283',
'283,283,283,283,,,283,,,,,,,283,,,283,283,283,283,283,283,283,283,283',
'283,283,283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283',
'283,,,283,,283,,283,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283',
'283,,,,,,,283,,283,283,283,283,,,283,283,290,290,290,,290,,,,290,290',
',,,290,,290,290,290,290,290,290,290,,,,,,290,290,290,290,290,290,290',
',,290,,,,,,,290,,,290,290,290,290,290,290,290,290,290,290,290,290,,290',
'290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,,290,,290,',
'290,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290,290,,,,,,,290',
',290,290,290,290,,,290,290,293,293,293,,293,,,,293,293,,,,293,,293,293',
'293,293,293,293,293,,,,,,293,293,293,293,293,293,293,,,293,,,,,,,293',
',,293,293,293,293,293,293,293,293,293,293,293,293,,293,293,,293,293',
'293,,,,,,,,,,,,,,,,,,,,293,,,293,,,293,293,,,293,,293,,293,,293,,,,',
',,,293,,,,,293,293,293,293,293,293,,,,293,293,293,,,,,,293,,293,293',
'293,293,,,293,293,300,300,300,,300,,,,300,300,,,,300,,300,300,300,300',
'300,300,300,,,,,,300,300,300,300,300,300,300,,,300,,,,,,,300,,,300,300',
'300,300,300,300,300,300,,300,300,300,,300,300,,300,300,300,,,,,,,,,',
',,,,,,,,,,300,,,300,,,300,300,,,300,,,,,,300,,,,,,,,300,,,,,300,300',
'300,300,300,300,,,,300,300,,,,,,,300,,,300,300,300,,,300,300,302,302',
'302,,302,,,,302,302,,,,302,,302,302,302,302,302,302,302,,,,,,302,302',
'302,302,302,302,302,,,302,,,,,,,302,,,302,302,302,302,302,302,302,302',
',302,302,302,,302,302,,302,302,302,,,,,,,,,,,,,,,,,,,,302,,,302,,,302',
'302,,,302,,,,,,302,,,,,,,,302,,,,,302,302,302,302,302,302,,,,302,302',
',,,,,,302,,,302,302,302,,,302,302,305,305,305,,305,,,,305,305,,,,305',
',305,305,305,305,305,305,305,,,,,,305,305,305,305,305,305,305,,,305',
',,,,,,305,,,305,305,305,305,305,305,305,305,,305,305,305,,305,305,,305',
'305,305,,,,,,,,,,,,,,,,,,,,305,,,305,,,305,305,,,305,,,,,,305,,,,,,',
',305,,,,,305,305,305,305,305,305,,,,305,305,,,,,,,305,,,305,305,305',
',,305,305,306,306,306,,306,,,,306,306,,,,306,,306,306,306,306,306,306',
'306,,,,,,306,306,306,306,306,306,306,,,306,,,,,,,306,,,306,306,306,306',
'306,306,306,306,,306,306,306,,306,306,,306,306,306,,,,,,,,,,,,,,,,,',
',,306,,,306,,,306,306,,,306,,,,,,306,,,,,,,,306,,,,,306,306,306,306',
'306,306,,,,306,306,,,,,,,306,,,306,306,306,,,306,306,312,312,312,312',
'312,,,,312,312,,,,312,,312,312,312,312,312,312,312,,,,,,312,312,312',
'312,312,312,312,,,312,,,,,,312,312,,312,312,312,312,312,312,312,312',
'312,,312,312,312,,312,312,,312,312,312,,,,,,,,,,,,,,,,,,,,312,,,312',
',,312,312,,,312,,312,,,,312,,,,,,,,312,,,,,312,312,312,312,312,312,',
',,312,312,,,,,,,312,,,312,312,312,,,312,312,320,320,320,,320,,,,320',
'320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320,320,320,320,320',
'320,,,320,,,,,,,320,,,320,320,320,320,320,320,320,320,,320,320,320,',
'320,320,,,,320,,,,,,,,,,,,,,,,,,,,320,,,320,,,320,320,,,320,,,,,,,,',
',,,,,,,,,,320,320,320,320,320,320,,,,320,320,,,,320,,,320,,,320,320',
'320,,,320,320,337,337,337,,337,,,,337,337,,,,337,,337,337,337,337,337',
'337,337,,,,,,337,337,337,337,337,337,337,,,337,,,,,,,337,,,337,337,337',
'337,337,337,337,337,,337,337,337,,337,337,,,,337,,,,,,,,,,,,,,,,,,,',
'337,,,337,,,337,337,,,337,,,,,,,,,,,,,,,,,,,337,337,337,337,337,337',
',,,337,337,,,,,,,337,,,337,337,337,,,337,337,344,344,344,,344,,,,344',
'344,,,,344,,344,344,344,344,344,344,344,,,,,,344,344,344,344,344,344',
'344,,,344,,,,,,,344,,,344,344,344,344,344,344,344,344,,344,344,344,',
'344,344,,344,344,344,,,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344,,',
',,,344,,,,,,,,344,,,,,344,344,344,344,344,344,,,,344,344,,,,,,,344,',
',344,344,344,,,344,344,346,346,346,,346,,,,346,346,,,,346,,346,346,346',
'346,346,346,346,,,,,,346,346,346,346,346,346,346,,,346,,,,,,,346,,,346',
'346,346,346,346,346,346,346,,346,346,346,,346,346,,346,346,346,,,,,',
',,,,,,,,,,,,,,346,,,346,346,,346,346,,,346,,,,,,346,,,,,,,,346,,,,,346',
'346,346,346,346,346,,,,346,346,,,,,,,346,,,346,346,346,,,346,346,350',
'350,350,,350,,,,350,350,,,,350,,350,350,350,350,350,350,350,,,,,,350',
'350,350,350,350,350,350,,,350,,,,,,,350,,,350,350,350,350,350,350,350',
'350,350,350,350,350,,350,350,,350,350,350,,,,,,,,,,,,,,,,,,,,350,,,350',
',,350,350,,,350,,350,,,,350,,,,,,,,350,,,,,350,350,350,350,350,350,',
',,350,350,,,,,,,350,,350,350,350,350,,,350,350,351,351,351,,351,,,,351',
'351,,,,351,,351,351,351,351,351,351,351,,,,,,351,351,351,351,351,351',
'351,,,351,,,,,,,351,,,351,351,351,351,351,351,351,351,351,351,351,351',
',351,351,,351,351,351,,,,,,,,,,,,,,,,,,,,351,,,351,,,351,351,,,351,',
',,,,351,,,,,,,,351,,,,,351,351,351,351,351,351,,,,351,351,,,,,,,351',
',351,351,351,351,,,351,351,358,358,358,,358,,,,358,358,,,,358,,358,358',
'358,358,358,358,358,,,,,,358,358,358,358,358,358,358,,,358,,,,,,,358',
',,358,358,358,358,358,358,358,358,,358,358,358,,358,358,,358,358,358',
',,,,,,,,,,,,,,,,,,,358,,,358,,,358,358,,,358,,,,,,358,,,,,,,,358,,,',
',358,358,358,358,358,358,,,,358,358,,,,,,,358,,,358,358,358,,,358,358',
'372,372,372,,372,,,,372,372,,,,372,,372,372,372,372,372,372,372,,,,',
',372,372,372,372,372,372,372,,,372,,,,,,,372,,,372,372,372,372,372,372',
'372,372,,372,372,372,,372,372,,,,372,,,,,,,,,,,,,,,,,,,,372,,,372,,',
'372,372,,,372,,,,,,,,,,,,,,,,,,,372,372,372,372,372,372,,,,372,372,',
',,,,,372,,,372,372,372,,,372,372,374,374,374,,374,,,,374,374,,,,374',
',374,374,374,374,374,374,374,,,,,,374,374,374,374,374,374,374,,,374',
',,,,,,374,,,374,374,374,374,374,374,374,374,,374,374,374,,374,374,,',
',374,,,,,,,,,,,,,,,,,,,,374,,,374,,,374,374,,,374,,,,,,,,,,,,,,,,,,',
'374,374,374,374,374,374,,,,374,374,,,,,,,374,,,374,374,374,,,374,374',
'432,432,432,,432,,,,432,432,,,,432,,432,432,432,432,432,432,432,,,,',
',432,432,432,432,432,432,432,,,432,,,,,,,432,,,432,432,432,432,432,432',
'432,432,,432,432,432,,432,432,,432,432,432,,,,,,,,,,,,,,,,,,,,432,,',
'432,,,432,432,,,432,,,,,,432,,,,,,,,432,,,,,432,432,432,432,432,432',
',,,432,432,,,,,,,432,,,432,432,432,,,432,432,476,476,476,,476,,,,476',
'476,,,,476,,476,476,476,476,476,476,476,,,,,,476,476,476,476,476,476',
'476,,,476,,,,,,,476,,,476,476,476,476,476,476,476,476,476,476,476,476',
',476,476,,476,476,476,,,,,,,,,,,,,,,,,,,,476,,,476,,,476,476,,,476,',
'476,,476,,476,,,,,,,,476,,,,,476,476,476,476,476,476,,,,476,476,,,,',
',,476,,476,476,476,476,,,476,476,478,478,478,,478,,,,478,478,,,,478',
',478,478,478,478,478,478,478,,,,,,478,478,478,478,478,478,478,,,478',
',,,,,,478,,,478,478,478,478,478,478,478,478,,478,478,478,,478,478,,478',
'478,478,,,,,,,,,,,,,,,,,,,,478,,,478,,,478,478,,,478,,,,,,478,,,,,,',
',478,,,,,478,478,478,478,478,478,,,,478,478,,,,,,,478,,,478,478,478',
',,478,478,479,479,479,,479,,,,479,479,,,,479,,479,479,479,479,479,479',
'479,,,,,,479,479,479,479,479,479,479,,,479,,,,,,,479,,,479,479,479,479',
'479,479,479,479,,479,479,479,,479,479,,479,479,479,,,,,,,,,,,,,,,,,',
',,479,,,479,,,479,479,,,479,,,,,,479,,,,,,,,479,,,,,479,479,479,479',
'479,479,,,,479,479,,,,,,,479,,,479,479,479,,,479,479,480,480,480,,480',
',,,480,480,,,,480,,480,480,480,480,480,480,480,,,,,,480,480,480,480',
'480,480,480,,,480,,,,,,,480,,,480,480,480,480,480,480,480,480,,480,480',
'480,,480,480,,480,480,480,,,,,,,,,,,,,,,,,,,,480,,,480,,,480,480,,,480',
',,,,,480,,,,,,,,480,,,,,480,480,480,480,480,480,,,,480,480,,,,,,,480',
',,480,480,480,,,480,480,519,519,519,,519,,,,519,519,,,,519,,519,519',
'519,519,519,519,519,,,,,,519,519,519,519,519,519,519,,,519,,,,,,,519',
',,519,519,519,519,519,519,519,519,519,519,519,519,,519,519,,519,519',
'519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,519,,519,,519,,,,',
',,,519,,,,,519,519,519,519,519,519,,,,519,519,,,,,,,519,,519,519,519',
'519,,,519,519,522,522,522,,522,,,,522,522,,,,522,,522,522,522,522,522',
'522,522,,,,,,522,522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,522',
'522,522,522,522,522,522,522,522,522,,522,522,,522,522,522,,,,,,,,,,',
',,,,,,,,,522,,,522,,,522,522,,,522,,,,522,,522,,,,,,,,522,,,,,522,522',
'522,522,522,522,,,,522,522,,,,,,,522,,522,522,522,522,,,522,522,524',
'524,524,,524,,,,524,524,,,,524,,524,524,524,524,524,524,524,,,,,,524',
'524,524,524,524,524,524,,,524,,,,,,,524,,,524,524,524,524,524,524,524',
'524,,524,524,524,,524,524,,524,524,524,,,,,,,,,,,,,,,,,,,,524,,,524',
',,524,524,,,524,,,,,,524,,,,,,,,524,,,,,524,524,524,524,524,524,,,,524',
'524,,,,,,,524,,,524,524,524,,,524,524,530,530,530,530,530,,,,530,530',
',,,530,,530,530,530,530,530,530,530,,,,,,530,530,530,530,530,530,530',
',,530,,,,,,530,530,530,530,530,530,530,530,530,530,530,530,,530,530',
'530,,530,530,,530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,,530',
',530,,,,530,,,,,,,,530,,,,,530,530,530,530,530,530,,,,530,530,,,,,,530',
'530,,,530,530,530,,,530,530,537,537,537,,537,,,,537,537,,,,537,,537',
'537,537,537,537,537,537,,,,,,537,537,537,537,537,537,537,,,537,,,,,',
',537,,,537,537,537,537,537,537,537,537,,537,537,537,,537,537,,,,537',
',,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,,537,,,,,,,,,,,,,,,,,,,537,537',
'537,537,537,537,,,,537,537,,,,,,,537,,,537,537,537,,,537,537,539,539',
'539,,539,,,,539,539,,,,539,,539,539,539,539,539,539,539,,,,,,539,539',
'539,539,539,539,539,,,539,,,,,,,539,,,539,539,539,539,539,539,539,539',
'539,539,539,539,,539,539,,539,539,539,,,,,,,,,,,,,,,,,,,,539,,,539,',
',539,539,,,539,,539,,539,,539,,,,,,,,539,,,,,539,539,539,539,539,539',
',,,539,539,,,,,,,539,,539,539,539,539,,,539,539,545,545,545,,545,,,',
'545,545,,,,545,,545,545,545,545,545,545,545,,,,,,545,545,545,545,545',
'545,545,,,545,,,,,,,545,,,545,545,545,545,545,545,545,545,,545,545,545',
',545,545,,,,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,,545,,,,,,,',
',,,,,,,,,,,545,545,545,545,545,545,,,,545,545,,,,,,,545,,,545,545,545',
',,545,545,549,549,549,,549,,,,549,549,,,,549,,549,549,549,549,549,549',
'549,,,,,,549,549,549,549,549,549,549,,,549,,,,,,,549,,,549,549,549,549',
'549,549,549,549,,549,549,549,,549,549,,549,549,549,,,,,,,,,,,,,,,,,',
',,549,,,549,,,549,549,,,549,,,,,,549,,,,,,,,549,,,,,549,549,549,549',
'549,549,,,,549,549,,,,,,,549,,,549,549,549,,,549,549,554,554,554,,554',
',,,554,554,,,,554,,554,554,554,554,554,554,554,,,,,,554,554,554,554',
'554,554,554,,,554,,,,,,,554,,,554,554,554,554,554,554,554,554,,554,554',
'554,,554,554,,554,554,554,,,,,,,,,,,,,,,,,,,,554,,,554,,,554,554,,,554',
',,,,,554,,,,,,,,554,,,,,554,554,554,554,554,554,,,,554,554,,,,,,,554',
',,554,554,554,,,554,554,588,588,588,,588,,,,588,588,,,,588,,588,588',
'588,588,588,588,588,,,,,,588,588,588,588,588,588,588,,,588,,,,,,,588',
',,588,588,588,588,588,588,588,588,,588,588,588,,588,588,,588,588,588',
',,,,,,,,,,,,,,,,,,,588,,,588,,,588,588,,,588,,,,,,588,,,,,,,,588,,,',
',588,588,588,588,588,588,,,,588,588,,,,,,,588,,,588,588,588,,,588,588',
'611,611,611,,611,,,,611,611,,,,611,,611,611,611,611,611,611,611,,,,',
',611,611,611,611,611,611,611,,,611,,,,,,,611,,,611,611,611,611,611,611',
'611,611,611,611,611,611,,611,611,,611,611,611,,,,,,,,,,,,,,,,,,,,611',
',,611,,,611,611,,,611,,611,,611,,611,,,,,,,,611,,,,,611,611,611,611',
'611,611,,,,611,611,,,,,,,611,,611,611,611,611,,,611,611,623,623,623',
',623,,,,623,623,,,,623,,623,623,623,623,623,623,623,,,,,,623,623,623',
'623,623,623,623,,,623,,,,,,,623,,,623,623,623,623,623,623,623,623,,623',
'623,623,,623,623,,623,623,623,,,,,,,,,,,,,,,,,,,,623,,,623,,,623,623',
',,623,,,,,,623,,,,,,,,623,,,,,623,623,623,623,623,623,,,,623,623,,,',
',,,623,,,623,623,623,,,623,623,629,629,629,,629,,,,629,629,,,,629,,629',
'629,629,629,629,629,629,,,,,,629,629,629,629,629,629,629,,,629,,,,,',
',629,,,629,629,629,629,629,629,629,629,,629,629,629,,629,629,,629,629',
'629,,,,,,,,,,,,,,,,,,,,629,,,629,,,629,629,,,629,,,,,,629,,,,,,,,629',
',,,,629,629,629,629,629,629,,,,629,629,,,,,,,629,,,629,629,629,,,629',
'629,658,658,658,,658,,,,658,658,,,,658,,658,658,658,658,658,658,658',
',,,,,658,658,658,658,658,658,658,,,658,,,,,,,658,,,658,658,658,658,658',
'658,658,658,,658,658,658,,658,658,,658,658,658,,,,,,,,,,,,,,,,,,,,658',
',,658,,,658,658,,,658,,658,,,,658,,,,,,,,658,,,,,658,658,658,658,658',
'658,,,,658,658,,,,,,,658,,,658,658,658,,,658,658,659,659,659,,659,,',
',659,659,,,,659,,659,659,659,659,659,659,659,,,,,,659,659,659,659,659',
'659,659,,,659,,,,,,,659,,,659,659,659,659,659,659,659,659,,659,659,659',
',659,659,,659,659,659,,,,,,,,,,,,,,,,,,,,659,,,659,,,659,659,,,659,',
',,,,659,,,,,,,,659,,,,,659,659,659,659,659,659,,,,659,659,,,,,,,659',
',,659,659,659,,,659,659,660,660,660,,660,,,,660,660,,,,660,,660,660',
'660,660,660,660,660,,,,,,660,660,660,660,660,660,660,,,660,,,,,,,660',
',,660,660,660,660,660,660,660,660,660,660,660,660,,660,660,,660,660',
'660,,,,,,,,,,,,,,,,,,,,660,,,660,,,660,660,,,660,,660,,660,,660,,,,',
',,,660,,,,,660,660,660,660,660,660,,,,660,660,,,,,,,660,,660,660,660',
'660,,,660,660,663,663,663,,663,,,,663,663,,,,663,,663,663,663,663,663',
'663,663,,,,,,663,663,663,663,663,663,663,,,663,,,,,,,663,,,663,663,663',
'663,663,663,663,663,,663,663,663,,663,663,,663,663,663,,,,,,,,,,,,,',
',,,,,,663,,,663,,,663,663,,,663,,,,,,663,,,,,,,,663,,,,,663,663,663',
'663,663,663,,,,663,663,,,,,,,663,,,663,663,663,,,663,663,666,666,666',
',666,,,,666,666,,,,666,,666,666,666,666,666,666,666,,,,,,666,666,666',
'666,666,666,666,,,666,,,,,,,666,,,666,666,666,666,666,666,666,666,666',
'666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666',
'666,,,666,,666,,666,,666,,,,,,,,666,,,,,666,666,666,666,666,666,,,,666',
'666,,,,,,,666,,666,666,666,666,,,666,666,667,667,667,,667,,,,667,667',
',,,667,,667,667,667,667,667,667,667,,,,,,667,667,667,667,667,667,667',
',,667,,,,,,,667,,,667,667,667,667,667,667,667,667,667,667,667,667,,667',
'667,,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667,,,,667',
',667,,,,,,,,667,,,,,667,667,667,667,667,667,,,,667,667,,,,,,,667,,667',
'667,667,667,,,667,667,668,668,668,,668,,,,668,668,,,,668,,668,668,668',
'668,668,668,668,,,,,,668,668,668,668,668,668,668,,,668,,,,,,,668,,,668',
'668,668,668,668,668,668,668,,668,668,668,,668,668,,668,668,668,,,,,',
',,,,,,,,,,,,,,668,,,668,,,668,668,,,668,,,,,,668,,,,,,,,668,,,,,668',
'668,668,668,668,668,,,,668,668,,,,,,,668,,,668,668,668,,,668,668,669',
'669,669,,669,,,,669,669,,,,669,,669,669,669,669,669,669,669,,,,,,669',
'669,669,669,669,669,669,,,669,,,,,,,669,,,669,669,669,669,669,669,669',
'669,,669,669,669,,669,669,,669,669,669,,,,,,,,,,,,,,,,,,,,669,,,669',
',,669,669,,,669,,,,,,669,,,,,,,,669,,,,,669,669,669,669,669,669,,,,669',
'669,,,,,,,669,,,669,669,669,,,669,669,674,674,674,,674,,,,674,674,,',
',674,,674,674,674,674,674,674,674,,,,,,674,674,674,674,674,674,674,',
',674,,,,,,,674,,,674,674,674,674,674,674,674,674,,674,674,674,,674,674',
',674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674,,,,,,674,',
',,,,,,674,,,,,674,674,674,674,674,674,,,,674,674,,,,,,,674,,,674,674',
'674,,,674,674,675,675,675,,675,,,,675,675,,,,675,,675,675,675,675,675',
'675,675,,,,,,675,675,675,675,675,675,675,,,675,,,,,,,675,,,675,675,675',
'675,675,675,675,675,,675,675,675,,675,675,,675,675,675,,,,,,,,,,,,,',
',,,,,,675,,,675,,,675,675,,,675,,,,,,675,,,,,,,,675,,,,,675,675,675',
'675,675,675,,,,675,675,,,,,,,675,,,675,675,675,,,675,675,699,699,699',
',699,,,,699,699,,,,699,,699,699,699,699,699,699,699,,,,,,699,699,699',
'699,699,699,699,,,699,,,,,,,699,,,699,699,699,699,699,699,699,699,,699',
'699,699,,699,699,,699,699,699,,,,,,,,,,,,,,,,,,,,699,,,699,,,699,699',
',,699,,,,,,699,,,,,,,,699,,,,,699,699,699,699,699,699,,,,699,699,,,',
',,,699,,,699,699,699,,,699,699,702,702,702,,702,,,,702,702,,,,702,,702',
'702,702,702,702,702,702,,,,,,702,702,702,702,702,702,702,,,702,,,,,',
',702,,,702,702,702,702,702,702,702,702,,702,702,702,,702,702,,702,702',
'702,,,,,,,,,,,,,,,,,,,,702,,,702,,,702,702,,,702,,,,,,702,,,,,,,,702',
',,,,702,702,702,702,702,702,,,,702,702,,,,,,,702,,,702,702,702,,,702',
'702,705,705,705,,705,,,,705,705,,,,705,,705,705,705,705,705,705,705',
',,,,,705,705,705,705,705,705,705,,,705,,,,,,,705,,,705,705,705,705,705',
'705,705,705,,705,705,705,,705,705,,,,705,,,,,,,,,,,,,,,,,,,,705,,,705',
',,705,705,,,705,,,,,,,,,,,,,,,,,,,705,705,705,705,705,705,,,,705,705',
',,,,,,705,,,705,705,705,,,705,705,716,716,716,,716,,,,716,716,,,,716',
',716,716,716,716,716,716,716,,,,,,716,716,716,716,716,716,716,,,716',
',,,,,,716,,,716,716,716,716,716,716,716,716,,716,716,716,,716,716,,',
',716,,,,,,,,,,,,,,,,,,,,716,,,716,,,716,716,,,716,,,,,,,,,,,,,,,,,,',
'716,716,716,716,716,716,,,,716,716,,,,,,,716,,,716,716,716,,,716,716',
'717,717,717,,717,,,,717,717,,,,717,,717,717,717,717,717,717,717,,,,',
',717,717,717,717,717,717,717,,,717,,,,,,,717,,,717,717,717,717,717,717',
'717,717,,717,717,717,,717,717,,717,717,717,,,,,,,,,,,,,,,,,,,,717,,',
'717,,,717,717,,,717,,,,,,717,,,,,,,,717,,,,,717,717,717,717,717,717',
',,,717,717,,,,,,,717,,,717,717,717,,,717,717,722,722,722,,722,,,,722',
'722,,,,722,,722,722,722,722,722,722,722,,,,,,722,722,722,722,722,722',
'722,,,722,,,,,,,722,,,722,722,722,722,722,722,722,722,,722,722,722,',
'722,722,,722,722,722,,,,,,,,,,,,,,,,,,,,722,,,722,,,722,722,,,722,,722',
',,,722,,,,,,,,722,,,,,722,722,722,722,722,722,,,,722,722,,,,,,,722,',
',722,722,722,,,722,722,727,727,727,,727,,,,727,727,,,,727,,727,727,727',
'727,727,727,727,,,,,,727,727,727,727,727,727,727,,,727,,,,,,,727,,,727',
'727,727,727,727,727,727,727,727,727,727,727,,727,727,,727,727,727,,',
',,,,,,,,,,,,,,,,,727,,,727,,,727,727,,,727,,727,,,,727,,,,,,,,727,,',
',,727,727,727,727,727,727,,,,727,727,,,,,,,727,,727,727,727,727,,,727',
'727,730,730,730,,730,,,,730,730,,,,730,,730,730,730,730,730,730,730',
',,,,,730,730,730,730,730,730,730,,,730,,,,,,,730,,,730,730,730,730,730',
'730,730,730,730,730,730,730,,730,730,,730,730,730,,,,,,,,,,,,,,,,,,',
',730,,,730,,,730,730,,,730,,,,,,730,,,,,,,,730,,,,,730,730,730,730,730',
'730,,,,730,730,,,,,,,730,,730,730,730,730,,,730,730,746,746,746,,746',
',,,746,746,,,,746,,746,746,746,746,746,746,746,,,,,,746,746,746,746',
'746,746,746,,,746,,,,,,,746,,,746,746,746,746,746,746,746,746,,746,746',
'746,,746,746,,746,746,746,,,,,,,,,,,,,,,,,,,,746,,,746,,,746,746,,,746',
',,,,,746,,,,,,,,746,,,,,746,746,746,746,746,746,,,,746,746,,,,,,,746',
',,746,746,746,,,746,746,767,767,767,,767,,,,767,767,,,,767,,767,767',
'767,767,767,767,767,,,,,,767,767,767,767,767,767,767,,,767,,,,,,,767',
',,767,767,767,767,767,767,767,767,,767,767,767,,767,767,,767,767,767',
',,,,,,,,,,,,,,,,,,,767,,,767,,,767,767,,,767,,767,,,,767,,,,,,,,767',
',,,,767,767,767,767,767,767,,,,767,767,,,,,,,767,,,767,767,767,,,767',
'767,779,779,779,,779,,,,779,779,,,,779,,779,779,779,779,779,779,779',
',,,,,779,779,779,779,779,779,779,,,779,,,,,,,779,,,779,779,779,779,779',
'779,779,779,779,779,779,779,,779,779,,779,779,779,,,,,,,,,,,,,,,,,,',
',779,,,779,,,779,779,,,779,,779,,779,,779,,,,,,,,779,,,,,779,779,779',
'779,779,779,,,,779,779,,,,,,,779,,779,779,779,779,,,779,779,801,801',
'801,,801,,,,801,801,,,,801,,801,801,801,801,801,801,801,,,,,,801,801',
'801,801,801,801,801,,,801,,,,,,,801,,,801,801,801,801,801,801,801,801',
',801,801,801,,801,801,,801,801,801,,,,,,,,,,,,,,,,,,,,801,,,801,,,801',
'801,,,801,,,,,,801,,,,,,,,801,,,,,801,801,801,801,801,801,,,,801,801',
',,,,,,801,,,801,801,801,,,801,801,808,808,808,,808,,,,808,808,,,,808',
',808,808,808,808,808,808,808,,,,,,808,808,808,808,808,808,808,,,808',
',,,,,,808,,,808,808,808,808,808,808,808,808,,808,808,808,,808,808,,808',
'808,808,,,,,,,,,,,,,,,,,,,,808,,,808,,,808,808,,,808,,,,,,808,,,,,,',
',808,,,,,808,808,808,808,808,808,,,,808,808,,,,,,,808,,,808,808,808',
',,808,808,821,821,821,,821,,,,821,821,,,,821,,821,821,821,821,821,821',
'821,,,,,,821,821,821,821,821,821,821,,,821,,,,,,,821,,,821,821,821,821',
'821,821,821,821,,821,821,821,,821,821,,821,821,821,,,,,,,,,,,,,,,,,',
',,821,,,821,,,821,821,,,821,,,,,,821,,,,,,,,821,,,,,821,821,821,821',
'821,821,,,,821,821,,,,,,,821,,,821,821,821,,,821,821,822,822,822,,822',
',,,822,822,,,,822,,822,822,822,822,822,822,822,,,,,,822,822,822,822',
'822,822,822,,,822,,,,,,,822,,,822,822,822,822,822,822,822,822,,822,822',
'822,,822,822,,822,822,822,,,,,,,,,,,,,,,,,,,,822,,,822,,,822,822,,,822',
',,,,,822,,,,,,,,822,,,,,822,822,822,822,822,822,,,,822,822,,,,,,,822',
',,822,822,822,,,822,822,823,823,823,,823,,,,823,823,,,,823,,823,823',
'823,823,823,823,823,,,,,,823,823,823,823,823,823,823,,,823,,,,,,,823',
',,823,823,823,823,823,823,823,823,,823,823,823,,823,823,,823,823,823',
',,,,,,,,,,,,,,,,,,,823,,,823,,,823,823,,,823,,,,,,823,,,,,,,,823,,,',
',823,823,823,823,823,823,,,,823,823,,,,,,,823,,,823,823,823,,,823,823',
'824,824,824,,824,,,,824,824,,,,824,,824,824,824,824,824,824,824,,,,',
',824,824,824,824,824,824,824,,,824,,,,,,,824,,,824,824,824,824,824,824',
'824,824,,824,824,824,,824,824,,824,824,824,,,,,,,,,,,,,,,,,,,,824,,',
'824,,,824,824,,,824,,,,,,824,,,,,,,,824,,,,,824,824,824,824,824,824',
',,,824,824,,,,,,,824,,,824,824,824,,,824,824,826,826,826,,826,,,,826',
'826,,,,826,,826,826,826,826,826,826,826,,,,,,826,826,826,826,826,826',
'826,,,826,,,,,,,826,,,826,826,826,826,826,826,826,826,,826,826,826,',
'826,826,,826,826,826,,,,,,,,,,,,,,,,,,,,826,,,826,,,826,826,,,826,,',
',,,826,,,,,,,,826,,,,,826,826,826,826,826,826,,,,826,826,,,,,,,826,',
',826,826,826,,,826,826,883,883,883,,883,,,,883,883,,,,883,,883,883,883',
'883,883,883,883,,,,,,883,883,883,883,883,883,883,,,883,,,,,,,883,,,883',
'883,883,883,883,883,883,883,,883,883,883,,883,883,,883,883,883,,,,,',
',,,,,,,,,,,,,,883,,,883,,,883,883,,,883,,,,,,883,,,,,,,,883,,,,,883',
'883,883,883,883,883,,,,883,883,,,,,,,883,,,883,883,883,,,883,883,897',
'897,897,,897,,,,897,897,,,,897,,897,897,897,897,897,897,897,,,,,,897',
'897,897,897,897,897,897,,,897,,,,,,,897,,,897,897,897,897,897,897,897',
'897,,897,897,897,,897,897,,897,897,897,,,,,,,,,,,,,,,,,,,,897,,,897',
',,897,897,,,897,,,,,,897,,,,,,,,897,,,,,897,897,897,897,897,897,,,,897',
'897,,,,,,,897,,,897,897,897,,,897,897,917,917,917,,917,,,,917,917,,',
',917,,917,917,917,917,917,917,917,,,,,,917,917,917,917,917,917,917,',
',917,,,,,,,917,,,917,917,917,917,917,917,917,917,917,917,917,917,,917',
'917,,917,917,917,,,,,,,,,,,,,,,,,,,,917,,,917,,,917,917,,,917,,,,917',
',917,,,,,,,,917,,,,,917,917,917,917,917,917,,,,917,917,,,,,,,917,,917',
'917,917,917,,,917,917,918,918,918,,918,,,,918,918,,,,918,,918,918,918',
'918,918,918,918,,,,,,918,918,918,918,918,918,918,,,918,,,,,,,918,,,918',
'918,918,918,918,918,918,918,,918,918,918,,918,918,,918,918,918,,,,,',
',,,,,,,,,,,,,,918,,,918,,,918,918,,,918,,,,,,918,,,,,,,,918,,,,,918',
'918,918,918,918,918,,,,918,918,,,,,,,918,,,918,918,918,,,918,918,930',
'930,930,,930,,,,930,930,,,,930,,930,930,930,930,930,930,930,,,,,,930',
'930,930,930,930,930,930,,,930,,,,,,,930,,,930,930,930,930,930,930,930',
'930,,930,930,930,,930,930,,,,930,,,,,,,,,,,,,,,,,,,,930,,,930,,,930',
'930,,,930,,,,,,,,,,,,,,,,,,,930,930,930,930,930,930,,,,930,930,,,,,',
',930,,,930,930,930,,,930,930,939,939,939,,939,,,,939,939,,,,939,,939',
'939,939,939,939,939,939,,,,,,939,939,939,939,939,939,939,,,939,,,,,',
',939,,,939,939,939,939,939,939,939,939,,939,939,939,,939,939,,,,939',
',,,,,,,,,,,,,,,,,,,939,,,939,,,939,939,,,939,,,,,,,,,,,,,,,,,,,939,939',
'939,939,939,939,,,,939,939,,,,,,,939,,,939,939,939,,,939,939,965,965',
'965,,965,,,,965,965,,,,965,,965,965,965,965,965,965,965,,,,,,965,965',
'965,965,965,965,965,,,965,,,,,,,965,,,965,965,965,965,965,965,965,965',
',965,965,965,,965,965,,965,965,965,,,,,,,,,,,,,,,,,,,,965,,,965,,,965',
'965,,,965,,965,,,,965,,,,,,,,965,,,,,965,965,965,965,965,965,,,,965',
'965,,,,,,,965,,,965,965,965,,,965,965,990,990,990,,990,,,,990,990,,',
',990,,990,990,990,990,990,990,990,,,,,,990,990,990,990,990,990,990,',
',990,,,,,,,990,,,990,990,990,990,990,990,990,990,,990,990,990,,990,990',
',,,990,,,,,,,,,,,,,,,,,,,,990,,,990,,,990,990,,,990,,,,,,,,,,,,,,,,',
',,990,990,990,990,990,990,,,,990,990,,,,,,,990,,,990,990,990,,,990,990',
'1039,1039,1039,,1039,,,,1039,1039,,,,1039,,1039,1039,1039,1039,1039',
'1039,1039,,,,,,1039,1039,1039,1039,1039,1039,1039,,,1039,,,,,,,1039',
',,1039,1039,1039,1039,1039,1039,1039,1039,1039,1039,1039,1039,,1039',
'1039,,1039,1039,1039,,,,,,,,,,,,,,,,,,,,1039,,,1039,,,1039,1039,,,1039',
',1039,,1039,,1039,,,,,,,,1039,,,,,1039,1039,1039,1039,1039,1039,,,,1039',
'1039,,,,,,,1039,,1039,1039,1039,1039,,,1039,1039,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11',
'11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11',
',11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11',
'11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,,,,,11',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12',
',,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,',
',,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12',
',,,,,,,,12,,,,,12,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,,,,75,75,75,75,75,75,75,75,75,75,,,,,,75,75,75',
'75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75,,75,75,75,75,75,75,75,,,75',
'75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75,75,75,75,75,75,75,75,75,75',
'75,,,75,,,,,,,,,,,,,,,,,,,,75,,,,,75,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,,,,103',
'103,103,103,103,103,103,103,103,103,,,,,,103,103,103,103,103,103,103',
'103,103,103,103,103,,103,,,,,,,103,103,,103,103,103,103,103,103,103',
',,103,103,,,,103,103,103,103,,,,,,,,,,,,,,103,103,,103,103,103,103,103',
'103,103,103,103,103,103,,,103,,,,,,,,,,,,,,,,,,,,103,,,,,103,423,423',
'423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423',
'423,423,423,423,423,,,,423,423,423,423,423,423,423,423,423,423,,,,,',
'423,423,423,423,423,423,423,423,423,,,423,,,,,,,,,423,423,,423,423,423',
'423,423,423,423,,,423,423,,,,423,423,423,423,,,,,,,,,,,,,,423,423,,423',
'423,423,423,423,423,423,423,423,423,423,,,423,423,,,,,,,,,,423,,,,,',
',,,423,,,,,423,655,655,655,655,655,655,655,655,655,655,655,655,655,655',
'655,655,655,655,655,655,655,655,655,655,,,,655,655,655,655,655,655,655',
'655,655,655,,,,,,655,655,655,655,655,655,655,655,655,,,655,,,,,,,,,655',
'655,,655,655,655,655,655,655,655,,,655,655,,,,655,655,655,655,,,,,,',
',,,,,,,655,655,,655,655,655,655,655,655,655,655,655,655,655,,,655,655',
',,,,,,,,,655,,,,,,,,,655,,,,,655,788,788,788,788,788,788,788,788,788',
'788,788,788,788,788,788,788,788,788,788,788,788,788,788,788,,,,788,788',
'788,788,788,788,788,788,788,788,,,,,,788,788,788,788,788,788,788,788',
'788,,,788,,,,,,,,,788,788,,788,788,788,788,788,788,788,,,788,788,,,',
'788,788,788,788,,,,,,,,,,,,,,788,788,,788,788,788,788,788,788,788,788',
'788,788,788,,,788,,,,,,,,,,229,229,,,229,,,,,,788,,,229,229,788,229',
'229,229,229,229,229,229,,,229,229,,,,229,229,229,229,,,,,,229,,,,,,',
',229,229,,229,229,229,229,229,229,229,229,229,229,229,,,229,,,,,,,,',
',230,230,,,230,,,,,,229,,,230,230,229,230,230,230,230,230,230,230,,',
'230,230,,,,230,230,230,230,,,,,,230,,,,,,,,230,230,,230,230,230,230',
'230,230,230,230,230,230,230,,787,230,787,787,787,787,787,,,,,279,279',
',,279,787,,,,,230,,,279,279,230,279,279,279,279,279,279,279,,,279,279',
'787,,,279,279,279,279,,,787,787,787,787,,,,,,,,279,279,,279,279,279',
'279,279,279,279,279,279,279,279,,,279,,,,,,,,,787,474,474,,,474,,,,',
',279,,,474,474,279,474,474,474,474,474,474,474,,,474,474,,,,474,474',
'474,474,,,,,,474,,,,,,,,474,474,,474,474,474,474,474,474,474,474,474',
'474,474,,,474,,,,,,,,,,475,475,,,475,,,,,,474,,,475,475,474,475,475',
'475,475,475,475,475,,,475,475,,,,475,475,475,475,,,,,,475,,,,,,,,475',
'475,,475,475,475,475,475,475,475,475,475,475,475,,,475,,,,,,,,,,540',
'540,,,540,,,,,,475,,,540,540,475,540,540,540,540,540,540,540,,,540,540',
',,,540,540,540,540,,,,,,540,,,,,,,,540,540,,540,540,540,540,540,540',
'540,540,540,540,540,,,540,,,,,,,,,,541,541,,,541,,,,,,540,,,541,541',
'540,541,541,541,541,541,541,541,,,541,541,,,,541,541,541,541,,,,,,541',
',,,,,,,541,541,,541,541,541,541,541,541,541,541,541,541,541,,,541,,',
',,,,,,,550,550,,,550,,,,,,541,,,550,550,541,550,550,550,550,550,550',
'550,,,550,550,,,,550,550,550,550,,,,,,550,,,,,,,,550,550,,550,550,550',
'550,550,550,550,550,550,550,550,,,550,,,,,,,,,,551,551,,,551,,,,,,550',
',,551,551,550,551,551,551,551,551,551,551,,,551,551,,,,551,551,551,551',
',,,,,551,,,,,,,,551,551,,551,551,551,551,551,551,551,551,551,551,551',
',,551,,,,,,,,,,612,612,,,612,,,,,,551,,,612,612,551,612,612,612,612',
'612,612,612,,,612,612,,,,612,612,612,612,,,,,,612,,,,,,,,612,612,,612',
'612,612,612,612,612,612,612,612,612,612,,,612,,,,,,,,,,613,613,,,613',
',,,,,612,,,613,613,612,613,613,613,613,613,613,613,,,613,613,,,,613',
'613,613,613,,,,,,613,,,,,,,,613,613,,613,613,613,613,613,613,613,613',
'613,613,613,,,613,,,,,,,,,,661,661,,,661,,,,,,613,,,661,661,613,661',
'661,661,661,661,661,661,,,661,661,,,,661,661,661,661,,,,,,661,,,,,,',
',661,661,,661,661,661,661,661,661,661,661,661,661,661,,,661,,,,,,,,',
',662,662,,,662,,,,,,661,,,662,662,661,662,662,662,662,662,662,662,,',
'662,662,,,,662,662,662,662,,,,,,662,,,,,,,,662,662,,662,662,662,662',
'662,662,662,662,662,662,662,,,662,,,,,,,,,,777,777,,,777,,,,,,662,,',
'777,777,662,777,777,777,777,777,777,777,,,777,777,,,,777,777,777,777',
',,,,,777,,,,,,,,777,777,,777,777,777,777,777,777,777,777,777,777,777',
',,777,,,,,,,,,,778,778,,,778,,,,,,777,,,778,778,777,778,778,778,778',
'778,778,778,,,778,778,,,,778,778,778,778,,,,,,778,,,,,,,,778,778,,778',
'778,778,778,778,778,778,778,778,778,778,,,778,,,,,,,,,,1035,1035,,,1035',
',,,,,778,,,1035,1035,778,1035,1035,1035,1035,1035,1035,1035,,,1035,1035',
',,,1035,1035,1035,1035,,,,,,1035,,,,,,,,1035,1035,,1035,1035,1035,1035',
'1035,1035,1035,1035,1035,1035,1035,,,1035,,,,,,,,,,1040,1040,,,1040',
',,,,,1035,,,1040,1040,1035,1040,1040,1040,1040,1040,1040,1040,,,1040',
'1040,,,,1040,1040,1040,1040,,,,,,1040,,,,,,,,1040,1040,,1040,1040,1040',
'1040,1040,1040,1040,1040,1040,1040,1040,,,1040,,,,,,,,,,1041,1041,,',
'1041,,,,,,1040,,,1041,1041,1040,1041,1041,1041,1041,1041,1041,1041,',
',1041,1041,,,,1041,1041,1041,1041,,,,,,1041,,,,,,,,1041,1041,,1041,1041',
'1041,1041,1041,1041,1041,1041,1041,1041,1041,,829,1041,829,829,829,829',
'829,947,,947,947,947,947,947,,,829,,,,,1041,,947,,,1041,949,,949,949',
'949,949,949,,,,,829,,,,,949,,947,,829,829,829,829,,,,947,947,947,947',
'951,,951,951,951,951,951,949,953,,953,953,953,953,953,,951,829,949,949',
',,,,953,829,,,,,,981,947,981,981,981,981,981,951,984,,984,984,984,984',
'984,953,981,,951,951,,949,,,984,,953,953,986,,986,986,986,986,986,,',
'1045,981,1045,1045,1045,1045,1045,986,,984,981,981,981,981,,951,1045',
',984,984,984,984,,953,,,,,1059,986,1059,1059,1059,1059,1059,,,,1045',
',986,986,,,1059,,981,,,1045,1045,,,1061,984,1061,1061,1061,1061,1061',
',,,,,,1059,,,1061,,,,,986,1059,1059,1059,1059,,,,1063,1045,1063,1063',
'1063,1063,1063,,1065,1061,1065,1065,1065,1065,1065,,1063,,,,1061,1061',
',,1065,,,,1088,1059,1088,1088,1088,1088,1088,,,,1063,,,,,,1088,,1065',
',,1063,1063,,,,1061,,,1065,1065,,,,,,,,1088,,,,,,,,,,,1088,1088,,,,',
'1063,,,,,,,,1065,,,,,,,,,,,,,,,,,,,,1088' ]
        racc_action_check = arr = ::Array.new(26141, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    60,     0,   172,   nil,   370,   nil,   nil,  5926,   932,
   nil, 23566, 23704,    87,   nil,    96,   165,    85,   243,   373,
   363,   nil,   147,  6066,  2261,   314,   nil,   257,   nil,     0,
  1068,  1196,  6206,  6346,  6486,   nil,  1979,  6626,  6766,   nil,
   251,   435,   491,   335,   298,  6906,  7046,   879,  7186,   303,
   410,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1324,   nil,  7326,   nil,   nil,    89,   nil,  7466,  7606,   nil,
   nil,  7746,  7886,   358,   nil, 23842,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   301,   nil,   nil,   nil,   nil,   nil,   nil,   325,
   342,   396,   415, 23980,   nil,   nil,   nil,   nil,   nil,   nil,
     0,   nil,   nil,   139,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  8026,   nil,   nil,   nil,
   nil,  8166,  8306,  8446,  8586,  8726,   443,   nil,   625,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   443,   nil,  2120,  8866,  9006,  9146,  9286,  9426,  9566, 24467,
 24540,   nil,   nil,  9706,  9846,  9986,   nil,   nil,   445,    86,
   168,   571,   257,   503,   616,   nil, 10126,  2261,   621, 10266,
 10406, 10546, 10686, 10826, 10966, 11106, 11246, 11386, 11526, 11666,
 11806, 11946, 12086, 12226, 12366, 12506, 12646, 12786, 12926, 13066,
 13206,   nil,   nil,   nil,   nil, 13346,   nil,   nil,   nil, 24613,
   nil,   nil,   632, 13486,   nil,   nil,   664,   nil,   nil,   nil,
 13626,   nil,   nil, 13766,   nil,  2402,   nil,   634,   644,   nil,
 13906,   699, 14046,   nil,   nil, 14186, 14326,   nil,   nil,   525,
   nil,   nil, 14466,  1048,   nil,   653,  2402,   691,   731,   701,
 14606,  2543,   501,   506,   574,   779,   640,   nil,   752,   718,
   117,   nil,   nil,   nil,   768,   313,   746, 14746,   nil,   577,
   831,   645,   nil,   835, 14886,   nil, 15026,  2684,  1271,   778,
 15166, 15306,   nil,   nil,   637,   374,    69,   132, 15446,  2825,
  2966,   544,   891,   781,    39,    76,   681,   859,   110,   900,
   nil,   nil, 15586,   nil, 15726,   348,   359,   374,   478,   538,
   572,   591,   620,   684,   nil,   718,   nil,   nil,   nil,   nil,
   nil,   271,   nil,   446,   nil,   611,   nil,   806,   532,   nil,
   811,   nil,   813,   102,   nil,   822,   193,   nil,   574,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 24118,   nil,   nil,   nil,   nil,   849,   nil,
   nil,   837, 15866,   849,   nil,   nil,   839,   nil,   762,   291,
   nil,   nil,   nil,  1979,   nil,   nil,   nil,   nil,   nil,  2120,
   859,   nil,   nil,   860,   868,   579,   668,  1456,   nil,   nil,
   nil,   278,   406,   908,   nil,   nil,  1584,  1716,   nil,   nil,
   nil,   123,   nil,   908, 24686, 24759, 16006,   353, 16146, 16286,
 16426,  3107,  3248,   234,   742,   937,   938,   939,   954,  1274,
  1406,  1534,  3389,  3530,  3671,  3812,  3953,  4094,   864,   897,
  4235,  4376,  2543,  1019,  1013,   nil,  1848,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   902,   903,   nil,   nil, 16566,
   nil,   nil, 16706,   nil, 16846,   nil,   276,   nil,   nil,   nil,
 16986,  1276,   904,   911,   nil,   nil,   913, 17126,   924, 17266,
 24832, 24905,   765,   965,   nil, 17406,   935,   nil,   983, 17546,
 24978, 25051,  1146,  2684, 17686,  1065,  1064,   948,   nil,   nil,
   467,   468,   984,   983,   nil,   501,  1010,   nil,   738,   nil,
   970,   971,   nil,   977,   983,   985,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   976,   778,   nil,   nil, 17826,   nil,
   nil,   nil,  1075,   nil,   nil,   nil,  1076,   nil,   nil,  1078,
  3107,  1119,   nil,  3248,   164,  1123,  1124,  1118,  1140,   nil,
   nil, 17966, 25124, 25197,   132,   nil,   318,   409,   377,   nil,
   779,   nil,  1043, 18106,   nil,  1064,   nil,   nil,   nil, 18246,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   335,   nil,   nil,   598,   nil,   nil,   nil,  1025,   nil,
   nil,  1027,   nil,  3389,   nil, 24256,   nil,  1031, 18386, 18526,
 18666, 25270, 25343, 18806,   678,  1066, 18946, 19086, 19226, 19366,
  1067,   nil,   nil,   nil, 19506, 19646,  1069,   nil,   nil,   nil,
   383,   438,   534,   673,  1042,  1042,   nil,    89,  1151,   177,
   nil,  1070,   nil,  1183,   nil,   nil,  1069,   nil,  1112, 19786,
   nil,   nil, 19926,   nil,   195, 20066,  1072,   nil,  1076,    32,
    58,  1117,   106,   784,  1124,  1087, 20206, 20346,  1157,   134,
   800,   nil, 20486,   nil,   nil,   nil,   nil, 20626,   nil,   nil,
 20766,   nil,   nil,   nil,   146,  1100,   368,   nil,   nil,   765,
  1387,   nil,  1647,   nil,  1779,   nil, 20906,   nil,   937,   nil,
  1098,   272,  1102,   nil,   nil,   nil,   nil,   857,   nil,  1217,
   nil,   nil,   nil,   nil,   nil,  1225,   nil, 21046,  1115,   164,
   167,   238,   298,  3530,   nil,   783,   nil, 25416, 25489, 21186,
   nil,   nil,   nil,   896,  3671,  3812,  1842, 24602, 24394,   244,
   979,  3953,   nil,   nil,   460,   nil,   nil,   nil,  1135,   nil,
  1125, 21326,  1135,   440,   442,   812,   940,  2825, 21466,   nil,
  1148,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 21606, 21746, 21886, 22026,   470, 22166,   nil,   nil, 25770,
   nil,  4094,   nil,   nil,  1169,   nil,   119,   nil,   nil,   nil,
   nil,  1154,   130,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  4235,   nil,  1156,  1200,   nil,   nil,   602,   nil,  4376,  4517,
  1158,  1166,  1165,   nil,   nil,   nil,  1167,  1169,   nil,  1177,
  1179,   nil,  1191,   nil,   nil,  1195,  1003,  1197,  1008,   nil,
  1319,   nil,   nil, 22306,   nil,  4658,  1320,   nil,   nil,   145,
   180,  1321,   446,   852,   nil,  1209,  4799, 22446,   576,  1333,
   nil,  1217,   659,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1206,   nil,   nil,  1216,   479,   nil,   nil, 22586, 22726,  2966,
  1217,  1218,   nil,  1219,  1220,  1224,   nil,  1245,  1229,  1211,
 22866,   nil,   nil,   nil,   nil,  4940,  5081,   nil,   138, 23006,
   nil,   nil,  1246,  1353,  1062,   nil,   nil, 25777,   nil, 25797,
   nil, 25828,   nil, 25836,   nil,   nil,   nil,   nil,   409,  1131,
  1239,   nil,   157,   nil,   nil, 23146,  5222,   nil,   nil,  1360,
   684,   nil,   nil,  1361,   nil,   nil,  1281,   nil,   498,   nil,
   nil, 25859,   nil,   nil, 25867,   nil, 25887,   nil,   nil,  1263,
 23286,   815,  1319,   nil,  1368,  5363,   171,   173,   816,  1326,
   174,   nil,   nil,   nil,   734,   nil,   nil,   nil,  1253,  1254,
  1255,  1256,  1257,  1136,  1258,  1164,  5504,   nil,   350,   nil,
   nil,  5645,   nil,  5786,  1259,   nil,   nil,  1260,  1261,  1276,
  1277,   nil,  1281,   nil,   850, 25562,   nil,   nil,  1404, 23426,
 25635, 25708,   177,   nil,  1205, 25896,   nil,   nil,   nil,   nil,
  1189,  1284,   947,   nil,   nil,   nil,  1405,  1407,   nil, 25924,
   nil, 25949,   nil, 25978,   nil, 25986,   nil,   nil,  1327,  1330,
   nil,  1296,   180,   181,   208,   242,   nil,  1295,  1297,   nil,
   nil,   nil,  1305,  1307,  1310,  1316,   245,   nil, 26006,   nil,
   nil,   nil,   nil,  1317,   nil ]

racc_action_default = [
    -1,  -651,  -650,  -651,    -2,  -637,    -4,    -5,  -651,    -8,
    -9,  -651,  -651,  -651,   -35,  -651,  -651,   -39,  -651,  -651,
  -294,   -50,  -639,  -651,   -55,   -60,   -61,   -62,   -66,  -271,
  -271,  -271,  -309,  -343,  -344,   -78,  -650,   -82,   -90,   -92,
  -651,  -538,  -539,  -651,  -651,  -651,  -651,  -230,  -651,  -639,
  -244,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -623,  -296,  -298,  -305,  -307,  -317,  -423,  -651,  -651,   -57,
   -57,  -637,  -651,  -327,  -334,  -651,  -345,  -346,  -348,  -349,
  -350,  -351,  -352,  -353,  -354,  -355,  -356,  -357,  -366,  -468,
  -469,  -470,  -471,  -472,  -473,  -650,  -476,  -650,  -650,  -650,
  -486,  -650,  -650,  -650,  -514,  -520,  -522,  -523,  -524,  -525,
  -621,  -527,  -528,  -622,  -530,  -531,  -532,  -533,  -534,  -535,
  -536,  -537,  -542,  -543,  1095,    -3,  -638,  -646,  -647,  -648,
    -7,  -651,  -651,  -651,  -651,  -651,  -651,   -23,  -651,  -121,
  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,
  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,
   -28,  -130,  -650,  -651,  -651,  -651,  -651,  -651,  -650,  -651,
  -651,  -633,  -634,  -651,  -651,  -639,  -640,   -54,  -651,  -538,
  -539,  -651,  -294,  -651,  -651,  -236,  -651,  -650,  -651,  -651,
  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,
  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,
  -651,  -245,  -246,  -247,  -248,  -651,  -359,  -452,  -431,  -651,
  -635,  -636,   -67,  -651,  -316,  -358,  -651,  -445,  -447,   -73,
  -650,  -442,   -74,  -639,   -75,  -251,  -266,  -650,  -650,  -270,
  -651,  -276,  -651,  -650,  -615,  -651,  -651,   -76,   -77,  -637,
   -17,   -18,  -651,   -21,   -22,   -80,  -650,  -639,  -651,   -83,
   -86,  -650,   -98,   -99,  -651,  -651,  -106,  -309,  -312,  -639,
  -435,  -343,  -344,  -347,  -443,  -651,   -88,  -651,   -94,  -304,
  -521,  -651,  -224,  -225,  -651,  -237,  -651,  -650,  -300,  -639,
  -650,  -650,  -318,  -319,  -570,   -56,  -651,  -651,  -651,  -650,
  -650,  -637,  -651,  -638,  -538,  -539,  -651,  -651,  -294,  -651,
  -376,  -377,  -651,  -330,  -651,  -121,  -122,  -164,  -165,  -166,
  -182,  -187,  -194,  -197,  -337,  -651,  -538,  -539,  -610,  -611,
  -474,  -651,  -498,  -651,  -500,  -651,  -502,  -651,  -651,  -481,
  -651,  -650,  -651,  -651,  -494,  -651,  -651,  -496,  -651,  -513,
  -515,  -516,  -517,  -518,    -6,  -649,   -29,   -30,   -31,   -32,
   -33,   -10,   -11,  -651,   -25,   -26,   -27,  -131,  -651,   -36,
   -38,  -281,  -651,  -651,  -280,   -37,  -651,   -40,  -651,  -294,
   -48,   -49,  -205,  -256,  -276,   -51,   -52,   -41,  -206,  -256,
  -639,  -261,  -262,  -650,  -650,  -624,  -625,  -271,  -440,  -626,
  -627,  -625,  -624,  -271,  -439,  -441,  -626,  -627,   -47,  -214,
   -53,  -639,  -315,  -651,  -651,  -651,  -650,  -304,  -651,  -651,
  -651,  -215,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -226,
  -227,  -228,  -229,  -231,  -232,  -233,  -234,  -235,  -238,  -239,
  -240,  -241,  -639,  -249,  -651,  -453,  -271,  -624,  -625,   -64,
   -68,  -272,  -436,  -449,  -452,  -639,  -639,  -311,  -267,  -651,
  -275,  -268,  -651,  -273,  -651,  -277,  -651,  -618,  -620,   -16,
  -638,   -20,  -639,   -79,  -302,   -95,   -84,  -651,  -639,  -650,
  -651,  -651,  -105,  -651,  -521,  -651,   -91,   -96,  -651,  -651,
  -651,  -651,  -250,  -242,  -651,  -460,  -651,  -639,  -299,  -252,
  -643,  -643,  -651,  -651,  -613,  -643,  -651,  -424,  -570,  -427,
  -609,  -609,  -553,  -555,  -555,  -555,  -569,  -571,  -572,  -573,
  -574,  -575,  -576,  -577,  -578,  -651,  -580,  -582,  -584,  -589,
  -591,  -592,  -594,  -599,  -601,  -602,  -604,  -605,  -606,  -651,
  -650,  -367,  -368,  -650,  -651,  -651,  -651,  -651,  -651,  -362,
  -455,  -650,  -651,  -651,  -304,   -57,  -116,  -117,  -651,  -119,
  -651,  -294,  -650,  -651,  -335,  -548,  -340,  -631,  -632,  -651,
  -475,  -499,  -504,  -505,  -507,  -477,  -501,  -478,  -503,  -479,
  -480,  -651,  -483,  -485,  -651,  -488,  -490,  -491,  -651,  -492,
  -493,  -651,  -519,  -650,   -24,  -651,   -34,  -284,  -651,  -651,
  -650,  -651,  -651,  -651,  -444,  -651,  -263,  -265,  -651,  -651,
   -69,  -259,  -260,  -437,  -651,  -651,   -71,  -438,  -314,  -641,
  -624,  -625,  -624,  -625,  -639,  -651,  -430,  -650,   -63,  -432,
  -449,  -651,  -450,  -651,  -258,  -310,  -650,  -274,  -278,  -651,
  -616,  -617,  -651,   -19,   -81,  -651,   -87,   -93,  -639,  -624,
  -625,  -650,  -628,  -104,  -651,   -89,  -651,  -651,  -223,  -639,
  -650,  -360,  -650,  -297,  -365,  -301,  -253,  -645,  -644,  -255,
  -645,  -306,  -308,  -614,  -651,  -639,  -651,  -551,  -552,  -651,
  -651,  -562,  -651,  -565,  -651,  -567,  -651,  -378,  -651,  -380,
  -382,  -389,  -639,  -583,  -593,  -603,  -607,  -650,  -369,  -650,
   -58,  -370,  -371,  -322,  -323,  -651,  -325,  -651,  -639,  -624,
  -625,  -628,  -303,  -650,  -116,  -117,  -118,  -651,  -651,  -650,
  -328,  -544,  -546,  -331,  -650,  -650,  -570,  -570,  -651,  -639,
  -651,  -650,  -482,  -484,  -651,  -487,  -495,  -497,  -651,  -132,
  -282,  -651,  -639,  -624,  -625,  -625,  -624,  -257,  -651,  -642,
  -650,   -43,  -208,   -44,  -209,   -70,   -45,  -211,   -46,  -210,
   -72,  -651,  -651,  -651,  -651,  -444,  -651,  -412,  -413,  -639,
  -415,  -650,  -434,  -433,  -651,  -446,  -650,  -448,  -269,  -279,
  -619,   -85,  -444,   -97,  -213,  -313,   -13,   -15,  -361,  -363,
  -650,  -467,  -461,  -650,  -462,  -463,  -643,  -425,  -650,  -650,
  -417,  -639,  -609,  -590,  -608,  -554,  -555,  -555,  -581,  -555,
  -555,  -600,  -555,  -578,  -595,  -639,  -651,  -387,  -651,  -579,
  -651,  -364,  -372,  -651,  -374,  -650,  -651,   -59,  -324,  -651,
  -444,  -651,  -116,  -117,  -120,  -639,  -650,  -651,  -651,  -651,
  -338,  -639,  -651,  -341,  -612,  -506,  -509,  -510,  -511,  -512,
  -651,  -489,   -12,  -283,  -444,   -42,  -207,  -264,  -651,  -243,
  -609,  -609,  -394,  -650,  -650,  -650,  -411,  -651,  -639,  -578,
  -586,  -587,  -597,  -454,   -65,  -650,  -650,  -466,  -651,  -651,
  -465,  -254,  -651,  -651,  -651,  -426,  -550,  -651,  -558,  -651,
  -560,  -651,  -563,  -651,  -566,  -568,  -379,  -381,  -385,  -651,
  -390,  -320,  -651,  -375,  -321,  -651,  -650,  -326,  -444,  -651,
  -651,  -332,  -336,  -651,  -547,  -549,  -548,  -508,  -651,  -392,
  -393,  -402,  -396,  -404,  -651,  -407,  -651,  -409,  -414,  -651,
  -651,  -585,  -651,  -451,  -650,  -650,  -538,  -539,  -651,  -651,
  -294,  -464,  -428,  -429,  -639,  -419,  -421,  -422,  -555,  -555,
  -555,  -555,  -383,  -651,  -388,  -651,  -650,  -278,  -650,  -329,
  -545,  -650,  -339,  -650,  -609,  -588,  -395,  -650,  -650,  -650,
  -650,  -598,  -650,  -416,  -596,  -651,  -304,   -14,  -460,  -650,
  -651,  -651,  -304,  -418,  -651,  -651,  -556,  -559,  -561,  -564,
  -651,  -386,  -650,  -456,  -457,  -458,  -651,  -651,  -391,  -651,
  -399,  -651,  -401,  -651,  -405,  -651,  -408,  -410,  -303,  -628,
  -459,  -639,  -624,  -625,  -628,  -303,  -420,  -555,  -384,  -373,
  -333,  -342,  -650,  -650,  -650,  -650,  -444,  -557,  -651,  -397,
  -400,  -403,  -406,  -650,  -398 ]

clist = [
'6,129,234,229,450,296,296,296,356,357,237,280,361,608,291,384,298,298',
'298,142,142,278,319,333,333,720,4,9,352,346,510,318,569,9,434,435,137',
'221,556,359,360,355,355,410,664,355,584,737,738,297,297,297,457,463',
'785,145,145,546,333,147,147,576,126,282,289,292,515,129,340,880,336',
'521,416,417,418,419,315,600,603,847,641,886,697,142,125,697,700,348',
'871,317,294,307,308,392,861,394,396,399,752,404,407,394,506,691,868',
'355,355,355,355,504,960,142,391,441,776,831,441,924,130,447,957,1005',
'441,1031,393,468,747,448,1007,622,408,624,1,469,636,867,638,869,2,642',
'421,726,729,136,653,846,733,936,703,636,362,9,220,371,430,423,760,887',
'279,690,420,655,344,562,689,472,388,563,353,369,780,385,626,347,349',
'557,350,351,372,896,623,898,1021,374,784,625,973,788,927,976,926,1014',
'928,1004,567,857,354,734,1031,445,446,296,513,514,836,687,1053,767,470',
'471,429,440,853,458,440,938,390,428,395,398,440,1076,474,517,925,644',
'451,521,1007,697,697,700,401,403,406,905,414,790,467,791,433,433,318',
'409,897,1051,735,533,866,863,1025,629,684,,,,296,706,765,957,584,875',
',296,935,715,296,298,,1027,512,,,894,,576,,298,825,558,834,,1078,,,',
',989,451,747,,,877,871,700,520,520,457,463,604,297,392,842,,,129,333',
',540,543,297,318,,,,708,318,868,291,,526,,547,333,,550,794,,,741,743',
'745,355,,561,565,,531,,946,1054,511,1008,,,868,693,,559,564,612,516',
'536,1037,605,606,315,129,333,544,333,315,890,711,1079,,530,560,,532',
',,,711,538,,1028,,469,1029,448,,793,,,642,,768,529,,,,,,,,914,979,980',
'645,,678,,,,1023,,,,,,,,,,,,747,815,747,,,661,,820,841,,,,868,665,142',
'584,,584,711,802,941,,,607,672,,,,694,695,677,654,296,,520,520,,1082',
'671,,,458,,,,704,,901,902,,145,707,838,,147,,,451,899,900,,584,584,697',
'700,685,467,457,463,,725,,968,672,670,,576,576,,,676,,1012,747,1058',
',696,671,,,,1070,,,19,296,,,,,19,,,,929,547,333,458,,,,719,,547,333',
'238,854,458,793,,451,,,688,238,238,238,,19,324,324,441,467,943,,,,747',
'895,747,441,441,467,811,813,,441,441,,816,818,812,814,,19,,,817,819',
'238,238,,,238,366,,838,296,773,,969,,,,747,,,,757,458,783,759,,761,711',
',789,,,,,,451,966,,,,,,,844,,,782,467,948,950,,952,954,,955,,,,,296',
',19,,,,584,238,238,238,238,19,458,440,,,845,810,6,833,,862,440,440,',
'451,995,,440,440,142,665,1086,,,,1055,467,,,929,,,929,798,9,,799,,879',
'1016,832,827,,,665,,547,333,,,520,672,,441,677,145,915,843,333,147,',
',,,916,671,,856,1056,,1057,860,,,851,904,855,812,814,819,817,,,,903',
',,19,238,438,238,238,438,238,,433,,,438,238,238,,,921,665,,,929,296',
',723,884,19,884,,,,,458,,1046,1047,1048,1049,891,,,,,864,,,864,451,',
',,,665,,889,467,910,,,,,945,238,,,440,142,,870,238,872,,238,763,764',
'956,766,,520,860,,,,,,1071,,,916,,,19,,,962,19,933,,,324,19,974,,1087',
'827,,,,970,983,985,987,,,,937,324,,,,,940,,942,,,19,355,,,,,,711,,,922',
'238,19,19,,355,,,,665,,,,,963,620,,620,,923,,,,,,,,,971,,1024,,975,921',
',,921,,921,,,,860,,,,,,,,333,,,,,982,982,982,,333,,,29,,993,994,,,29',
',,,,,,,,1060,1062,1064,1066,,1067,29,,,,,,,930,,29,29,29,1018,29,888',
',,1020,,,,,,,,,,333,921,,921,,921,1040,921,1043,238,,,29,,1038,,851',
'29,29,,,29,1089,1090,1091,1092,,1009,,1010,921,1011,,1094,,1052,296',
',,864,884,,922,,,922,,922,458,982,982,982,982,,982,,,,,,,451,,19,1030',
',1032,467,,,324,,238,467,884,665,29,,324,,,29,29,29,29,29,,238,,,,,',
',,,,,,,,,961,,982,982,982,982,964,,,,,967,,982,,,,,922,972,922,,922',
'1077,922,,,930,,,930,19,,930,19,930,,1083,,1084,,1085,238,,,,,922,,',
',,,,238,,,,,,238,,,,,,1093,,,,29,29,29,29,29,29,29,,,,,29,29,29,19,',
',,,1019,438,238,,1022,,29,,,,438,438,,,,,438,438,,930,,930,,930,,930',
',,,,,,,,,,,,,,,,29,,,,,324,930,29,,,29,,,,,,324,,,,,,,,,,,,,29,,,,29',
',,,,29,,,,,,,1080,1081,,,,,,,,,,,,,,,,,,29,,,,,,,,,19,,29,29,29,,238',
',,,,19,19,,,,,,19,,,,,,,,,,,,,,,,,438,,,,,,,,,,,,,,,,,,,,,,,19,,,,,',
',,,,,,,,,,,,,19,,,,,,,,19,19,,,,,,,,,,,,,,,,,,,,,,,,238,,19,,,,,,,,29',
',,19,238,,,,,,,,,,,,,,,,,,,,,,,431,444,,32,,,,,,32,991,,,,,19,19,,,998',
',,,,32,,,29,,,,,,32,32,32,29,32,,,,,,,16,,19,,,,16,29,,,,,,,,,,,,32',
',,,,32,32,1034,,32,,,19,,523,16,525,,,527,528,,,,,,,,,,,,,19,29,,,29',
'19,,19,16,,,,29,,,,,,370,,,,,238,29,,,,,,29,32,566,,,,32,32,32,32,32',
',,,,,,,,,,,,,29,,,,,,29,29,,,,,,,,29,29,,16,,,29,29,,,,,16,,,,,,,,,',
',,,,,,,,,,,,,,,,,,18,,,,657,,18,,,,,,,,,,,,32,32,32,32,32,32,32,,,,',
'32,32,32,,,18,,,,,,,,,32,,,,,,,,,,,,,,,,16,18,436,,,436,29,,,,,436,29',
',,,,29,29,,32,,,,29,16,,32,,,32,,698,,,566,,701,,,,29,,,,,,,,32,,,,32',
',,,,32,,,,,,29,18,,,,,,,,,18,,,,,,,,,29,32,,,,,,16,29,29,,16,32,32,32',
',16,,753,,,,,,,,,,,,,,,29,,29,,,,,,,16,,,,29,29,,,,,,,16,16,,,,,,,,',
',,,,,,,,,,,,,,18,,18,,,18,,29,29,,800,18,,,,,,,698,566,,,,,,18,,,,,',
',,,,,,,29,,,,,,,,,,,,,839,32,,840,,,,,,,,,,,,,29,,,,,,,852,,,,,698,',
',566,,,,,,29,,18,,,29,18,29,,,874,18,,,,,,,32,,,,,29,,,,32,,,,444,,',
',,,18,,,,,32,,,,,,,18,18,,,,,,,,,16,,,,,,913,,,,,,,,,,,,,,,,,,,,,,,32',
',,32,,,,,,,,32,,,,,,,,,,,,32,,,,,,32,,,,,,,,,,,,16,,20,16,,,,,20,,,',
'32,,,,,,32,32,,,,,,,,32,32,,,,,32,32,,20,326,326,,,,,,,,,,,,,,566,16',
',,,,,436,,,20,,,,,,436,436,,,368,,436,436,,,,,,,,,,,,,,,,18,,,,,,,,',
'1017,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,32,,,20,,,32,,,,,32,32,,,,,,32',
',,,,,,,,,,18,,,18,,,32,,,,,,16,,,,,,,,,,,16,16,,,,,32,16,,,,,,,,,,,',
',,,,,436,32,,,,,18,,,32,32,,18,,20,,439,,,439,,18,18,16,,439,,18,18',
',,,,,32,,32,,,20,,,16,,,,41,32,32,,16,16,41,,,,,,,,,,,,,,,,,,,,,,,,',
'16,,,41,322,322,,,,32,32,16,,,,,,,,,,,,,,,,20,,41,,20,,,,326,20,,,364',
'32,,386,,,,,,,18,16,16,326,,1001,,,,,,18,18,20,,,,,18,,32,,,,,20,20',
',,,,,16,,,18,,,621,,621,32,,,41,,32,,32,,,,,41,,,,,18,,,16,,,32,,,,',
',,,,,,,,18,,,,,16,,,18,18,16,,16,,,,,,,,,,,,,,,,,,42,,,,,18,42,,,,,',
',,,,18,,,,,,,,,,,,,,,,,41,42,323,323,,,,,,,,,,,,,,,,,,,18,18,,41,,42',
',,,,,,,,,365,,,387,,,,,,,,,,,,,18,,,20,,,,,,,326,,,,,,,,326,,,,,,,,',
',,18,,,,,,,,41,42,,,41,,,,322,41,42,,,18,,,,,18,,18,,,,,322,,,,,,,,',
',41,20,,,20,,,,,,,,41,41,,,,,,,,,,,,386,,386,,,,,,,,,,,,,,,,,,,,,,,',
',,,20,,,,,,439,,42,,,,,,,439,439,,,,,439,439,,,,,,,,,,,42,,,,,,,,,,',
',,,,,,,,326,,,,,,,,,,,326,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,42',
',,,323,42,,,,,,,,,,,,,20,,,323,,,,,,41,,20,20,42,,,322,909,20,,,,,,322',
'42,42,,,,,,,,,439,,,387,,387,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,,,,,,,,,20',
',41,,,41,,,20,20,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,20,,,,,,,,,41',
',,,,,,,,,,,,,,,,,,,,,,,,621,,,,,20,20,,,1000,,,,,,,,,,,,,,,,,,322,,',
',,,,,,20,,322,42,,,,,,,323,,,,,,,,323,,,,,,621,,,,,20,,,,,,,,,,,,,,',
',,,,,,20,,,,,20,,20,,41,,,,,,,,,,,41,41,,42,,,42,41,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,245,,,,,,,41,,295,295,295,,,,,42,,,,,,342,343,,345,41',
',,,,,,,41,41,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,323,,,,41,,,,,,,323,',
',,,,,,,,,,,,,,,,,,,,,,,,,386,,,,,41,41,,,996,,,,,,,,,,,,,,,,,,,,,42',
',,,,,41,,,,,42,42,,,,,,42,,,,,,,,,,,,386,,,,,41,,,,,,,,,,,,,,,,,,,,',
'41,,42,,,41,,41,295,443,,,449,295,,,,,449,,,42,,,,,,,,42,42,245,,,481',
'482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498',
'499,500,501,502,42,,,,503,,,,,,,42,295,,,,,,,295,,,295,,,,,,,295,,295',
',,295,295,,,,,,,,,,387,,,,,42,42,,,997,,,,,,,,,,,,,,,,,,,552,,553,,',
',295,295,42,,,,,,,,,,,,,,,,,,,,,,,,387,,,,,42,,,,,,,,,,,,,,,,,,,,,42',
',,,,42,,42,,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,295,,449,449,449,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295',
',,295,,295,,,,,,,,,,,,,,,295,,,,,,,,,,718,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,295,449,295,,,807,,,295,295,449,449,,,,,449,449',
',,,,,,,,,,,,,,,,,,,,,,,295,,,295,,,,,,,,,,,,,,,449,,,,,295,,,,,295,',
',295,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,295,,,,,',
',,,,,,,,,,,,,,,,295,,,,,,,449,,,,,,,,,,,,,449,449,449,449,,919,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,295,449,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,295,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,295' ]
        racc_goto_table = arr = ::Array.new(4164, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,120,39,37,35,45,45,45,23,23,26,37,23,115,87,69,86,86,86,70,70,173',
'62,79,79,15,2,9,104,39,51,14,172,9,28,28,21,21,12,41,41,30,30,69,36',
'30,210,155,155,84,84,84,49,49,123,73,73,64,79,74,74,205,8,50,50,50,35',
'120,77,109,63,89,23,23,23,23,58,108,108,17,194,111,90,70,5,90,221,9',
'216,59,57,57,57,6,164,6,6,6,150,6,6,6,49,52,211,30,30,30,30,174,151',
'70,190,24,67,162,24,160,7,32,148,166,24,217,191,32,149,76,167,68,191',
'68,1,76,195,161,195,161,3,195,10,85,85,11,13,16,85,18,20,195,5,9,22',
'25,29,31,42,44,48,54,9,75,80,83,88,60,100,103,106,117,119,124,125,126',
'127,128,129,130,131,132,133,134,135,136,137,138,139,140,164,141,152',
'151,158,165,168,169,170,171,217,30,30,45,177,178,180,182,183,184,30',
'30,26,26,185,87,26,186,189,14,192,193,26,166,37,60,161,196,6,89,167',
'90,90,221,197,198,199,200,7,201,70,202,84,84,14,203,204,151,172,60,209',
'213,214,220,35,,,,45,64,115,148,210,150,,45,162,64,45,86,,160,87,,,67',
',205,,86,36,60,52,,151,,,,,164,6,149,,,149,216,221,6,6,49,49,23,84,6',
'36,,,120,79,,37,39,84,14,,,,35,14,211,87,,190,,62,79,,37,194,,,208,208',
'208,30,,86,86,,9,,155,111,57,161,,,211,174,,6,6,37,57,63,17,14,14,58',
'120,79,77,79,58,36,49,109,,8,84,,59,,,,49,59,,161,,76,161,76,,195,,',
'195,,35,5,,,,,,,,36,155,155,6,,60,,,,123,,,,,,,,,,,,149,51,149,,,37',
',51,64,,,,211,39,70,210,,210,49,35,85,,,5,87,,,,60,60,87,21,45,,6,6',
',161,6,,,87,,,,60,,172,172,,73,60,89,,74,,,6,12,12,,210,210,90,221,39',
'70,49,49,,60,,36,87,50,,205,205,,,50,,149,149,155,,86,6,,,,15,,,34,45',
',,,,34,,,,210,62,79,87,,,,30,,62,79,34,28,87,195,,6,,,50,34,34,34,,34',
'34,34,24,70,12,,,,149,35,149,24,24,70,32,32,,24,24,,32,32,76,76,,34',
',,76,76,34,34,,,34,34,,89,45,41,,12,,,,149,,,,14,87,30,14,,120,49,,30',
',,,,,6,108,,,,,,,76,,,6,70,208,208,,208,208,,208,,,,,45,,34,,,,210,34',
'34,34,34,34,87,26,,,60,86,6,104,,154,26,26,,6,108,,26,26,70,39,36,,',
',115,70,,,210,,,210,2,9,,21,,60,108,173,6,,,39,,62,79,,,6,87,,24,87',
'73,32,62,79,74,,,,,76,6,,86,12,,12,39,,,6,60,6,76,76,76,76,,,,69,,,34',
'34,34,34,34,34,34,,84,,,34,34,34,,,154,39,,,210,45,,102,6,34,6,,,,,87',
',208,208,208,208,14,,,,,156,,,156,6,,,,,39,,84,70,14,,,,,60,34,,,26',
'70,,159,34,159,,34,102,102,60,102,,6,39,,,,,,35,,,76,,,34,,,23,34,14',
',,34,34,60,,208,6,,,,23,157,157,157,,,,14,34,,,,,6,,14,,,34,30,,,,,',
'49,,,156,34,34,34,,30,,,,39,,,,,14,34,,34,,159,,,,,,,,,120,,154,,120',
'154,,,154,,154,,,,39,,,,,,,,79,,,,,6,6,6,,79,,,53,,14,14,,,53,,,,,,',
',,157,157,157,157,,157,53,,,,,,,212,,53,53,53,14,53,102,,,120,,,,,,',
',,,79,154,,154,,154,37,154,39,34,,,53,,14,,6,53,53,,,53,157,157,157',
'157,,159,,159,154,159,,157,,14,45,,,156,6,,156,,,156,,156,87,6,6,6,6',
',6,,,,,,,6,,34,159,,159,70,,,34,,34,70,6,39,53,,34,,,53,53,53,53,53',
',34,,,,,,,,,,,,,,,102,,6,6,6,6,102,,,,,102,,6,,,,,156,102,156,,156,159',
'156,,,212,,,212,34,,212,34,212,,159,,159,,159,34,,,,,156,,,,,,,34,,',
',,,34,,,,,,159,,,,53,53,53,53,53,53,53,,,,,53,53,53,34,,,,,102,34,34',
',102,,53,,,,34,34,,,,,34,34,,212,,212,,212,,212,,,,,,,,,,,,,,,,,53,',
',,,34,212,53,,,53,,,,,,34,,,,,,,,,,,,,53,,,,53,,,,,53,,,,,,,102,102',
',,,,,,,,,,,,,,,,,53,,,,,,,,,34,,53,53,53,,34,,,,,34,34,,,,,,34,,,,,',
',,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,34,,,,,,,,34',
'34,,,,,,,,,,,,,,,,,,,,,,,,34,,34,,,,,,,,53,,,34,34,,,,,,,,,,,,,,,,,',
',,,,,82,82,,56,,,,,,56,34,,,,,34,34,,,34,,,,,56,,,53,,,,,,56,56,56,53',
'56,,,,,,,27,,34,,,,27,53,,,,,,,,,,,,56,,,,,56,56,34,,56,,,34,,82,27',
'82,,,82,82,,,,,,,,,,,,,34,53,,,53,34,,34,27,,,,53,,,,,,27,,,,,34,53',
',,,,,53,56,82,,,,56,56,56,56,56,,,,,,,,,,,,,,53,,,,,,53,53,,,,,,,,53',
'53,,27,,,53,53,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,82,,33,,,,,,',
',,,,,56,56,56,56,56,56,56,,,,,56,56,56,,,33,,,,,,,,,56,,,,,,,,,,,,,',
',,27,33,27,,,27,53,,,,,27,53,,,,,53,53,,56,,,,53,27,,56,,,56,,82,,,82',
',82,,,,53,,,,,,,,56,,,,56,,,,,56,,,,,,53,33,,,,,,,,,33,,,,,,,,,53,56',
',,,,,27,53,53,,27,56,56,56,,27,,82,,,,,,,,,,,,,,,53,,53,,,,,,,27,,,',
'53,53,,,,,,,27,27,,,,,,,,,,,,,,,,,,,,,,,33,,33,,,33,,53,53,,82,33,,',
',,,,82,82,,,,,,33,,,,,,,,,,,,,53,,,,,,,,,,,,,82,56,,82,,,,,,,,,,,,,53',
',,,,,,82,,,,,82,,,82,,,,,,53,,33,,,53,33,53,,,82,33,,,,,,,56,,,,,53',
',,,56,,,,82,,,,,,33,,,,,56,,,,,,,33,33,,,,,,,,,27,,,,,,82,,,,,,,,,,',
',,,,,,,,,,,,56,,,56,,,,,,,,56,,,,,,,,,,,,56,,,,,,56,,,,,,,,,,,,27,,38',
'27,,,,,38,,,,56,,,,,,56,56,,,,,,,,56,56,,,,,56,56,,38,38,38,,,,,,,,',
',,,,,82,27,,,,,,27,,,38,,,,,,27,27,,,38,,27,27,,,,,,,,,,,,,,,,33,,,',
',,,,,82,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,,56,,,38,,,56,,,,,56,56,,,,',
',56,,,,,,,,,,,33,,,33,,,56,,,,,,27,,,,,,,,,,,27,27,,,,,56,27,,,,,,,',
',,,,,,,,,27,56,,,,,33,,,56,56,,33,,38,,38,,,38,,33,33,27,,38,,33,33',
',,,,,56,,56,,,38,,,27,,,,65,56,56,,27,27,65,,,,,,,,,,,,,,,,,,,,,,,,',
'27,,,65,65,65,,,,56,56,27,,,,,,,,,,,,,,,,38,,65,,38,,,,38,38,,,65,56',
',65,,,,,,,33,27,27,38,,27,,,,,,33,33,38,,,,,33,,56,,,,,38,38,,,,,,27',
',,33,,,38,,38,56,,,65,,56,,56,,,,,65,,,,,33,,,27,,,56,,,,,,,,,,,,,33',
',,,,27,,,33,33,27,,27,,,,,,,,,,,,,,,,,,66,,,,,33,66,,,,,,,,,,33,,,,',
',,,,,,,,,,,,65,66,66,66,,,,,,,,,,,,,,,,,,,33,33,,65,,66,,,,,,,,,,66',
',,66,,,,,,,,,,,,,33,,,38,,,,,,,38,,,,,,,,38,,,,,,,,,,,33,,,,,,,,65,66',
',,65,,,,65,65,66,,,33,,,,,33,,33,,,,,65,,,,,,,,,,65,38,,,38,,,,,,,,65',
'65,,,,,,,,,,,,65,,65,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,,38,,66,,,,,,',
'38,38,,,,,38,38,,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,38,,,,,,,,,,,38,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,66,,,,66,66,,,,,,,,,,,,,38,,,66,',
',,,,65,,38,38,66,,,65,38,38,,,,,,65,66,66,,,,,,,,,38,,,66,,66,,,,,,',
',,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,38,,65,,,65,,,38,38,,,,,,,,,,,,,,,,',
',,,,,,,,,38,,,,,,,,,,,38,,,,,,,,,65,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,38',
'38,,,38,,,,,,,,,,,,,,,,,,65,,,,,,,,,38,,65,66,,,,,,,66,,,,,,,,66,,,',
',,38,,,,,38,,,,,,,,,,,,,,,,,,,,,38,,,,,38,,38,,65,,,,,,,,,,,65,65,,66',
',,66,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,65,,40,40,40,,,,,66',
',,,,,40,40,,40,65,,,,,,,,65,65,,,,,,,,,,,,,,,,,,,,,,,,,,65,,,,,,,66',
',,,65,,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,65,,,,,65,65,,,65,,,,,,,,,',
',,,,,,,,,,,66,,,,,,65,,,,,66,66,,,,,,66,,,,,,,,,,,,65,,,,,65,,,,,,,',
',,,,,,,,,,,,,65,,66,,,65,,65,40,40,,,40,40,,,,,40,,,66,,,,,,,,66,66',
'40,,,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40',
'40,66,,,,40,,,,,,,66,40,,,,,,,40,,,40,,,,,,,40,,40,,,40,40,,,,,,,,,',
'66,,,,,66,66,,,66,,,,,,,,,,,,,,,,,,,40,,40,,,,40,40,66,,,,,,,,,,,,,',
',,,,,,,,,,66,,,,,66,,,,,,,,,,,,,,,,,,,,,66,,,,,66,,66,,,,,,,,,,,,,,',
',,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,40,40,40,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,40,,40,,,,,,,,,,,,,,,40,,',
',,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,',
',,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,40,,,40',
',,40,40,40,40,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,40,,,40,,,,,,,,,,,,,',
',40,,,,,40,,,,,40,,,40,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,40,,,,',
',,,,,,,40,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,40,,,,,,,,,,,,,40,40,40,40,',
'40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(4164, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   132,    24,   138,   nil,    79,    -2,   110,    57,    25,
     4,   133,  -309,  -278,    -5,  -530,  -575,  -641,  -699,   nil,
  -382,    25,   140,   -59,  -111,    81,   -13,  1471,  -189,   -69,
   -26,    18,  -108,  1632,   509,  -224,  -406,   -16,  2071,   -20,
  3124,   -30,  -448,   nil,  -603,   -27,   nil,   nil,   131,  -177,
    34,  -252,  -410,   926,  -350,   nil,  1430,    58,    40,    53,
   -70,   nil,   -15,    32,  -280,  2323,  2510,  -504,  -243,   -60,
     8,   nil,   nil,    44,    48,  -266,  -100,    24,   nil,   -14,
   115,   nil,  1206,  -187,    17,  -419,   -16,   -16,  -342,  -227,
  -437,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    91,   nil,   198,  -184,   -37,   nil,   102,   nil,  -279,  -688,
   nil,  -678,   nil,   nil,   nil,  -349,   nil,    97,   nil,  -452,
    -4,   nil,   nil,  -571,    96,  -213,   112,   112,  -173,   113,
   113,   105,  -601,  -193,  -602,  -789,   109,  -440,  -199,  -714,
  -439,  -714,   nil,   nil,   nil,   nil,   nil,   nil,  -756,  -459,
  -487,  -768,  -639,   nil,   -82,  -523,    37,   -84,  -637,    56,
  -712,  -605,  -572,   nil,  -641,  -751,  -823,  -816,  -160,  -539,
   130,  -370,  -322,    -4,  -168,   nil,   nil,   -85,   -85,   nil,
  -488,   nil,  -300,  -812,  -403,  -510,  -638,   nil,   nil,   124,
    17,    27,   120,   120,  -318,  -259,  -176,   132,   132,   132,
  -555,  -396,  -395,   140,  -537,  -293,   nil,   nil,  -244,  -492,
  -308,  -636,   127,  -487,  -728,   nil,  -654,  -861,   nil,   nil,
  -138,  -436 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   310,     7,   363,   313,
   nil,   nil,   nil,   nil,   555,   nil,   nil,   nil,   nil,   309,
   311,   nil,   nil,   nil,    14,    15,    21,   243,   nil,   nil,
    17,   nil,   437,   244,   341,   nil,   nil,   778,   242,   473,
    24,   nil,   nil,   358,   nil,    25,    26,    27,   nil,   714,
   nil,   nil,   nil,   330,   nil,    28,   327,   452,    35,   nil,
   nil,    37,    40,    39,   nil,   239,   240,   619,   nil,   144,
   460,   143,   146,    90,    91,   nil,   442,   105,    47,    50,
   275,   548,   301,   nil,   453,   nil,   454,   465,   673,   518,
   299,   283,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    61,   nil,   nil,   284,    65,   nil,    67,   nil,   nil,
    68,   882,    69,    70,    71,   nil,    72,   nil,    73,   nil,
   601,    74,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   288,   277,   722,   850,   610,   883,   749,   583,
   nil,   750,  1026,   920,   571,   nil,   572,   nil,   nil,   573,
   nil,   575,   nil,   828,   nil,   nil,   nil,   581,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   464,   286,   nil,   nil,   692,
   nil,   505,   nil,   nil,   nil,   nil,   nil,    89,    92,    94,
   nil,   nil,   nil,   nil,   nil,   631,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   865,   787,   570,   nil,   574,
   873,   586,   588,   589,   931,   592,   593,   932,   596,   599,
   nil,   304 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 151, :_reduce_1,
  2, 149, :_reduce_2,
  2, 150, :_reduce_3,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  3, 152, :_reduce_6,
  2, 152, :_reduce_none,
  1, 155, :_reduce_none,
  0, 159, :_reduce_9,
  3, 155, :_reduce_10,
  0, 161, :_reduce_11,
  4, 158, :_reduce_12,
  0, 166, :_reduce_13,
  6, 160, :_reduce_14,
  3, 160, :_reduce_15,
  2, 162, :_reduce_16,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  3, 167, :_reduce_19,
  2, 167, :_reduce_20,
  1, 168, :_reduce_none,
  1, 168, :_reduce_22,
  0, 179, :_reduce_23,
  4, 157, :_reduce_24,
  3, 157, :_reduce_25,
  3, 157, :_reduce_26,
  3, 157, :_reduce_27,
  2, 157, :_reduce_28,
  3, 157, :_reduce_29,
  3, 157, :_reduce_30,
  3, 157, :_reduce_31,
  3, 157, :_reduce_32,
  3, 157, :_reduce_33,
  4, 157, :_reduce_34,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  3, 157, :_reduce_38,
  1, 157, :_reduce_none,
  3, 172, :_reduce_40,
  3, 172, :_reduce_41,
  6, 172, :_reduce_42,
  5, 172, :_reduce_43,
  5, 172, :_reduce_44,
  5, 172, :_reduce_45,
  5, 172, :_reduce_46,
  3, 172, :_reduce_47,
  1, 180, :_reduce_48,
  1, 180, :_reduce_none,
  1, 178, :_reduce_none,
  3, 178, :_reduce_51,
  3, 178, :_reduce_52,
  3, 178, :_reduce_53,
  2, 178, :_reduce_54,
  1, 178, :_reduce_none,
  1, 171, :_reduce_56,
  0, 191, :_reduce_57,
  0, 192, :_reduce_58,
  4, 189, :_reduce_59,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 194, :_reduce_none,
  4, 194, :_reduce_63,
  0, 202, :_reduce_64,
  4, 199, :_reduce_65,
  1, 201, :_reduce_66,
  2, 193, :_reduce_67,
  3, 193, :_reduce_68,
  4, 193, :_reduce_69,
  5, 193, :_reduce_70,
  4, 193, :_reduce_71,
  5, 193, :_reduce_72,
  2, 193, :_reduce_73,
  2, 193, :_reduce_74,
  2, 193, :_reduce_75,
  2, 193, :_reduce_76,
  2, 193, :_reduce_77,
  1, 173, :_reduce_none,
  3, 173, :_reduce_79,
  1, 207, :_reduce_none,
  3, 207, :_reduce_81,
  1, 206, :_reduce_82,
  2, 206, :_reduce_83,
  3, 206, :_reduce_84,
  5, 206, :_reduce_85,
  2, 206, :_reduce_86,
  4, 206, :_reduce_87,
  2, 206, :_reduce_88,
  4, 206, :_reduce_89,
  1, 206, :_reduce_90,
  3, 206, :_reduce_91,
  1, 210, :_reduce_none,
  3, 210, :_reduce_93,
  2, 209, :_reduce_94,
  3, 209, :_reduce_95,
  1, 212, :_reduce_96,
  3, 212, :_reduce_97,
  1, 211, :_reduce_98,
  1, 211, :_reduce_99,
  4, 211, :_reduce_100,
  3, 211, :_reduce_101,
  3, 211, :_reduce_102,
  3, 211, :_reduce_103,
  3, 211, :_reduce_104,
  2, 211, :_reduce_105,
  1, 211, :_reduce_106,
  1, 175, :_reduce_107,
  1, 175, :_reduce_108,
  4, 175, :_reduce_109,
  3, 175, :_reduce_110,
  3, 175, :_reduce_111,
  3, 175, :_reduce_112,
  3, 175, :_reduce_113,
  2, 175, :_reduce_114,
  1, 175, :_reduce_115,
  1, 215, :_reduce_116,
  1, 215, :_reduce_none,
  2, 216, :_reduce_118,
  1, 216, :_reduce_119,
  3, 216, :_reduce_120,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_124,
  1, 217, :_reduce_125,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 169, :_reduce_128,
  1, 169, :_reduce_none,
  1, 170, :_reduce_130,
  0, 223, :_reduce_131,
  4, 170, :_reduce_132,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  3, 188, :_reduce_205,
  3, 188, :_reduce_206,
  6, 188, :_reduce_207,
  5, 188, :_reduce_208,
  5, 188, :_reduce_209,
  5, 188, :_reduce_210,
  5, 188, :_reduce_211,
  0, 229, :_reduce_212,
  5, 188, :_reduce_213,
  3, 188, :_reduce_214,
  3, 188, :_reduce_215,
  3, 188, :_reduce_216,
  3, 188, :_reduce_217,
  3, 188, :_reduce_218,
  3, 188, :_reduce_219,
  3, 188, :_reduce_220,
  3, 188, :_reduce_221,
  3, 188, :_reduce_222,
  4, 188, :_reduce_223,
  2, 188, :_reduce_224,
  2, 188, :_reduce_225,
  3, 188, :_reduce_226,
  3, 188, :_reduce_227,
  3, 188, :_reduce_228,
  3, 188, :_reduce_229,
  1, 188, :_reduce_none,
  3, 188, :_reduce_231,
  3, 188, :_reduce_232,
  3, 188, :_reduce_233,
  3, 188, :_reduce_234,
  3, 188, :_reduce_235,
  2, 188, :_reduce_236,
  2, 188, :_reduce_237,
  3, 188, :_reduce_238,
  3, 188, :_reduce_239,
  3, 188, :_reduce_240,
  3, 188, :_reduce_241,
  3, 188, :_reduce_242,
  6, 188, :_reduce_243,
  1, 188, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  3, 226, :_reduce_249,
  3, 226, :_reduce_250,
  1, 230, :_reduce_251,
  1, 231, :_reduce_none,
  2, 231, :_reduce_253,
  4, 231, :_reduce_254,
  2, 231, :_reduce_255,
  1, 224, :_reduce_none,
  3, 224, :_reduce_257,
  3, 235, :_reduce_258,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 183, :_reduce_263,
  4, 183, :_reduce_264,
  2, 183, :_reduce_265,
  1, 205, :_reduce_266,
  2, 205, :_reduce_267,
  2, 205, :_reduce_268,
  4, 205, :_reduce_269,
  1, 205, :_reduce_270,
  0, 239, :_reduce_271,
  2, 198, :_reduce_272,
  2, 238, :_reduce_273,
  2, 237, :_reduce_274,
  1, 237, :_reduce_none,
  1, 232, :_reduce_276,
  2, 232, :_reduce_277,
  3, 232, :_reduce_278,
  4, 232, :_reduce_279,
  1, 177, :_reduce_280,
  1, 177, :_reduce_281,
  3, 176, :_reduce_282,
  4, 176, :_reduce_283,
  2, 176, :_reduce_284,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_295,
  0, 274, :_reduce_296,
  4, 227, :_reduce_297,
  0, 275, :_reduce_298,
  3, 227, :_reduce_299,
  0, 276, :_reduce_300,
  4, 227, :_reduce_301,
  3, 227, :_reduce_302,
  3, 227, :_reduce_303,
  2, 227, :_reduce_304,
  0, 277, :_reduce_305,
  4, 227, :_reduce_306,
  0, 278, :_reduce_307,
  4, 227, :_reduce_308,
  1, 227, :_reduce_309,
  4, 227, :_reduce_310,
  3, 227, :_reduce_311,
  1, 227, :_reduce_312,
  5, 227, :_reduce_313,
  4, 227, :_reduce_314,
  3, 227, :_reduce_315,
  2, 227, :_reduce_316,
  1, 227, :_reduce_none,
  2, 227, :_reduce_318,
  2, 227, :_reduce_319,
  6, 227, :_reduce_320,
  6, 227, :_reduce_321,
  4, 227, :_reduce_322,
  4, 227, :_reduce_323,
  5, 227, :_reduce_324,
  4, 227, :_reduce_325,
  6, 227, :_reduce_326,
  0, 279, :_reduce_327,
  0, 280, :_reduce_328,
  7, 227, :_reduce_329,
  0, 281, :_reduce_330,
  0, 282, :_reduce_331,
  0, 283, :_reduce_332,
  9, 227, :_reduce_333,
  0, 284, :_reduce_334,
  0, 285, :_reduce_335,
  6, 227, :_reduce_336,
  0, 286, :_reduce_337,
  0, 287, :_reduce_338,
  7, 227, :_reduce_339,
  0, 288, :_reduce_340,
  0, 289, :_reduce_341,
  9, 227, :_reduce_342,
  1, 227, :_reduce_343,
  1, 227, :_reduce_344,
  1, 227, :_reduce_345,
  1, 227, :_reduce_346,
  1, 182, :_reduce_347,
  1, 249, :_reduce_none,
  1, 255, :_reduce_none,
  1, 258, :_reduce_none,
  1, 260, :_reduce_none,
  1, 261, :_reduce_none,
  1, 262, :_reduce_none,
  1, 264, :_reduce_none,
  1, 266, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 290, :_reduce_none,
  1, 291, :_reduce_none,
  1, 292, :_reduce_none,
  1, 293, :_reduce_none,
  1, 294, :_reduce_none,
  1, 164, :_reduce_none,
  1, 295, :_reduce_none,
  1, 250, :_reduce_none,
  1, 204, :_reduce_none,
  1, 256, :_reduce_none,
  1, 256, :_reduce_none,
  2, 256, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 257, :_reduce_none,
  5, 257, :_reduce_373,
  1, 259, :_reduce_none,
  2, 259, :_reduce_375,
  1, 265, :_reduce_none,
  1, 265, :_reduce_377,
  1, 296, :_reduce_none,
  3, 296, :_reduce_379,
  1, 299, :_reduce_380,
  3, 299, :_reduce_381,
  1, 298, :_reduce_382,
  4, 298, :_reduce_383,
  6, 298, :_reduce_384,
  3, 298, :_reduce_385,
  5, 298, :_reduce_386,
  2, 298, :_reduce_387,
  4, 298, :_reduce_388,
  1, 298, :_reduce_389,
  3, 298, :_reduce_390,
  4, 300, :_reduce_391,
  2, 300, :_reduce_392,
  2, 300, :_reduce_393,
  1, 300, :_reduce_394,
  2, 305, :_reduce_395,
  1, 305, :_reduce_none,
  6, 306, :_reduce_397,
  8, 306, :_reduce_398,
  4, 306, :_reduce_399,
  6, 306, :_reduce_400,
  4, 306, :_reduce_401,
  2, 306, :_reduce_402,
  6, 306, :_reduce_403,
  2, 306, :_reduce_404,
  4, 306, :_reduce_405,
  6, 306, :_reduce_406,
  2, 306, :_reduce_407,
  4, 306, :_reduce_408,
  2, 306, :_reduce_409,
  4, 306, :_reduce_410,
  1, 306, :_reduce_411,
  1, 310, :_reduce_412,
  1, 310, :_reduce_413,
  3, 311, :_reduce_414,
  1, 311, :_reduce_415,
  4, 311, :_reduce_416,
  1, 312, :_reduce_none,
  4, 312, :_reduce_418,
  1, 313, :_reduce_419,
  3, 313, :_reduce_420,
  1, 314, :_reduce_421,
  1, 314, :_reduce_none,
  0, 318, :_reduce_423,
  0, 319, :_reduce_424,
  4, 254, :_reduce_425,
  4, 316, :_reduce_426,
  1, 316, :_reduce_427,
  3, 317, :_reduce_428,
  3, 317, :_reduce_429,
  3, 321, :_reduce_430,
  2, 195, :_reduce_431,
  4, 195, :_reduce_432,
  5, 195, :_reduce_433,
  5, 195, :_reduce_434,
  0, 324, :_reduce_435,
  3, 253, :_reduce_436,
  4, 253, :_reduce_437,
  4, 253, :_reduce_438,
  3, 253, :_reduce_439,
  3, 253, :_reduce_440,
  3, 253, :_reduce_441,
  2, 253, :_reduce_442,
  1, 253, :_reduce_443,
  4, 253, :_reduce_444,
  0, 325, :_reduce_445,
  4, 252, :_reduce_446,
  0, 326, :_reduce_447,
  4, 252, :_reduce_448,
  0, 327, :_reduce_449,
  0, 328, :_reduce_450,
  4, 200, :_reduce_451,
  0, 329, :_reduce_452,
  0, 330, :_reduce_453,
  4, 322, :_reduce_454,
  0, 332, :_reduce_455,
  6, 263, :_reduce_456,
  1, 331, :_reduce_none,
  1, 331, :_reduce_none,
  6, 163, :_reduce_459,
  0, 163, :_reduce_460,
  1, 333, :_reduce_461,
  1, 333, :_reduce_none,
  1, 333, :_reduce_none,
  2, 334, :_reduce_464,
  1, 334, :_reduce_none,
  2, 165, :_reduce_466,
  1, 165, :_reduce_none,
  1, 240, :_reduce_468,
  1, 240, :_reduce_469,
  1, 240, :_reduce_none,
  1, 241, :_reduce_471,
  1, 336, :_reduce_472,
  1, 336, :_reduce_none,
  2, 336, :_reduce_474,
  3, 337, :_reduce_475,
  1, 337, :_reduce_476,
  3, 242, :_reduce_477,
  3, 243, :_reduce_478,
  3, 244, :_reduce_479,
  3, 244, :_reduce_480,
  1, 341, :_reduce_481,
  3, 341, :_reduce_482,
  1, 342, :_reduce_none,
  2, 342, :_reduce_484,
  3, 246, :_reduce_485,
  0, 345, :_reduce_486,
  4, 246, :_reduce_487,
  1, 344, :_reduce_488,
  3, 344, :_reduce_489,
  3, 245, :_reduce_490,
  3, 245, :_reduce_491,
  3, 247, :_reduce_492,
  3, 247, :_reduce_493,
  1, 346, :_reduce_494,
  3, 346, :_reduce_495,
  1, 347, :_reduce_496,
  3, 347, :_reduce_497,
  1, 338, :_reduce_498,
  2, 338, :_reduce_499,
  1, 339, :_reduce_500,
  2, 339, :_reduce_501,
  1, 340, :_reduce_502,
  2, 340, :_reduce_503,
  1, 343, :_reduce_504,
  0, 349, :_reduce_505,
  3, 343, :_reduce_506,
  0, 350, :_reduce_507,
  4, 343, :_reduce_508,
  1, 348, :_reduce_509,
  1, 348, :_reduce_510,
  1, 348, :_reduce_511,
  1, 348, :_reduce_none,
  2, 221, :_reduce_513,
  1, 221, :_reduce_514,
  1, 351, :_reduce_none,
  1, 351, :_reduce_none,
  1, 351, :_reduce_none,
  1, 351, :_reduce_none,
  3, 222, :_reduce_519,
  1, 335, :_reduce_none,
  2, 335, :_reduce_521,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 214, :_reduce_531,
  1, 214, :_reduce_532,
  1, 214, :_reduce_533,
  1, 214, :_reduce_534,
  1, 214, :_reduce_535,
  1, 214, :_reduce_536,
  1, 214, :_reduce_537,
  1, 248, :_reduce_538,
  1, 248, :_reduce_539,
  1, 181, :_reduce_540,
  1, 181, :_reduce_541,
  1, 186, :_reduce_542,
  1, 186, :_reduce_543,
  0, 352, :_reduce_544,
  4, 267, :_reduce_545,
  1, 267, :_reduce_546,
  3, 271, :_reduce_547,
  0, 354, :_reduce_548,
  3, 271, :_reduce_549,
  4, 353, :_reduce_550,
  2, 353, :_reduce_551,
  2, 353, :_reduce_552,
  1, 353, :_reduce_none,
  2, 356, :_reduce_554,
  0, 356, :_reduce_555,
  6, 320, :_reduce_556,
  8, 320, :_reduce_557,
  4, 320, :_reduce_558,
  6, 320, :_reduce_559,
  4, 320, :_reduce_560,
  6, 320, :_reduce_561,
  2, 320, :_reduce_562,
  4, 320, :_reduce_563,
  6, 320, :_reduce_564,
  2, 320, :_reduce_565,
  4, 320, :_reduce_566,
  2, 320, :_reduce_567,
  4, 320, :_reduce_568,
  1, 320, :_reduce_569,
  0, 320, :_reduce_570,
  1, 315, :_reduce_571,
  1, 315, :_reduce_572,
  1, 315, :_reduce_573,
  1, 315, :_reduce_574,
  1, 297, :_reduce_none,
  1, 297, :_reduce_576,
  1, 358, :_reduce_none,
  1, 359, :_reduce_none,
  3, 359, :_reduce_579,
  1, 307, :_reduce_580,
  3, 307, :_reduce_581,
  1, 360, :_reduce_none,
  2, 361, :_reduce_583,
  1, 361, :_reduce_584,
  2, 362, :_reduce_585,
  1, 362, :_reduce_586,
  1, 301, :_reduce_none,
  3, 301, :_reduce_588,
  1, 355, :_reduce_none,
  3, 355, :_reduce_590,
  1, 363, :_reduce_none,
  1, 363, :_reduce_none,
  2, 302, :_reduce_593,
  1, 302, :_reduce_594,
  3, 364, :_reduce_595,
  3, 365, :_reduce_596,
  1, 308, :_reduce_597,
  3, 308, :_reduce_598,
  1, 357, :_reduce_599,
  3, 357, :_reduce_600,
  1, 366, :_reduce_none,
  1, 366, :_reduce_none,
  2, 309, :_reduce_603,
  1, 309, :_reduce_604,
  1, 367, :_reduce_none,
  1, 367, :_reduce_none,
  2, 304, :_reduce_607,
  2, 303, :_reduce_608,
  0, 303, :_reduce_609,
  1, 272, :_reduce_none,
  0, 368, :_reduce_611,
  4, 272, :_reduce_612,
  1, 251, :_reduce_613,
  2, 251, :_reduce_none,
  1, 234, :_reduce_none,
  3, 234, :_reduce_616,
  3, 369, :_reduce_617,
  2, 369, :_reduce_618,
  4, 369, :_reduce_619,
  2, 369, :_reduce_620,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  1, 273, :_reduce_none,
  1, 273, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  0, 153, :_reduce_none,
  1, 153, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  2, 208, :_reduce_none,
  2, 184, :_reduce_none,
  0, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 268, :_reduce_646,
  1, 268, :_reduce_none,
  1, 156, :_reduce_none,
  2, 156, :_reduce_649,
  0, 154, :_reduce_650 ]

racc_reduce_n = 651

racc_shift_n = 1095

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tLOWEST => 144,
  :tEQL => 145,
  :tBDOT2 => 146,
  :tBDOT3 => 147 }

racc_nt_base = 148

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tLOWEST",
  "tEQL",
  "tBDOT2",
  "tBDOT3",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "@29",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "@36",
  "cases",
  "@37",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "@38",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@39",
  "@40",
  "sym",
  "@41",
  "args_tail",
  "@42",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@43",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

                      lexer.cond.pop # local_pop
                      lexer.cmdarg.pop

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug20 2, val, result

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_24(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_28(val, _values, result)
                      result = val[1]

    result
end

def _reduce_29(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_30(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_31(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_34(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_37(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_43(val, _values, result)
                      prim, _, id, opasgn, rhs = val
                      result = s(:op_asgn, prim, rhs, id.to_sym, opasgn.to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_45(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

# reduce 49 omitted

# reduce 50 omitted

def _reduce_51(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_52(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_53(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_54(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 55 omitted

def _reduce_56(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_57(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_59(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      blk, _, msg, args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_64(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_65(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend

    result
end

def _reduce_66(val, _values, result)
                      msg, = val
                      result = new_call(nil, msg.to_sym).line lexer.lineno

    result
end

def _reduce_67(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_68(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_69(val, _values, result)
                      lhs, callop, op, args = val
                      result = new_call lhs, op.to_sym, args, callop

    result
end

def _reduce_70(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_71(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_72(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_73(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_74(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_75(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_76(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 78 omitted

def _reduce_79(val, _values, result)
                      result = val[1]

    result
end

# reduce 80 omitted

def _reduce_81(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_82(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_83(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_84(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_85(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_86(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_87(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_88(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_89(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_90(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_91(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = val[1]

    result
end

def _reduce_94(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_95(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_96(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_97(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_102(val, _values, result)
                      recv, _, id = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, id = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      _, id = val
                      l = lexer.lineno

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_107(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line

    result
end

def _reduce_108(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line
                      debug20 9, val, result

    result
end

def _reduce_109(val, _values, result)
                      lhs, _, args, _ = val
                      result = self.aryset lhs, args

    result
end

def _reduce_110(val, _values, result)
                      lhs, op, id = val
                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_111(val, _values, result)
                      lhs, _, id = val
                      result = new_attrasgn lhs, id

    result
end

def _reduce_112(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_113(val, _values, result)
                      expr, _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_114(val, _values, result)
                      _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      l = lexer.lineno
                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_115(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_116(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 117 omitted

def _reduce_118(val, _values, result)
                      _, name = val
                      result = s(:colon3, name.to_sym).line lexer.lineno

    result
end

def _reduce_119(val, _values, result)
                      result = val[0].to_sym

    result
end

def _reduce_120(val, _values, result)
                      pval, _, name = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

def _reduce_124(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]

    result
end

def _reduce_125(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym

    result
end

# reduce 126 omitted

# reduce 127 omitted

def _reduce_128(val, _values, result)
                      id, = val
                      result = s(:lit, id.to_sym).line lexer.lineno

    result
end

# reduce 129 omitted

def _reduce_130(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_131(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_132(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

def _reduce_205(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_206(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_210(val, _values, result)
                      lhs, _, id, op, rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_211(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_212(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_213(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_214(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_215(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_223(val, _values, result)
                      lit = s(:lit, val[1]).line lexer.lineno
                      result = new_call(new_call(lit, :"**", argl(val[3])), :"-@")


    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_234(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_235(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_236(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_237(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_238(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_239(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_240(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_241(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_242(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_243(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_250(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_251(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_254(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_255(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_258(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = args val

    result
end

def _reduce_264(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_265(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_266(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_267(val, _values, result)
                      result = call_args val

    result
end

def _reduce_268(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_269(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_270(val, _values, result)
                      result = call_args val

    result
end

def _reduce_271(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_272(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_273(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_274(val, _values, result)
                      result = val[1]

    result
end

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_277(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_278(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_279(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_280(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_281(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_283(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_284(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      msg, = val
                      result = new_call nil, msg.to_sym

    result
end

def _reduce_296(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_297(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_298(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_299(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_301(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_302(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_303(val, _values, result)
                      expr, _, id = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_304(val, _values, result)
                      _, id = val

                      result = s(:colon3, id.to_sym).line lexer.lineno

    result
end

def _reduce_305(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_306(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_307(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_308(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_309(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_310(val, _values, result)
                      result = new_yield val[2]

    result
end

def _reduce_311(val, _values, result)
                      result = new_yield

    result
end

def _reduce_312(val, _values, result)
                      result = new_yield

    result
end

def _reduce_313(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_314(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_315(val, _values, result)
                      debug20 14, val, result

    result
end

def _reduce_316(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 317 omitted

def _reduce_318(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_319(val, _values, result)
                      result = val[1] # TODO: fix lineno

    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_321(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_323(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_324(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_325(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_326(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_327(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_329(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_330(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_331(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_332(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_333(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_334(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_335(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_336(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_337(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      self.comments.push self.lexer.comments

    result
end

def _reduce_338(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_339(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_340(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_341(val, _values, result)
                      result = [self.in_def, lexer.lineno]

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL
                      self.comments.push self.lexer.comments

    result
end

def _reduce_342(val, _values, result)
                      _, _recv, _, _, _name, (in_def, _lineno), _args, _body, _ = val

                      result = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_343(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_344(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_345(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_346(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_347(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[1]

    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = val[1]

    result
end

def _reduce_380(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_381(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_382(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_383(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym

    result
end

def _reduce_384(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2

    result
end

def _reduce_385(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*

    result
end

def _reduce_386(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2

    result
end

def _reduce_387(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"

    result
end

def _reduce_388(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args

    result
end

def _reduce_389(val, _values, result)
                      result = block_var :*

    result
end

def _reduce_390(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args

    result
end

def _reduce_391(val, _values, result)
                      result = call_args val

    result
end

def _reduce_392(val, _values, result)
                      result = call_args val

    result
end

def _reduce_393(val, _values, result)
                      result = call_args val

    result
end

def _reduce_394(val, _values, result)
                      line = lexer.lineno
                      result = call_args val # TODO: push line down
                      result.line line

    result
end

def _reduce_395(val, _values, result)
                      result = args val

    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = args val

    result
end

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args val

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_403(val, _values, result)
                      result = args val

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
                      result = args val

    result
end

def _reduce_407(val, _values, result)
                      result = args val

    result
end

def _reduce_408(val, _values, result)
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = args val

    result
end

def _reduce_410(val, _values, result)
                      result = args val

    result
end

def _reduce_411(val, _values, result)
                      result = args val

    result
end

def _reduce_412(val, _values, result)
 result = 0
    result
end

def _reduce_413(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_414(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_416(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 417 omitted

def _reduce_418(val, _values, result)
                      result = args val

    result
end

def _reduce_419(val, _values, result)
                      result = args val

    result
end

def _reduce_420(val, _values, result)
                      result = args val

    result
end

def _reduce_421(val, _values, result)
                      id, = val
                      line = lexer.lineno
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 422 omitted

def _reduce_423(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_424(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_425(val, _values, result)
                      (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line = line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_426(val, _values, result)
                      result = args val

    result
end

def _reduce_427(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_428(val, _values, result)
                      result = val[1]

    result
end

def _reduce_429(val, _values, result)
                      result = val[1]

    result
end

def _reduce_430(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_431(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      cmd, blk = val

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_432(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_433(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_434(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_435(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_436(val, _values, result)
                      call, lineno, args = val

                      result = call.concat args.sexp_body if args
                      result.line lineno

    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]

    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], val[2].to_sym

    result
end

def _reduce_440(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_441(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_442(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_443(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_444(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_445(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_446(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_447(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_448(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_449(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_450(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_451(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_452(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_453(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_454(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_455(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_456(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]

    result
end

# reduce 457 omitted

# reduce 458 omitted

def _reduce_459(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_460(val, _values, result)
                      result = nil

    result
end

def _reduce_461(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 462 omitted

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = val[1]

    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

def _reduce_469(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_472(val, _values, result)
                      debug20 23, val, result

    result
end

# reduce 473 omitted

def _reduce_474(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_475(val, _values, result)
                      _, str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_ICNTNT

                      result = str

    result
end

def _reduce_476(val, _values, result)
                      result = new_string val

    result
end

def _reduce_477(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_478(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_479(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_480(val, _values, result)
                      result = val[1]

    result
end

def _reduce_481(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_482(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 483 omitted

def _reduce_484(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_485(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_486(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_487(val, _values, result)
                      _, line, list, _, = val
                      list.line = line
                      result = list

    result
end

def _reduce_488(val, _values, result)
                      result = new_symbol_list.line lexer.lineno

    result
end

def _reduce_489(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_490(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_491(val, _values, result)
                      result = val[1]

    result
end

def _reduce_492(val, _values, result)
                      result = s(:array).line lexer.lineno # FIX

    result
end

def _reduce_493(val, _values, result)
                      result = val[1]

    result
end

def _reduce_494(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_495(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_496(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_497(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_498(val, _values, result)
                      result = s(:str, "").line lexer.lineno

    result
end

def _reduce_499(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_500(val, _values, result)
                      result = nil

    result
end

def _reduce_501(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_502(val, _values, result)
                      result = nil

    result
end

def _reduce_503(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_504(val, _values, result)
                      result = new_string val

    result
end

def _reduce_505(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_506(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_507(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_508(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cmdarg.pop
                      lexer.cond.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_509(val, _values, result)
 result = s(:gvar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_510(val, _values, result)
 result = s(:ivar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_511(val, _values, result)
 result = s(:cvar, val[0].to_sym).line lexer.lineno
    result
end

# reduce 512 omitted

def _reduce_513(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym

    result
end

def _reduce_514(val, _values, result)
                      result = val[0].to_sym

    result
end

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug20 26, val, result
                      end

    result
end

# reduce 520 omitted

def _reduce_521(val, _values, result)
                      result = -val[1] # TODO: pt_testcase

    result
end

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

def _reduce_531(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_532(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_533(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_534(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_535(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_536(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_537(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_538(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_539(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_540(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_541(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result

    result
end

def _reduce_542(val, _values, result)
 result = s(:nth_ref,  val[0]).line lexer.lineno
    result
end

def _reduce_543(val, _values, result)
 result = s(:back_ref, val[0]).line lexer.lineno
    result
end

def _reduce_544(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_545(val, _values, result)
                      result = val[2]

    result
end

def _reduce_546(val, _values, result)
                      result = nil

    result
end

def _reduce_547(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true

    result
end

def _reduce_548(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_549(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_550(val, _values, result)
                      result = args val

    result
end

def _reduce_551(val, _values, result)
                      result = args val

    result
end

def _reduce_552(val, _values, result)
                      result = args val

    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      result = val[1]

    result
end

def _reduce_555(val, _values, result)
                      result = nil

    result
end

def _reduce_556(val, _values, result)
                      result = args val

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val

    result
end

def _reduce_568(val, _values, result)
                      result = args val

    result
end

def _reduce_569(val, _values, result)
                      result = args val

    result
end

def _reduce_570(val, _values, result)
                      result = args val

    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_572(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_573(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_574(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier

    result
end

# reduce 577 omitted

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      result = val[1]

    result
end

def _reduce_580(val, _values, result)
                      arg, = val

                      case arg
                      when Symbol then
                        result = s(:args, arg).line lexer.lineno
                      when Sexp then
                        result = arg
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end

    result
end

def _reduce_581(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << item

    result
end

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_584(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_585(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_586(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      result = args val

    result
end

# reduce 591 omitted

# reduce 592 omitted

def _reduce_593(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"

    result
end

def _reduce_594(val, _values, result)
                      result = :"**"

    result
end

def _reduce_595(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names

    result
end

def _reduce_596(val, _values, result)
                      result = self.assignable val[0], val[2]

    result
end

def _reduce_597(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_598(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_599(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_600(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 601 omitted

# reduce 602 omitted

def _reduce_603(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"

    result
end

def _reduce_604(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name

    result
end

# reduce 605 omitted

# reduce 606 omitted

def _reduce_607(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym

    result
end

def _reduce_608(val, _values, result)
                      result = val[1]

    result
end

def _reduce_609(val, _values, result)
                      result = nil

    result
end

# reduce 610 omitted

def _reduce_611(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_612(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_613(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 614 omitted

# reduce 615 omitted

def _reduce_616(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_617(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_618(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_619(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value).line sym.line

    result
end

def _reduce_620(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

# reduce 643 omitted

# reduce 644 omitted

# reduce 645 omitted

def _reduce_646(val, _values, result)
 yyerrok
    result
end

# reduce 647 omitted

# reduce 648 omitted

def _reduce_649(val, _values, result)
 yyerrok
    result
end

def _reduce_650(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby23Parser
