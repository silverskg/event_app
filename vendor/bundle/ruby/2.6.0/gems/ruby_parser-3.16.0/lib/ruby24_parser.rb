#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby24Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-527,8,85,86,87,12,78,-527,-527,-527,79,80,-527,-527,-527,83,-527,81',
'82,84,33,34,76,77,-527,285,-527,-527,-527,88,31,30,116,115,117,118,-527',
'-527,22,-527,-527,-527,-527,-527,11,49,10,13,120,119,121,110,60,112',
'111,113,-102,114,122,123,3,106,107,-108,45,46,44,-527,-527,-527,-527',
'-527,-527,-527,-527,-527,-527,-527,-527,-527,-527,602,-104,-527,-527',
'-527,43,-527,-527,36,-436,-527,62,63,-527,-527,64,-527,38,-527,-109',
'-527,48,-527,-527,-527,-527,-527,-527,-527,23,-527,287,-527,285,103',
'95,97,98,99,101,225,226,-102,96,104,-527,-527,-527,-527,-103,-527,66',
'-527,-116,93,100,102,-527,-530,108,109,285,-527,602,-527,-530,-530,-530',
'-104,602,-530,-530,-530,-101,-530,-115,602,-102,225,226,-102,648,-530',
'832,-530,-530,-530,-99,602,225,226,124,-541,861,-530,-530,-102,-530',
'-530,-530,-530,-530,-108,-104,-109,-116,-104,-111,-115,763,-113,-111',
'-113,832,128,-625,-103,831,222,127,287,285,-104,-110,-100,-530,-530',
'-530,-530,-530,-530,-530,-530,-530,-530,-530,-530,-530,-530,-112,-101',
'-530,-530,-530,647,-530,-530,831,287,-530,-108,-103,-530,-530,-103,-530',
'235,-530,-107,-530,223,-530,-530,-530,-530,-530,-530,-530,236,-530,-103',
'-530,651,-114,-542,-101,-110,128,-101,236,-106,-112,127,128,-530,-530',
'-530,-530,127,-530,128,-530,236,967,-101,127,-530,-304,860,225,226,-530',
'128,-530,-304,-304,-304,127,287,128,-304,-304,-102,-304,127,-104,-108',
'-625,-109,-116,256,-108,-115,-109,-116,-111,-113,-115,-101,224,-111',
'-113,-109,-304,-304,650,-304,-304,-304,-304,-304,-114,582,-94,579,578',
'577,-625,580,227,632,-626,253,-112,231,632,255,254,-112,-80,276,281',
'-622,478,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304',
'-304,-304,106,107,-304,-304,-304,887,675,609,-103,-114,-304,236,-110',
'-304,-114,106,107,-110,-304,233,-304,338,-304,-304,-304,-304,-304,-304',
'-304,-626,-304,339,-304,634,633,630,632,-527,634,633,630,232,880,-116',
'-527,-304,-304,-629,-105,-622,-304,225,226,-527,-629,-629,-629,-304',
'95,703,-629,-629,-304,-629,-114,587,96,-527,-105,775,236,-622,-629,776',
'-527,-623,590,-116,-530,108,109,-213,373,-629,-629,-530,-629,-629,-629',
'-629,-629,233,231,-537,108,109,397,634,633,230,-537,582,-527,579,578',
'577,793,580,228,598,597,823,-629,400,-629,-629,-629,-629,-629,-629,-629',
'-629,-629,-629,-629,-629,-629,-629,-530,-348,-629,-629,-629,-107,676',
'-530,-348,128,-629,-115,-623,-629,127,591,-530,-348,-629,632,-629,-116',
'-629,-629,-629,-629,-629,-629,-629,232,-629,-629,-629,632,-623,-541',
'231,-629,824,402,669,-111,670,475,-629,-629,-629,-629,-103,-625,-629',
'1015,476,-629,-629,-629,-629,-629,405,-629,-629,-629,-629,-629,-112',
'-530,-348,587,422,-536,920,-629,-629,-629,-629,-629,-536,-99,590,810',
'634,633,635,-629,-629,427,-629,-629,-629,-629,-629,-542,-539,-108,634',
'633,-113,-540,-111,-539,-113,232,-629,913,-540,632,729,729,-539,728',
'731,598,597,-540,-629,-629,-629,-629,-629,-629,-629,-629,-629,-629,-629',
'-629,-629,-629,-110,-538,-629,-629,-629,-100,825,-629,-538,-110,-629',
'477,729,-629,-629,731,-629,591,-629,632,-629,-109,-629,-629,-629,-629',
'-629,-629,-629,-539,-629,-629,-629,479,-540,-535,128,231,634,633,640',
'127,-535,632,541,-629,-629,-629,-629,-213,-629,669,-629,539,-532,128',
'632,-629,-304,637,127,-532,-629,424,-112,-304,-304,-304,426,425,-304',
'-304,-304,582,-304,579,578,577,587,580,634,633,652,-533,-304,-304,-304',
'128,480,590,-533,-106,127,-102,-304,-304,235,-304,-304,-304,-304,-304',
'232,-295,634,633,796,-115,231,-111,-295,585,568,729,509,551,731,634',
'633,-295,595,594,598,597,476,-304,-304,-304,-304,-304,-304,-304,-304',
'-304,-304,-304,-304,-304,-304,290,670,-304,-304,-304,231,826,-304,-534',
'519,-304,810,613,-304,-304,-534,-304,591,-304,522,-304,611,-304,-304',
'-304,-304,-304,-304,-304,-295,-304,128,-304,524,232,582,127,579,578',
'577,587,580,627,-104,-79,-304,-304,-304,-304,628,-304,590,-304,-101',
'850,256,128,-304,-304,-113,851,127,-304,236,-114,-304,-304,-304,534',
'-110,232,-304,-304,585,-304,582,535,579,578,577,542,580,595,594,598',
'597,231,253,293,-305,236,255,254,662,-304,-304,-305,-304,-304,-304,-304',
'-304,660,231,290,-305,236,-305,-304,1046,778,598,597,749,-305,-304,883',
'887,591,780,-626,545,752,-305,-304,-304,-304,-304,-304,-304,-304,-304',
'-304,-304,-304,-304,-304,-304,-304,231,231,-304,-304,-304,549,675,1037',
'1043,256,-304,236,232,-304,609,-305,780,1041,-304,415,-304,614,-304',
'-304,-304,-304,-304,-304,-304,232,-304,615,-304,-305,-304,231,639,-304',
'256,225,226,643,1037,646,-304,-304,-304,-629,-304,-626,-304,780,649',
'-304,-629,-629,-629,-304,273,274,-629,-629,-304,-629,-114,232,232,883',
'887,656,253,256,-629,-277,255,254,251,252,131,132,133,134,135,-629,-629',
'658,-629,-629,-629,-629,-629,659,663,272,271,582,236,579,578,577,232',
'580,-304,253,667,668,290,255,254,251,252,680,256,256,-629,-629,-629',
'-629,-629,-629,-629,-629,-629,-629,-629,-629,-629,-629,256,256,-629',
'-629,-629,749,676,687,236,236,-629,908,909,-629,752,910,122,123,-629',
'236,-629,-94,-629,-629,-629,-629,-629,-629,-629,706,-629,-629,-629,582',
'236,579,578,577,582,580,579,578,577,554,580,-629,-629,-444,-629,717',
'-629,718,722,725,-444,-444,-444,-629,236,-444,-444,-444,-629,-444,-112',
'256,131,132,133,134,135,749,-444,-444,-444,732,749,733,524,737,960,266',
'267,-444,-444,740,-444,-444,-444,-444,-444,741,1008,743,579,578,577',
'253,580,259,745,255,254,251,252,747,755,257,756,258,757,759,725,725',
'-444,-444,-444,-444,-444,-444,-444,-444,-444,-444,-444,-444,-444,-444',
'609,725,-444,-444,-444,782,787,-444,797,290,-444,798,-278,-444,-444',
'811,-444,509,-444,509,-444,236,-444,-444,-444,-444,-444,-444,-444,828',
'-444,-444,-444,582,276,579,578,577,582,580,579,578,577,837,580,-444',
'-444,-313,-444,839,-444,522,524,717,-313,-313,-313,-444,236,-313,-313',
'-313,-444,-313,256,290,582,290,579,578,577,749,580,-313,-313,717,749',
'256,236,878,266,267,236,-313,-313,887,-313,-313,-313,-313,-313,582,725',
'579,578,577,253,580,259,236,255,254,251,252,749,914,257,1008,258,579',
'578,577,-279,580,-313,-313,-313,-313,-313,-313,-313,-313,-313,-313,-313',
'-313,-313,-313,236,749,-313,-313,-313,919,936,-313,717,293,-313,-277',
'941,-313,-313,946,-313,236,-313,740,-313,949,-313,-313,-313,-313,-313',
'-313,-313,951,-313,953,-313,131,132,133,134,135,131,132,133,134,135',
'955,955,-313,-313,-296,-313,236,-313,961,725,725,-296,-296,-296,-313',
'725,-296,-296,-296,-313,-296,256,236,725,236,979,-280,980,740,983,-296',
'-296,-296,986,988,990,236,266,267,992,-296,-296,1004,-296,-296,-296',
'-296,-296,1005,1017,725,725,787,253,1035,259,1038,255,254,251,252,850',
'1044,1047,955,955,955,1052,1017,740,1061,-296,-296,-296,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,1063,1065,-296,-296,-296,1067',
'1067,-296,722,1017,-296,725,725,-296,-296,-626,-296,-625,-296,236,-296',
'955,-296,-296,-296,-296,-296,-296,-296,1017,-296,1090,-296,582,1067',
'579,578,577,587,580,1067,1067,1067,,,-296,-296,-296,-296,590,-296,-651',
'-296,,,,,-296,-651,-651,-651,,-296,-651,-651,-651,,-651,256,,,585,,',
',,-651,-651,-651,,595,594,598,597,266,267,,-651,-651,,-651,-651,-651',
'-651,-651,,,,,,253,,259,,255,254,251,252,,,,,,,,,591,,-651,-651,-651',
'-651,-651,-651,-651,-651,-651,-651,-651,-651,-651,-651,,,-651,-651,-651',
',,-651,,290,-651,,,-651,-651,,-651,,-651,,-651,,-651,-651,-651,-651',
'-651,-651,-651,,-651,-651,-651,,,,,,,,,,,,,-651,-651,-630,-651,,-651',
',,,-630,-630,-630,-651,,-630,-630,-630,-651,-630,256,,,,,,,,-630,-630',
'-630,-630,,,,,266,267,,-630,-630,,-630,-630,-630,-630,-630,,,,,,253',
',,,255,254,251,252,,,,,,,,,,,-630,-630,-630,-630,-630,-630,-630,-630',
'-630,-630,-630,-630,-630,-630,,,-630,-630,-630,,,-630,,,-630,,,-630',
'-630,,-630,,-630,,-630,,-630,-630,-630,-630,-630,-630,-630,,-630,-630',
'-630,582,,579,578,577,587,580,,,,,,-630,-630,-630,-630,590,-630,-631',
'-630,,,,,-630,-631,-631,-631,,-630,-631,-631,-631,,-631,,,,585,,,,,-631',
'-631,-631,-631,595,594,598,597,,,,-631,-631,,-631,-631,-631,-631,-631',
',,,,,,,,,,,,,,,,,,,,,591,,-631,-631,-631,-631,-631,-631,-631,-631,-631',
'-631,-631,-631,-631,-631,,,-631,-631,-631,,,-631,,,-631,,,-631,-631',
',-631,,-631,,-631,,-631,-631,-631,-631,-631,-631,-631,,-631,-631,-631',
'582,,579,578,577,587,580,,,,,,-631,-631,-631,-631,590,-631,-651,-631',
',,,,-631,-651,-651,-651,,-631,-651,-651,-651,,-651,,,,585,,,,,-651,-651',
',,,,598,597,,,,-651,-651,,-651,-651,-651,-651,-651,,582,,579,578,577',
'587,580,,,,,,,,,,590,,,,591,,,,,,,,,,,,,-651,,,,,585,,-651,,,,,290,-651',
'595,594,598,597,,,,,,,,,,,,,,,,,-651,-651,,,,,,,,,,,,,-651,,591,,,-651',
'312,85,86,87,12,78,-651,,,79,80,-651,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,664,11,49,314,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,269,264,265,,249,250,,,266,267,,43,,,316,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,270,,-252,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,',
',79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,664,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,',
',266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271',
'257,23,258,,,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266',
'267,,43,,,316,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257',
'23,258,,,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108',
'109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273,274',
'268,269,264,265,,249,250,,,266,267,,43,,,316,,,62,63,,,64,,38,253,,259',
'48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104',
'236,270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11',
'49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266,267,,43',
',,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258',
',,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108,109',
'312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,256,260,261,262,263,273,274,268,269',
'264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255',
'254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,270',
',,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256',
'260,261,262,263,273,274,268,269,264,265,,249,250,,,266,267,,43,,,36',
',,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103',
'95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108,109,312,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265,',
'-652,-652,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251',
'252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263',
'273,274,268,269,264,265,,-652,-652,,,266,267,,43,,,36,,,62,63,,,64,',
'38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,8,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,11,49,10,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,-652,-652,-652,-652,273,274,,,-652,-652,,,,,,266,267,',
'43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23',
'258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,256,-652,-652,-652,-652,273,274,,,-652',
'-652,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251',
'252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,-652,-652,-652',
'-652,273,274,,,-652,-652,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,256,-652,-652,-652,-652,273,274,,,-652,-652,,,,,,266,267,,43,',
',36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,256,-652,-652,-652,-652,273,274,,,-652,-652',
',,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272',
'271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,256,-652,-652,-652,-652',
'273,274,,,-652,-652,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259',
'48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256',
'260,261,262,263,273,274,,,264,265,,,,,,266,267,,43,,,36,,,62,63,,,64',
',38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,260,261,262,263,273,274,268,,264,265,,,,,,266,267,,43',
',,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,',
'38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62',
'63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,',
'66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120',
'119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,',
',,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103',
'303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300',
',48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,',
',,,,,,,,,,,,,325,,,321,,,62,63,,,64,,320,,,,,,,,,,,,,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'335,,,,,,,,,,,,,,,,,,,,325,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,337,,,66,,,93,100,102,,,108,109,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,128,,,,,127,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,367',
',,36,,,62,63,,,64,,38,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,415,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,432,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,432,,,,48,,,,,',
',,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,236,,,,,,66,,,93',
'100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77',
',,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,',
'120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,',
',103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302',
',300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,236,,,,,,66,',
'306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,',
',,,,,,,325,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,537,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,',
',,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335',
',,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,554,,62,63,,,64',
',,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,',
'247,,,62,63,,,64,,302,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49',
',,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,616,60,112,111,617',
',114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,618,,,247,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,616,60,112',
'111,617,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,618,,,247,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120',
'119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,',
',,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103',
'303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,700,,300,,48,,,,,,,,246,,',
',,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,',
'66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331',
'332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11',
'49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,415,66,,,93,100,102,,,108,109,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302',
',300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76',
'77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,',
',321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
',49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,',
',,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,802,,,,48,,,,,',
',,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
',13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',700,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66',
',306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331',
'332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,241,,,247,,,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97,98',
'99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,432,,,,48,,,,,,,,246,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,',
'45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,700,,,,48,,,,,,',
',246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
'305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,',
'66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331',
'332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,,,48,,,,,,,,246,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300',
',48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104',
',,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'335,,,,,,,,,,,,,,,,,,,,994,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,335,,,,,,,,,,,,,,,,,,,,1001,,,247,,,62,63,,,64,,,,,,,,,,,,,,',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,700',
',,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,994,,,247,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101',
',,,96,104,,,,,,,66,,306,93,100,102,,,108,109,189,200,190,213,186,206',
'196,195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199',
'192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183',
'179,180,181,139,141,138,,140,,,,,,,,,173,174,,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178',
'189,200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219',
'198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203',
',,,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,103,,,,,,,,,',
'104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211',
'194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,382',
'381,383,380,185,204,203,,,,,,184,191,182,183,377,378,379,375,141,112',
'111,376,,114,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,',
',175,176,161,162,,,,,,389,,,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213',
'186,206,196,195,216,217,211,194,193,188,214,218,219,198,187,201,205',
'207,199,192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191',
'182,183,179,180,181,139,141,412,411,140,,413,,,,,,,173,174,,169,151',
'152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,',
',,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211,194,193,188',
'214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197',
'185,204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173',
'174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,103',
',,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216',
'217,211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215',
'210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139',
'141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,',
'175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213',
'186,206,196,195,216,217,211,194,193,188,214,218,219,198,187,201,205',
'207,199,192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191',
'182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,,455,459,,,456,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,462,466,,,461,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,582,177,579,578,577,587,580',
',,,,507,459,,,508,590,,,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,585,,,175,176,161,162,,,595,594,598,597,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,591,681,459',
',,682,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,',
',,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158',
'156,148,171,149,,,177,,,,,,,,,,683,466,,,684,,,,,,170,,,173,174,178',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
',,,,,710,459,,,711,,,,,,170,,,173,174,178,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,713,466,,,714,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,681,459,,,682,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,683,466,,,684',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,770,459,,,771,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',772,466,,,773,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,804,459,,,805,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,807,466,,,806,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,894,466,,,895',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,507,459,,,508,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',1071,466,,,1070,,,,,,170,,,173,174,178,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,1074,459,,,1075,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,1076,466,,,1077,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,582,177,579,578,577,587,580',
'582,,579,578,577,587,580,,,590,,,,,170,,590,,,178,582,,579,578,577,587',
'580,,,,,585,,,,,590,,585,,595,594,598,597,,,,595,594,598,597,582,,579',
'578,577,587,580,585,582,,579,578,577,587,580,,590,236,598,597,,,,,590',
'591,,,,,,582,591,579,578,577,587,580,585,582,,579,578,577,587,580,585',
'590,,598,597,,591,,,590,,598,597,582,,579,578,577,587,580,,,582,585',
'579,578,577,587,580,590,,585,595,594,598,597,,591,590,,595,594,598,597',
',591,,,,,582,585,579,578,577,587,580,,,,585,,598,597,,,590,,591,,,598',
'597,,,582,591,579,578,577,587,580,,,,,,,585,,,590,,,,,591,595,594,598',
'597,,,,582,591,579,578,577,587,580,,582,585,579,578,577,587,580,,590',
',,,598,597,,,590,,,,582,591,579,578,577,587,580,,,,585,,,,,,590,,585',
',,598,597,,,,591,,,598,597,,,,,,,,585,,,,,,,,,,,598,597,,,,,591,,,,',
',,,591,,,,,,,,,,,,,,,,,,,,591' ]
        racc_action_table = arr = ::Array.new(26281, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'110,2,2,2,2,2,2,110,110,110,2,2,110,110,110,2,110,2,2,2,2,2,2,2,110',
'29,110,110,110,2,2,2,2,2,2,2,110,110,2,110,110,110,110,110,2,2,2,2,2',
'2,2,2,2,2,2,2,710,2,2,2,1,2,2,364,2,2,2,110,110,110,110,110,110,110',
'110,110,110,110,110,110,110,356,711,110,110,110,2,110,110,2,29,110,2',
'2,110,110,2,110,2,110,365,110,2,110,110,110,110,110,110,110,2,110,29',
'110,65,2,2,2,2,2,2,17,17,710,2,2,110,110,110,110,713,110,2,110,368,2',
'2,2,110,113,2,2,330,110,357,110,113,113,113,711,940,113,113,113,844',
'113,614,891,710,471,471,710,403,113,688,113,113,113,364,964,720,720',
'3,239,735,113,113,710,113,113,113,113,113,998,711,999,1002,711,770,1044',
'604,771,1074,1075,838,356,713,713,688,13,356,65,690,711,892,365,113',
'113,113,113,113,113,113,113,113,113,113,113,113,113,1076,844,113,113',
'113,403,113,113,838,330,113,239,713,113,113,713,113,22,113,368,113,15',
'113,113,113,113,113,113,113,471,113,713,113,406,1077,240,844,1088,357',
'844,720,614,772,357,940,113,113,113,113,940,113,891,113,22,891,844,891',
'113,461,735,790,790,113,964,113,461,461,461,964,690,604,461,461,770',
'461,604,771,998,1076,999,1002,483,998,1044,999,1002,1074,1075,1044,892',
'16,1074,1075,240,461,461,406,461,461,461,461,461,773,752,705,752,752',
'752,772,752,18,391,1077,483,1076,27,526,483,483,1076,705,25,27,616,242',
'461,461,461,461,461,461,461,461,461,461,461,461,461,461,44,44,461,461',
'461,1020,461,1020,772,1077,461,790,1088,461,1077,335,335,1088,461,439',
'461,40,461,461,461,461,461,461,461,773,461,43,461,391,391,391,641,616',
'526,526,526,27,752,242,616,461,461,462,461,616,461,355,355,616,462,462',
'462,461,92,526,462,462,461,462,461,737,92,375,773,618,49,616,462,618',
'375,617,737,439,376,44,44,477,73,462,462,376,462,462,462,462,462,20',
'19,377,335,335,99,641,641,19,377,960,616,960,960,960,641,960,19,737',
'737,681,894,100,462,462,462,462,462,462,462,462,462,462,462,462,462',
'462,617,50,462,462,462,20,462,617,50,5,462,477,617,462,5,737,617,50',
'462,393,462,20,462,462,462,462,462,462,462,19,462,462,462,795,617,41',
'238,894,682,101,804,681,805,238,894,462,462,683,462,894,462,960,238',
'894,683,683,683,462,102,683,683,683,462,683,462,617,50,980,136,378,827',
'894,683,683,683,683,378,41,980,916,393,393,393,683,683,220,683,683,683',
'683,683,42,322,41,795,795,682,323,804,322,805,238,894,795,323,398,560',
'561,322,560,561,980,980,323,683,683,683,683,683,683,683,683,683,683',
'683,683,683,683,827,379,683,683,683,42,683,683,379,916,683,241,565,683',
'683,565,683,980,683,408,683,42,683,683,683,683,683,683,683,322,683,683',
'683,243,323,380,309,324,398,398,398,309,380,644,324,683,683,683,683',
'339,683,455,683,324,381,361,395,683,684,395,361,381,683,138,683,684',
'684,684,138,138,684,684,684,354,684,354,354,354,354,354,408,408,408',
'382,684,684,684,900,244,354,382,339,900,455,684,684,248,684,684,684',
'684,684,324,326,644,644,644,339,341,455,326,354,354,858,282,341,858',
'395,395,326,354,354,354,354,341,684,684,684,684,684,684,684,684,684',
'684,684,684,684,684,286,456,684,684,684,366,684,684,383,297,684,665',
'366,684,684,383,684,354,684,298,684,366,684,684,684,684,684,684,684',
'326,684,904,684,301,341,568,904,568,568,568,568,568,385,456,315,684',
'684,684,684,385,684,568,684,665,721,484,972,684,806,456,721,972,684',
'317,684,806,806,806,318,665,366,806,806,568,806,585,319,585,585,585',
'325,585,568,568,568,568,438,484,328,542,329,484,484,438,806,806,542',
'806,806,806,806,806,438,620,334,542,1006,776,714,1006,620,740,740,585',
'776,714,758,758,568,620,714,336,585,776,714,806,806,806,806,806,806',
'806,806,806,806,806,806,806,806,993,1000,806,806,806,340,806,993,1000',
'343,806,349,438,806,362,542,993,1000,806,363,806,367,806,806,806,806',
'806,806,806,620,806,369,806,776,714,1036,397,895,498,784,784,400,1036',
'402,895,806,806,807,806,895,806,1036,405,895,807,807,807,806,47,47,807',
'807,806,807,806,993,1000,1054,1054,428,498,499,807,431,498,498,498,498',
'9,9,9,9,9,807,807,433,807,807,807,807,807,436,440,47,47,749,450,749',
'749,749,1036,749,895,499,453,454,463,499,499,499,499,473,485,486,807',
'807,807,807,807,807,807,807,807,807,807,807,807,807,487,488,807,807',
'807,749,807,504,515,516,807,791,791,807,749,791,791,791,807,532,807',
'533,807,807,807,807,807,807,807,536,807,807,807,878,538,878,878,878',
'880,878,880,880,880,543,880,807,807,30,807,546,807,548,555,556,30,30',
'30,807,557,30,30,30,807,30,807,503,313,313,313,313,313,878,30,30,30',
'562,880,563,566,570,878,503,503,30,30,571,30,30,30,30,30,573,946,574',
'946,946,946,503,946,503,575,503,503,503,503,584,592,503,596,503,599',
'601,605,606,30,30,30,30,30,30,30,30,30,30,30,30,30,30,607,608,30,30',
'30,622,625,30,648,30,30,651,657,30,30,666,30,671,30,677,30,685,30,30',
'30,30,30,30,30,686,30,30,30,961,689,961,961,961,1015,961,1015,1015,1015',
'692,1015,30,30,31,30,694,30,697,699,707,31,31,31,30,709,31,31,31,30',
'31,552,712,1017,715,1017,1017,1017,961,1017,31,31,716,1015,719,736,751',
'552,552,753,31,31,760,31,31,31,31,31,1052,766,1052,1052,1052,552,1052',
'552,769,552,552,552,552,1017,799,552,1046,552,1046,1046,1046,801,1046',
'31,31,31,31,31,31,31,31,31,31,31,31,31,31,803,1052,31,31,31,812,836',
'31,843,31,31,854,855,31,31,862,31,863,31,864,31,868,31,31,31,31,31,31',
'31,869,31,871,31,348,348,348,348,348,531,531,531,531,531,872,874,31',
'31,60,31,877,31,879,882,888,60,60,60,31,893,60,60,60,31,60,489,897,901',
'903,912,915,922,923,925,60,60,60,926,927,929,930,489,489,931,60,60,944',
'60,60,60,60,60,945,962,971,975,978,489,991,489,994,489,489,489,489,996',
'1001,1010,1011,1012,1013,1014,1016,1026,1029,60,60,60,60,60,60,60,60',
'60,60,60,60,60,60,1030,1031,60,60,60,1032,1034,60,1040,1053,60,1058',
'1059,60,60,1070,60,1071,60,1073,60,1079,60,60,60,60,60,60,60,1080,60',
'1084,60,741,1085,741,741,741,741,741,1086,1087,1095,,,60,60,60,60,741',
'60,457,60,,,,,60,457,457,457,,60,457,457,457,,457,490,,,741,,,,,457',
'457,457,,741,741,741,741,490,490,,457,457,,457,457,457,457,457,,,,,',
'490,,490,,490,490,490,490,,,,,,,,,741,,457,457,457,457,457,457,457,457',
'457,457,457,457,457,457,,,457,457,457,,,457,,457,457,,,457,457,,457',
',457,,457,,457,457,457,457,457,457,457,,457,457,457,,,,,,,,,,,,,457',
'457,466,457,,457,,,,466,466,466,457,,466,466,466,457,466,491,,,,,,,',
'466,466,466,466,,,,,491,491,,466,466,,466,466,466,466,466,,,,,,491,',
',,491,491,491,491,,,,,,,,,,,466,466,466,466,466,466,466,466,466,466',
'466,466,466,466,,,466,466,466,,,466,,,466,,,466,466,,466,,466,,466,',
'466,466,466,466,466,466,466,,466,466,466,743,,743,743,743,743,743,,',
',,,466,466,466,466,743,466,467,466,,,,,466,467,467,467,,466,467,467',
'467,,467,,,,743,,,,,467,467,467,467,743,743,743,743,,,,467,467,,467',
'467,467,467,467,,,,,,,,,,,,,,,,,,,,,,743,,467,467,467,467,467,467,467',
'467,467,467,467,467,467,467,,,467,467,467,,,467,,,467,,,467,467,,467',
',467,,467,,467,467,467,467,467,467,467,,467,467,467,745,,745,745,745',
'745,745,,,,,,467,467,467,467,745,467,506,467,,,,,467,506,506,506,,467',
'506,506,506,,506,,,,745,,,,,506,506,,,,,745,745,,,,506,506,,506,506',
'506,506,506,,787,,787,787,787,787,787,,,,,,,,,,787,,,,745,,,,,,,,,,',
',,506,,,,,787,,506,,,,,506,506,787,787,787,787,,,,,,,,,,,,,,,,,506,506',
',,,,,,,,,,,,506,,787,,,506,36,36,36,36,36,36,506,,,36,36,506,,,36,,36',
'36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,443,36,36,36,36',
'36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,443,443,443,443,443',
'443,443,443,443,443,443,,443,443,,,443,443,,36,,,36,,,36,36,,,36,,36',
'443,,443,36,443,443,443,443,443,443,443,36,443,,,,36,36,36,36,36,36',
',,,36,36,,443,,443,,,36,,,36,36,36,,,36,36,222,222,222,222,222,222,',
',,222,222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222',
'222,222,,,222,,,,,449,222,222,222,222,222,222,222,222,222,222,222,222',
',222,222,222,,222,222,,222,222,222,449,449,449,449,449,449,449,449,449',
'449,449,,449,449,,,449,449,,222,,,222,,,222,222,,,222,,222,449,,449',
'222,449,449,449,449,449,449,449,222,449,,,,222,222,222,222,222,222,',
',,222,222,,449,,,,,222,,,222,222,222,,,222,222,247,247,247,247,247,247',
',,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247',
'247,247,247,,,247,,,,,,247,247,247,247,247,247,247,247,247,247,247,247',
',247,247,247,,247,247,,247,247,247,24,24,24,24,24,24,24,24,24,24,24',
',24,24,,,24,24,,247,,,247,,,247,247,,,247,,247,24,,24,247,24,24,24,24',
'24,24,24,247,24,,,,247,247,247,247,247,247,,,,247,247,,24,,,,,247,,',
'247,247,247,,,247,247,316,316,316,316,316,316,,,,316,316,,,,316,,316',
'316,316,316,316,316,316,,,,,,316,316,316,316,316,316,316,,,316,,,,,',
'316,316,316,316,316,316,316,316,316,316,316,316,,316,316,316,,316,316',
',316,316,316,295,295,295,295,295,295,295,295,295,295,295,,295,295,,',
'295,295,,316,,,316,,,316,316,,,316,,316,295,,295,316,295,295,295,295',
'295,295,295,316,295,,,,316,316,316,316,316,316,,,,316,316,,295,,,,,316',
',,316,316,316,,,316,316,321,321,321,321,321,321,,,,321,321,,,,321,,321',
'321,321,321,321,321,321,,,,,,321,321,321,321,321,321,321,,,321,,,,,',
'321,321,321,321,321,321,321,321,321,321,321,321,,321,321,321,,321,321',
',321,321,321,502,502,502,502,502,502,502,502,502,502,502,,502,502,,',
'502,502,,321,,,321,,,321,321,,,321,,321,502,,502,321,502,502,502,502',
'502,502,502,321,502,,,,321,321,321,321,321,321,,,,321,321,502,502,,',
',,321,,,321,321,321,,,321,321,347,347,347,347,347,347,,,,347,347,,,',
'347,,347,347,347,347,347,347,347,,,,,,347,347,347,347,347,347,347,,',
'347,,,,,,347,347,347,347,347,347,347,347,347,347,347,347,,347,347,347',
',347,347,,347,347,347,553,553,553,553,553,553,553,553,553,553,553,,553',
'553,,,553,553,,347,,,347,,,347,347,,,347,,347,553,,553,347,553,553,553',
'553,553,553,553,347,553,,,,347,347,347,347,347,347,,,,347,347,,553,',
',,,347,,,347,347,347,,,347,347,359,359,359,359,359,359,,,,359,359,,',
',359,,359,359,359,359,359,359,359,,,,,,359,359,359,359,359,359,359,',
',359,,,,,,359,359,359,359,359,359,359,359,359,359,359,359,,359,359,359',
',359,359,,359,359,359,809,809,809,809,809,809,809,809,809,809,809,,809',
'809,,,809,809,,359,,,359,,,359,359,,,359,,359,809,,809,359,809,809,809',
'809,809,809,809,359,809,,,,359,359,359,359,359,359,,,,359,359,,809,',
',,,359,,,359,359,359,,,359,359,360,360,360,360,360,360,,,,360,360,,',
',360,,360,360,360,360,360,360,360,,,,,,360,360,360,360,360,360,360,',
',360,,,,,,360,360,360,360,360,360,360,360,360,360,360,360,,360,360,360',
',360,360,,360,360,360,921,921,921,921,921,921,921,921,921,921,921,,921',
'921,,,921,921,,360,,,360,,,360,360,,,360,,360,921,,921,360,921,921,921',
'921,921,921,921,360,921,,,,360,360,360,360,360,360,,,,360,360,,921,',
',,,360,,,360,360,360,,,360,360,600,600,600,600,600,600,,,,600,600,,',
',600,,600,600,600,600,600,600,600,,,,,,600,600,600,600,600,600,600,',
',600,,,,,,600,600,600,600,600,600,600,600,600,600,600,600,,600,600,600',
',600,600,,600,600,600,481,481,481,481,481,481,481,481,481,481,481,,481',
'481,,,481,481,,600,,,600,,,600,600,,,600,,600,481,,481,600,481,481,481',
'481,481,481,481,600,481,,,,600,600,600,600,600,600,,,,600,600,,,,,,',
'600,,,600,600,600,,,600,600,603,603,603,603,603,603,,,,603,603,,,,603',
',603,603,603,603,603,603,603,,,,,,603,603,603,603,603,603,603,,,603',
',,,,,603,603,603,603,603,603,603,603,603,603,603,603,,603,603,603,,603',
'603,,603,603,603,482,482,482,482,482,482,482,482,482,482,482,,482,482',
',,482,482,,603,,,603,,,603,603,,,603,,603,482,,482,603,482,482,482,482',
'482,482,482,603,482,,,,603,603,603,603,603,603,,,,603,603,,,,,,,603',
',,603,603,603,,,603,603,653,653,653,653,653,653,,,,653,653,,,,653,,653',
'653,653,653,653,653,653,,,,,,653,653,653,653,653,653,653,,,653,,,,,',
'653,653,653,653,653,653,653,653,653,653,653,653,,653,653,653,,653,653',
',653,653,653,492,492,492,492,492,492,492,,,492,492,,,,,,492,492,,653',
',,653,,,653,653,,,653,,653,492,,492,653,492,492,492,492,492,492,492',
'653,492,,,,653,653,653,653,653,653,,,,653,653,,,,,,,653,,,653,653,653',
',,653,653,774,774,774,774,774,774,,,,774,774,,,,774,,774,774,774,774',
'774,774,774,,,,,,774,774,774,774,774,774,774,,,774,,,,,,774,774,774',
'774,774,774,774,774,774,774,774,774,,774,774,774,,774,774,,774,774,774',
'493,493,493,493,493,493,493,,,493,493,,,,,,493,493,,774,,,774,,,774',
'774,,,774,,774,493,,493,774,493,493,493,493,493,493,493,774,493,,,,774',
'774,774,774,774,774,,,,774,774,,,,,,,774,,,774,774,774,,,774,774,785',
'785,785,785,785,785,,,,785,785,,,,785,,785,785,785,785,785,785,785,',
',,,,785,785,785,785,785,785,785,,,785,,,,,,785,785,785,785,785,785,785',
'785,785,785,785,785,,785,785,785,,785,785,,785,785,785,494,494,494,494',
'494,494,494,,,494,494,,,,,,494,494,,785,,,785,,,785,785,,,785,,785,494',
',494,785,494,494,494,494,494,494,494,785,494,,,,785,785,785,785,785',
'785,,,,785,785,,,,,,,785,,,785,785,785,,,785,785,786,786,786,786,786',
'786,,,,786,786,,,,786,,786,786,786,786,786,786,786,,,,,,786,786,786',
'786,786,786,786,,,786,,,,,,786,786,786,786,786,786,786,786,786,786,786',
'786,,786,786,786,,786,786,,786,786,786,495,495,495,495,495,495,495,',
',495,495,,,,,,495,495,,786,,,786,,,786,786,,,786,,786,495,,495,786,495',
'495,495,495,495,495,495,786,495,,,,786,786,786,786,786,786,,,,786,786',
',,,,,,786,,,786,786,786,,,786,786,792,792,792,792,792,792,,,,792,792',
',,,792,,792,792,792,792,792,792,792,,,,,,792,792,792,792,792,792,792',
',,792,,,,,,792,792,792,792,792,792,792,792,792,792,792,792,,792,792',
'792,,792,792,,792,792,792,496,496,496,496,496,496,496,,,496,496,,,,',
',496,496,,792,,,792,,,792,792,,,792,,792,496,,496,792,496,496,496,496',
'496,496,496,792,496,,,,792,792,792,792,792,792,,,,792,792,,,,,,,792',
',,792,792,792,,,792,792,833,833,833,833,833,833,,,,833,833,,,,833,,833',
'833,833,833,833,833,833,,,,,,833,833,833,833,833,833,833,,,833,,,,,',
'833,833,833,833,833,833,833,833,833,833,833,833,,833,833,833,,833,833',
',833,833,833,497,497,497,497,497,497,497,,,497,497,,,,,,497,497,,833',
',,833,,,833,833,,,833,,833,497,,497,833,497,497,497,497,497,497,497',
'833,497,,,,833,833,833,833,833,833,,,,833,833,,,,,,,833,,,833,833,833',
',,833,833,852,852,852,852,852,852,,,,852,852,,,,852,,852,852,852,852',
'852,852,852,,,,,,852,852,852,852,852,852,852,,,852,,,,,,852,852,852',
'852,852,852,852,852,852,852,852,852,,852,852,852,,852,852,,852,852,852',
'500,500,500,500,500,500,500,,,500,500,,,,,,500,500,,852,,,852,,,852',
'852,,,852,,852,500,,500,852,500,500,500,500,500,500,500,852,500,,,,852',
'852,852,852,852,852,,,,852,852,,,,,,,852,,,852,852,852,,,852,852,860',
'860,860,860,860,860,,,,860,860,,,,860,,860,860,860,860,860,860,860,',
',,,,860,860,860,860,860,860,860,,,860,,,,,,860,860,860,860,860,860,860',
'860,860,860,860,860,,860,860,860,,860,860,,860,860,860,501,501,501,501',
'501,501,501,501,,501,501,,,,,,501,501,,860,,,860,,,860,860,,,860,,860',
'501,,501,860,501,501,501,501,501,501,501,860,501,,,,860,860,860,860',
'860,860,,,,860,860,,,,,,,860,,,860,860,860,,,860,860,861,861,861,861',
'861,861,,,,861,861,,,,861,,861,861,861,861,861,861,861,,,,,,861,861',
'861,861,861,861,861,,,861,,,,,,861,861,861,861,861,861,861,861,861,861',
'861,861,,861,861,861,,861,861,,861,861,861,,,,,,,,,,,,,,,,,,,,861,,',
'861,,,861,861,,,861,,861,,,,861,,,,,,,,861,,,,,861,861,861,861,861,861',
',,,861,861,,,,,,,861,,,861,861,861,,,861,861,887,887,887,887,887,887',
',,,887,887,,,,887,,887,887,887,887,887,887,887,,,,,,887,887,887,887',
'887,887,887,,,887,,,,,,887,887,887,887,887,887,887,887,887,887,887,887',
',887,887,887,,887,887,,887,887,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887',
'887,,,887,,887,,,,887,,,,,,,,887,,,,,887,887,887,887,887,887,,,,887',
'887,,,,,,,887,,,887,887,887,,,887,887,898,898,898,898,898,898,,,,898',
'898,,,,898,,898,898,898,898,898,898,898,,,,,,898,898,898,898,898,898',
'898,,,898,,,,,,898,898,898,898,898,898,898,898,898,898,898,898,,898',
'898,898,,898,898,,898,898,898,,,,,,,,,,,,,,,,,,,,898,,,898,,,898,898',
',,898,,898,,,,898,,,,,,,,898,,,,,898,898,898,898,898,898,,,,898,898',
',,,,,,898,,,898,898,898,,,898,898,937,937,937,937,937,937,,,,937,937',
',,,937,,937,937,937,937,937,937,937,,,,,,937,937,937,937,937,937,937',
',,937,,,,,,937,937,937,937,937,937,937,937,937,937,937,937,,937,937',
'937,,937,937,,937,937,937,,,,,,,,,,,,,,,,,,,,937,,,937,,,937,937,,,937',
',937,,,,937,,,,,,,,937,,,,,937,937,937,937,937,937,,,,937,937,,,,,,',
'937,,,937,937,937,,,937,937,938,938,938,938,938,938,,,,938,938,,,,938',
',938,938,938,938,938,938,938,,,,,,938,938,938,938,938,938,938,,,938',
',,,,,938,938,938,938,938,938,938,938,938,938,938,938,,938,938,938,,938',
'938,,938,938,938,,,,,,,,,,,,,,,,,,,,938,,,938,,,938,938,,,938,,938,',
',,938,,,,,,,,938,,,,,938,938,938,938,938,938,,,,938,938,,,,,,,938,,',
'938,938,938,,,938,938,968,968,968,968,968,968,,,,968,968,,,,968,,968',
'968,968,968,968,968,968,,,,,,968,968,968,968,968,968,968,,,968,,,,,',
'968,968,968,968,968,968,968,968,968,968,968,968,,968,968,968,,968,968',
',968,968,968,,,,,,,,,,,,,,,,,,,,968,,,968,,,968,968,,,968,,968,,,,968',
',,,,,,,968,,,,,968,968,968,968,968,968,,,,968,968,,,,,,,968,,,968,968',
'968,,,968,968,997,997,997,997,997,997,,,,997,997,,,,997,,997,997,997',
'997,997,997,997,,,,,,997,997,997,997,997,997,997,,,997,,,,,,997,997',
'997,997,997,997,997,997,997,997,997,997,,997,997,997,,997,997,,997,997',
'997,,,,,,,,,,,,,,,,,,,,997,,,997,,,997,997,,,997,,997,,,,997,,,,,,,',
'997,,,,,997,997,997,997,997,997,,,,997,997,,,,,,,997,,,997,997,997,',
',997,997,1018,1018,1018,1018,1018,1018,,,,1018,1018,,,,1018,,1018,1018',
'1018,1018,1018,1018,1018,,,,,,1018,1018,1018,1018,1018,1018,1018,,,1018',
',,,,,1018,1018,1018,1018,1018,1018,1018,1018,1018,1018,1018,1018,,1018',
'1018,1018,,1018,1018,,1018,1018,1018,,,,,,,,,,,,,,,,,,,,1018,,,1018',
',,1018,1018,,,1018,,1018,,,,1018,,,,,,,,1018,,,,,1018,1018,1018,1018',
'1018,1018,,,,1018,1018,,,,,,,1018,,,1018,1018,1018,,,1018,1018,1023',
'1023,1023,1023,1023,1023,,,,1023,1023,,,,1023,,1023,1023,1023,1023,1023',
'1023,1023,,,,,,1023,1023,1023,1023,1023,1023,1023,,,1023,,,,,,1023,1023',
'1023,1023,1023,1023,1023,1023,1023,1023,1023,1023,,1023,1023,1023,,1023',
'1023,,1023,1023,1023,,,,,,,,,,,,,,,,,,,,1023,,,1023,,,1023,1023,,,1023',
',1023,,,,1023,,,,,,,,1023,,,,,1023,1023,1023,1023,1023,1023,,,,1023',
'1023,,,,,,,1023,,,1023,1023,1023,,,1023,1023,1025,1025,1025,1025,1025',
'1025,,,,1025,1025,,,,1025,,1025,1025,1025,1025,1025,1025,1025,,,,,,1025',
'1025,1025,1025,1025,1025,1025,,,1025,,,,,,1025,1025,1025,1025,1025,1025',
'1025,1025,1025,1025,1025,1025,,1025,1025,1025,,1025,1025,,1025,1025',
'1025,,,,,,,,,,,,,,,,,,,,1025,,,1025,,,1025,1025,,,1025,,1025,,,,1025',
',,,,,,,1025,,,,,1025,1025,1025,1025,1025,1025,,,,1025,1025,,,,,,,1025',
',,1025,1025,1025,,,1025,1025,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,',
',,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8',
',,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8',
',,,8,8,,,,,,,8,,,8,8,8,,,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23',
'23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23',
'23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23',
',,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23',
'23,23,,,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,',
',32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32',
'32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,',
'32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32',
',,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33',
'33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,',
'33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33',
',,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33',
'33,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34',
'34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34',
',34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,',
',34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,37',
'37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37',
'37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,',
',,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37',
'37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,',
'38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38',
'38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,',
'38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,',
',38,,,38,38,38,,,38,38,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45',
'45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45',
',45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,',
',,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45',
',,45,45,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46',
'46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46',
'46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,',
'46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,48,48',
'48,,48,,,,48,48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48',
',,48,,,,,,,48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48,,48,48,48,',
',,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48',
'48,48,48,,,,48,48,,,,,,,48,,,48,48,48,,,48,48,62,62,62,62,62,,,,62,62',
',,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,62,62',
',62,62,62,62,62,62,62,62,62,,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,',
',,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62',
',,,62,62,,,,,,,62,,,62,62,62,,,62,62,67,67,67,,67,,,,67,67,,,,67,,67',
'67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67',
'67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67',
',,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,',
'67,,,67,67,67,,,67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68',
'68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68',
',68,68,68,,68,68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,',
',,,,68,,,,,,,,68,,,,,68,68,68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68',
',,68,68,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71',
'71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71',
'71,,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,',
'71,,,,,71,71,71,71,71,71,,,,71,71,71,,,,,71,71,,,71,71,71,,,71,71,72',
'72,72,,72,,,,72,72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72',
'72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,',
',,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,72,,,,,,,,,,,,,,,,,72,72,72,72',
'72,72,,,,72,72,,,,,,,72,,,72,72,72,,,72,72,126,126,126,126,126,,,,126',
'126,,,,126,,126,126,126,126,126,126,126,,,,,,126,126,126,126,126,126',
'126,,,126,,,,,,126,126,126,126,126,126,126,126,126,126,126,126,,126',
'126,126,,126,126,,126,126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126,126',
',,126,,126,,,,126,,,,,,,,126,,,,,126,126,126,126,126,126,,,,126,126',
',,,,,126,126,,,126,126,126,,,126,126,131,131,131,,131,,,,131,131,,,',
'131,,131,131,131,131,131,131,131,,,,,,131,131,131,131,131,131,131,,',
'131,,,,,,,131,,,131,131,131,131,131,131,131,131,,131,131,131,,131,131',
',131,131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131,131,,,131,,,,,,131,',
',,,,,,131,,,,,131,131,131,131,131,131,,,,131,131,,,,,,,131,,,131,131',
'131,,,131,131,132,132,132,,132,,,,132,132,,,,132,,132,132,132,132,132',
'132,132,,,,,,132,132,132,132,132,132,132,,,132,,,,,,,132,,,132,132,132',
'132,132,132,132,132,,132,132,132,,132,132,,132,132,132,,,,,,,,,,,,,',
',,,,,,132,,,132,,,132,132,,,132,,,,,,132,,,,,,,,132,,,,,132,132,132',
'132,132,132,,,,132,132,,,,,,,132,,,132,132,132,,,132,132,133,133,133',
',133,,,,133,133,,,,133,,133,133,133,133,133,133,133,,,,,,133,133,133',
'133,133,133,133,,,133,,,,,,,133,,,133,133,133,133,133,133,133,133,,133',
'133,133,,133,133,,133,133,133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133',
',,133,,,,,,133,,,,,,,,133,,,,,133,133,133,133,133,133,,,,133,133,,,',
',,,133,,,133,133,133,,,133,133,134,134,134,,134,,,,134,134,,,,134,,134',
'134,134,134,134,134,134,,,,,,134,134,134,134,134,134,134,,,134,,,,,',
',134,,,134,134,134,134,134,134,134,134,,134,134,134,,134,134,,134,134',
'134,,,,,,,,,,,,,,,,,,,,134,,,134,,,134,134,,,134,,,,,,134,,,,,,,,134',
',,,,134,134,134,134,134,134,,,,134,134,,,,,,,134,,,134,134,134,,,134',
'134,135,135,135,135,135,,,,135,135,,,,135,,135,135,135,135,135,135,135',
',,,,,135,135,135,135,135,135,135,,,135,,,,,,135,135,,135,135,135,135',
'135,135,135,135,135,,135,135,135,,135,135,,135,135,135,,,,,,,,,,,,,',
',,,,,,135,,,135,,,135,135,,,135,,135,,,,135,,,,,,,,135,,,,,135,135,135',
'135,135,135,,,,135,135,,,,,,,135,,,135,135,135,,,135,135,223,223,223',
',223,,,,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223,223',
'223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223,,223',
'223,223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223',
',,223,,223,,,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223',
',,,,,,223,,,223,223,223,,,223,223,224,224,224,,224,,,,224,224,,,,224',
',224,224,224,224,224,224,224,,,,,,224,224,224,224,224,224,224,,,224',
',,,,,,224,,,224,224,224,224,224,224,224,224,,224,224,224,,224,224,,224',
'224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,224,,,,224,,,',
',,,,224,,,,,224,224,224,224,224,224,,,,224,224,,,,,,,224,,,224,224,224',
',,224,224,225,225,225,,225,,,,225,225,,,,225,,225,225,225,225,225,225',
'225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225',
'225,225,225,225,,225,225,225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,',
',,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225',
'225,225,,,,225,225,,,,,,,225,,,225,225,225,,,225,225,226,226,226,,226',
',,,226,226,,,,226,,226,226,226,226,226,226,226,,,,,,226,226,226,226',
'226,226,226,,,226,,,,,,,226,,,226,226,226,226,226,226,226,226,,226,226',
'226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226',
',,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,,,,,,,226',
',,226,226,226,,,226,226,227,227,227,,227,,,,227,227,,,,227,,227,227',
'227,227,227,227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227',
',,227,227,227,227,227,227,227,227,,227,227,227,,227,227,,227,227,227',
',,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,',
',227,227,227,227,227,227,,,,227,227,,,,,,,227,,,227,227,227,,,227,227',
'228,228,228,,228,,,,228,228,,,,228,,228,228,228,228,228,228,228,,,,',
',228,228,228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228',
'228,228,228,228,228,228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228',
',,228,,,228,228,,,228,,228,,228,,228,,,,,,,,228,,,,,228,228,228,228',
'228,228,,,,228,228,,,,,,,228,,228,228,228,228,,,228,228,233,233,233',
',233,,,,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233',
'233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233',
'233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233',
',,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,',
',,,233,,,233,233,233,,,233,233,234,234,234,,234,,,,234,234,,,,234,,234',
'234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,',
',234,,,234,234,234,234,234,234,234,234,,234,234,234,,234,234,,234,234',
'234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234',
',,,,234,234,234,234,234,234,,,,234,234,,,,,,,234,,,234,234,234,,,234',
'234,235,235,235,,235,,,,235,235,,,,235,,235,235,235,235,235,235,235',
',,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235',
'235,235,235,,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235',
',,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235',
',,,235,235,235,,,,,,235,,,235,235,235,,,235,235,246,246,246,,246,,,',
'246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246',
'246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246',
',246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,',
',,,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246',
',,246,246,246,,,246,246,249,249,249,,249,,,,249,249,,,,249,,249,249',
'249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249',
',,249,249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249,249',
',,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,',
',249,249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249',
'250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,',
',250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250',
'250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,',
'250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250',
',,,250,250,,,,,,,250,,,250,250,250,,,250,250,251,251,251,,251,,,,251',
'251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251',
'251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,',
'251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,',
',251,251,251,,,251,251,252,252,252,,252,,,,252,252,,,,252,,252,252,252',
'252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252',
'252,252,252,252,252,252,252,,252,252,252,,252,252,,252,252,252,,,,,',
',,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252',
'252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,,252,252,253',
'253,253,,253,,,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253',
'253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253',
'253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253',
',,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253',
'253,,,,,,,253,,,253,253,253,,,253,253,254,254,254,,254,,,,254,254,,',
',254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,',
',254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254',
',254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,',
',,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254',
'254,,,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255',
'255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255',
'255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,',
',,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255',
'255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255,255,256,256,256',
',256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256',
'256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256',
'256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256',
',,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,',
',,,256,,,256,256,256,,,256,256,257,257,257,,257,,,,257,257,,,,257,,257',
'257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,',
',257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257',
'257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257',
',,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257',
'257,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258,258,258',
',,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258',
'258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258',
',,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258',
',,,258,258,,,,,,,258,,,258,258,258,,,258,258,259,259,259,,259,,,,259',
'259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259',
'259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,',
'259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,',
',,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,',
',259,259,259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260,260',
'260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260',
'260,260,260,260,260,260,260,,260,260,260,,260,260,,260,260,260,,,,,',
',,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260',
'260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260,260,261',
'261,261,,261,,,,261,261,,,,261,,261,261,261,261,261,261,261,,,,,,261',
'261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261',
'261,,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261',
',,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261',
'261,,,,,,,261,,,261,261,261,,,261,261,262,262,262,,262,,,,262,262,,',
',262,,262,262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262,',
',262,,,,,,,262,,,262,262,262,262,262,262,262,262,,262,262,262,,262,262',
',262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,',
',,,,,,262,,,,,262,262,262,262,262,262,,,,262,262,,,,,,,262,,,262,262',
'262,,,262,262,263,263,263,,263,,,,263,263,,,,263,,263,263,263,263,263',
'263,263,,,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263,263,263',
'263,263,263,263,263,,263,263,263,,263,263,,263,263,263,,,,,,,,,,,,,',
',,,,,,263,,,263,,,263,263,,,263,,,,,,263,,,,,,,,263,,,,,263,263,263',
'263,263,263,,,,263,263,,,,,,,263,,,263,263,263,,,263,263,264,264,264',
',264,,,,264,264,,,,264,,264,264,264,264,264,264,264,,,,,,264,264,264',
'264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264',
'264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264',
',,264,,,,,,264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,,,',
',,,264,,,264,264,264,,,264,264,265,265,265,,265,,,,265,265,,,,265,,265',
'265,265,265,265,265,265,,,,,,265,265,265,265,265,265,265,,,265,,,,,',
',265,,,265,265,265,265,265,265,265,265,,265,265,265,,265,265,,265,265',
'265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265,,,,,,,,265',
',,,,265,265,265,265,265,265,,,,265,265,,,,,,,265,,,265,265,265,,,265',
'265,266,266,266,,266,,,,266,266,,,,266,,266,266,266,266,266,266,266',
',,,,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266',
'266,266,266,,266,266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266',
',,266,,,266,266,,,266,,,,,,266,,,,,,,,266,,,,,266,266,266,266,266,266',
',,,266,266,,,,,,,266,,,266,266,266,,,266,266,267,267,267,,267,,,,267',
'267,,,,267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267',
'267,,,267,,,,,,,267,,,267,267,267,267,267,267,267,267,,267,267,267,',
'267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,',
',,,267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267,267,,,,,,,267,',
',267,267,267,,,267,267,268,268,268,,268,,,,268,268,,,,268,,268,268,268',
'268,268,268,268,,,,,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268',
'268,268,268,268,268,268,268,,268,268,268,,268,268,,268,268,268,,,,,',
',,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,,,,,268,,,,,,,,268,,,,,268',
'268,268,268,268,268,,,,268,268,,,,,,,268,,,268,268,268,,,268,268,269',
'269,269,,269,,,,269,269,,,,269,,269,269,269,269,269,269,269,,,,,,269',
'269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269,269,269,269,269',
'269,,269,269,269,,269,269,,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269',
',,269,269,,,269,,,,,,269,,,,,,,,269,,,,,269,269,269,269,269,269,,,,269',
'269,,,,,,,269,,,269,269,269,,,269,269,270,270,270,,270,,,,270,270,,',
',270,,270,270,270,270,270,270,270,,,,,,270,270,270,270,270,270,270,',
',270,,,,,,,270,,,270,270,270,270,270,270,270,270,,270,270,270,,270,270',
',270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,,,,,,270,',
',,,,,,270,,,,,270,270,270,270,270,270,,,,270,270,,,,,,,270,,,270,270',
'270,,,270,270,275,275,275,,275,,,,275,275,,,,275,,275,275,275,275,275',
'275,275,,,,,,275,275,275,275,275,275,275,,,275,,,,,,,275,,,275,275,275',
'275,275,275,275,275,,275,275,275,,275,275,,275,275,275,,,,,,,,,,,,,',
',,,,,,275,,,275,,,275,275,,,275,,,,,,275,,,,,,,,275,,,,,275,275,275',
'275,275,275,,,,275,275,,,,,,,275,,,275,275,275,,,275,275,283,283,283',
',283,,,,283,283,,,,283,,283,283,283,283,283,283,283,,,,,,283,283,283',
'283,283,283,283,,,283,,,,,,,283,,,283,283,283,283,283,283,283,283,283',
'283,283,283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283',
'283,,,283,,283,,283,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283',
'283,,,,,,,283,,283,283,283,283,,,283,283,290,290,290,,290,,,,290,290',
',,,290,,290,290,290,290,290,290,290,,,,,,290,290,290,290,290,290,290',
',,290,,,,,,,290,,,290,290,290,290,290,290,290,290,290,290,290,290,,290',
'290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,,290,,290,',
'290,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290,290,,,,,,,290',
',290,290,290,290,,,290,290,293,293,293,,293,,,,293,293,,,,293,,293,293',
'293,293,293,293,293,,,,,,293,293,293,293,293,293,293,,,293,,,,,,,293',
',,293,293,293,293,293,293,293,293,293,293,293,293,,293,293,,293,293',
'293,,,,,,,,,,,,,,,,,,,,293,,,293,,,293,293,,,293,,293,,293,,293,,,,',
',,,293,,,,,293,293,293,293,293,293,,,,293,293,293,,,,,,293,,293,293',
'293,293,,,293,293,300,300,300,,300,,,,300,300,,,,300,,300,300,300,300',
'300,300,300,,,,,,300,300,300,300,300,300,300,,,300,,,,,,,300,,,300,300',
'300,300,300,300,300,300,,300,300,300,,300,300,,300,300,300,,,,,,,,,',
',,,,,,,,,,300,,,300,,,300,300,,,300,,,,,,300,,,,,,,,300,,,,,300,300',
'300,300,300,300,,,,300,300,,,,,,,300,,,300,300,300,,,300,300,302,302',
'302,,302,,,,302,302,,,,302,,302,302,302,302,302,302,302,,,,,,302,302',
'302,302,302,302,302,,,302,,,,,,,302,,,302,302,302,302,302,302,302,302',
',302,302,302,,302,302,,302,302,302,,,,,,,,,,,,,,,,,,,,302,,,302,,,302',
'302,,,302,,,,,,302,,,,,,,,302,,,,,302,302,302,302,302,302,,,,302,302',
',,,,,,302,,,302,302,302,,,302,302,305,305,305,,305,,,,305,305,,,,305',
',305,305,305,305,305,305,305,,,,,,305,305,305,305,305,305,305,,,305',
',,,,,,305,,,305,305,305,305,305,305,305,305,,305,305,305,,305,305,,305',
'305,305,,,,,,,,,,,,,,,,,,,,305,,,305,,,305,305,,,305,,,,,,305,,,,,,',
',305,,,,,305,305,305,305,305,305,,,,305,305,,,,,,,305,,,305,305,305',
',,305,305,306,306,306,,306,,,,306,306,,,,306,,306,306,306,306,306,306',
'306,,,,,,306,306,306,306,306,306,306,,,306,,,,,,,306,,,306,306,306,306',
'306,306,306,306,,306,306,306,,306,306,,306,306,306,,,,,,,,,,,,,,,,,',
',,306,,,306,,,306,306,,,306,,,,,,306,,,,,,,,306,,,,,306,306,306,306',
'306,306,,,,306,306,,,,,,,306,,,306,306,306,,,306,306,312,312,312,312',
'312,,,,312,312,,,,312,,312,312,312,312,312,312,312,,,,,,312,312,312',
'312,312,312,312,,,312,,,,,,312,312,,312,312,312,312,312,312,312,312',
'312,,312,312,312,,312,312,,312,312,312,,,,,,,,,,,,,,,,,,,,312,,,312',
',,312,312,,,312,,312,,,,312,,,,,,,,312,,,,,312,312,312,312,312,312,',
',,312,312,,,,,,,312,,,312,312,312,,,312,312,320,320,320,,320,,,,320',
'320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320,320,320,320,320',
'320,,,320,,,,,,,320,,,320,320,320,320,320,320,320,320,,320,320,320,',
'320,320,,,,320,,,,,,,,,,,,,,,,,,,,320,,,320,,,320,320,,,320,,,,,,,,',
',,,,,,,,,,320,320,320,320,320,320,,,,320,320,,,,320,,,320,,,320,320',
'320,,,320,320,337,337,337,,337,,,,337,337,,,,337,,337,337,337,337,337',
'337,337,,,,,,337,337,337,337,337,337,337,,,337,,,,,,,337,,,337,337,337',
'337,337,337,337,337,,337,337,337,,337,337,,,,337,,,,,,,,,,,,,,,,,,,',
'337,,,337,,,337,337,,,337,,,,,,,,,,,,,,,,,,,337,337,337,337,337,337',
',,,337,337,,,,,,,337,,,337,337,337,,,337,337,344,344,344,,344,,,,344',
'344,,,,344,,344,344,344,344,344,344,344,,,,,,344,344,344,344,344,344',
'344,,,344,,,,,,,344,,,344,344,344,344,344,344,344,344,,344,344,344,',
'344,344,,344,344,344,,,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344,,',
',,,344,,,,,,,,344,,,,,344,344,344,344,344,344,,,,344,344,,,,,,,344,',
',344,344,344,,,344,344,346,346,346,,346,,,,346,346,,,,346,,346,346,346',
'346,346,346,346,,,,,,346,346,346,346,346,346,346,,,346,,,,,,,346,,,346',
'346,346,346,346,346,346,346,,346,346,346,,346,346,,346,346,346,,,,,',
',,,,,,,,,,,,,,346,,,346,346,,346,346,,,346,,,,,,346,,,,,,,,346,,,,,346',
'346,346,346,346,346,,,,346,346,,,,,,,346,,,346,346,346,,,346,346,350',
'350,350,,350,,,,350,350,,,,350,,350,350,350,350,350,350,350,,,,,,350',
'350,350,350,350,350,350,,,350,,,,,,,350,,,350,350,350,350,350,350,350',
'350,350,350,350,350,,350,350,,350,350,350,,,,,,,,,,,,,,,,,,,,350,,,350',
',,350,350,,,350,,350,,,,350,,,,,,,,350,,,,,350,350,350,350,350,350,',
',,350,350,,,,,,,350,,350,350,350,350,,,350,350,351,351,351,,351,,,,351',
'351,,,,351,,351,351,351,351,351,351,351,,,,,,351,351,351,351,351,351',
'351,,,351,,,,,,,351,,,351,351,351,351,351,351,351,351,351,351,351,351',
',351,351,,351,351,351,,,,,,,,,,,,,,,,,,,,351,,,351,,,351,351,,,351,',
',,,,351,,,,,,,,351,,,,,351,351,351,351,351,351,,,,351,351,,,,,,,351',
',351,351,351,351,,,351,351,358,358,358,,358,,,,358,358,,,,358,,358,358',
'358,358,358,358,358,,,,,,358,358,358,358,358,358,358,,,358,,,,,,,358',
',,358,358,358,358,358,358,358,358,,358,358,358,,358,358,,358,358,358',
',,,,,,,,,,,,,,,,,,,358,,,358,,,358,358,,,358,,,,,,358,,,,,,,,358,,,',
',358,358,358,358,358,358,,,,358,358,,,,,,,358,,,358,358,358,,,358,358',
'372,372,372,,372,,,,372,372,,,,372,,372,372,372,372,372,372,372,,,,',
',372,372,372,372,372,372,372,,,372,,,,,,,372,,,372,372,372,372,372,372',
'372,372,,372,372,372,,372,372,,,,372,,,,,,,,,,,,,,,,,,,,372,,,372,,',
'372,372,,,372,,,,,,,,,,,,,,,,,,,372,372,372,372,372,372,,,,372,372,',
',,,,,372,,,372,372,372,,,372,372,374,374,374,,374,,,,374,374,,,,374',
',374,374,374,374,374,374,374,,,,,,374,374,374,374,374,374,374,,,374',
',,,,,,374,,,374,374,374,374,374,374,374,374,,374,374,374,,374,374,,',
',374,,,,,,,,,,,,,,,,,,,,374,,,374,,,374,374,,,374,,,,,,,,,,,,,,,,,,',
'374,374,374,374,374,374,,,,374,374,,,,,,,374,,,374,374,374,,,374,374',
'432,432,432,,432,,,,432,432,,,,432,,432,432,432,432,432,432,432,,,,',
',432,432,432,432,432,432,432,,,432,,,,,,,432,,,432,432,432,432,432,432',
'432,432,,432,432,432,,432,432,,432,432,432,,,,,,,,,,,,,,,,,,,,432,,',
'432,,,432,432,,,432,,,,,,432,,,,,,,,432,,,,,432,432,432,432,432,432',
',,,432,432,,,,,,,432,,,432,432,432,,,432,432,476,476,476,,476,,,,476',
'476,,,,476,,476,476,476,476,476,476,476,,,,,,476,476,476,476,476,476',
'476,,,476,,,,,,,476,,,476,476,476,476,476,476,476,476,476,476,476,476',
',476,476,,476,476,476,,,,,,,,,,,,,,,,,,,,476,,,476,,,476,476,,,476,',
'476,,476,,476,,,,,,,,476,,,,,476,476,476,476,476,476,,,,476,476,,,,',
',,476,,476,476,476,476,,,476,476,478,478,478,,478,,,,478,478,,,,478',
',478,478,478,478,478,478,478,,,,,,478,478,478,478,478,478,478,,,478',
',,,,,,478,,,478,478,478,478,478,478,478,478,,478,478,478,,478,478,,478',
'478,478,,,,,,,,,,,,,,,,,,,,478,,,478,,,478,478,,,478,,,,,,478,,,,,,',
',478,,,,,478,478,478,478,478,478,,,,478,478,,,,,,,478,,,478,478,478',
',,478,478,479,479,479,,479,,,,479,479,,,,479,,479,479,479,479,479,479',
'479,,,,,,479,479,479,479,479,479,479,,,479,,,,,,,479,,,479,479,479,479',
'479,479,479,479,,479,479,479,,479,479,,479,479,479,,,,,,,,,,,,,,,,,',
',,479,,,479,,,479,479,,,479,,,,,,479,,,,,,,,479,,,,,479,479,479,479',
'479,479,,,,479,479,,,,,,,479,,,479,479,479,,,479,479,480,480,480,,480',
',,,480,480,,,,480,,480,480,480,480,480,480,480,,,,,,480,480,480,480',
'480,480,480,,,480,,,,,,,480,,,480,480,480,480,480,480,480,480,,480,480',
'480,,480,480,,480,480,480,,,,,,,,,,,,,,,,,,,,480,,,480,,,480,480,,,480',
',,,,,480,,,,,,,,480,,,,,480,480,480,480,480,480,,,,480,480,,,,,,,480',
',,480,480,480,,,480,480,519,519,519,,519,,,,519,519,,,,519,,519,519',
'519,519,519,519,519,,,,,,519,519,519,519,519,519,519,,,519,,,,,,,519',
',,519,519,519,519,519,519,519,519,519,519,519,519,,519,519,,519,519',
'519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,519,,519,,519,,,,',
',,,519,,,,,519,519,519,519,519,519,,,,519,519,,,,,,,519,,519,519,519',
'519,,,519,519,522,522,522,,522,,,,522,522,,,,522,,522,522,522,522,522',
'522,522,,,,,,522,522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,522',
'522,522,522,522,522,522,522,522,522,,522,522,,522,522,522,,,,,,,,,,',
',,,,,,,,,522,,,522,,,522,522,,,522,,,,522,,522,,,,,,,,522,,,,,522,522',
'522,522,522,522,,,,522,522,,,,,,,522,,522,522,522,522,,,522,522,524',
'524,524,,524,,,,524,524,,,,524,,524,524,524,524,524,524,524,,,,,,524',
'524,524,524,524,524,524,,,524,,,,,,,524,,,524,524,524,524,524,524,524',
'524,,524,524,524,,524,524,,524,524,524,,,,,,,,,,,,,,,,,,,,524,,,524',
',,524,524,,,524,,,,,,524,,,,,,,,524,,,,,524,524,524,524,524,524,,,,524',
'524,,,,,,,524,,,524,524,524,,,524,524,530,530,530,530,530,,,,530,530',
',,,530,,530,530,530,530,530,530,530,,,,,,530,530,530,530,530,530,530',
',,530,,,,,,530,530,530,530,530,530,530,530,530,530,530,530,,530,530',
'530,,530,530,,530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,,530',
',530,,,,530,,,,,,,,530,,,,,530,530,530,530,530,530,,,,530,530,,,,,,530',
'530,,,530,530,530,,,530,530,537,537,537,,537,,,,537,537,,,,537,,537',
'537,537,537,537,537,537,,,,,,537,537,537,537,537,537,537,,,537,,,,,',
',537,,,537,537,537,537,537,537,537,537,,537,537,537,,537,537,,,,537',
',,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,,537,,,,,,,,,,,,,,,,,,,537,537',
'537,537,537,537,,,,537,537,,,,,,,537,,,537,537,537,,,537,537,539,539',
'539,,539,,,,539,539,,,,539,,539,539,539,539,539,539,539,,,,,,539,539',
'539,539,539,539,539,,,539,,,,,,,539,,,539,539,539,539,539,539,539,539',
'539,539,539,539,,539,539,,539,539,539,,,,,,,,,,,,,,,,,,,,539,,,539,',
',539,539,,,539,,539,,539,,539,,,,,,,,539,,,,,539,539,539,539,539,539',
',,,539,539,,,,,,,539,,539,539,539,539,,,539,539,545,545,545,,545,,,',
'545,545,,,,545,,545,545,545,545,545,545,545,,,,,,545,545,545,545,545',
'545,545,,,545,,,,,,,545,,,545,545,545,545,545,545,545,545,,545,545,545',
',545,545,,,,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,,545,,,,,,,',
',,,,,,,,,,,545,545,545,545,545,545,,,,545,545,,,,,,,545,,,545,545,545',
',,545,545,549,549,549,,549,,,,549,549,,,,549,,549,549,549,549,549,549',
'549,,,,,,549,549,549,549,549,549,549,,,549,,,,,,,549,,,549,549,549,549',
'549,549,549,549,,549,549,549,,549,549,,549,549,549,,,,,,,,,,,,,,,,,',
',,549,,,549,,,549,549,,,549,,,,,,549,,,,,,,,549,,,,,549,549,549,549',
'549,549,,,,549,549,,,,,,,549,,,549,549,549,,,549,549,554,554,554,,554',
',,,554,554,,,,554,,554,554,554,554,554,554,554,,,,,,554,554,554,554',
'554,554,554,,,554,,,,,,,554,,,554,554,554,554,554,554,554,554,,554,554',
'554,,554,554,,554,554,554,,,,,,,,,,,,,,,,,,,,554,,,554,,,554,554,,,554',
',,,,,554,,,,,,,,554,,,,,554,554,554,554,554,554,,,,554,554,,,,,,,554',
',,554,554,554,,,554,554,588,588,588,,588,,,,588,588,,,,588,,588,588',
'588,588,588,588,588,,,,,,588,588,588,588,588,588,588,,,588,,,,,,,588',
',,588,588,588,588,588,588,588,588,,588,588,588,,588,588,,588,588,588',
',,,,,,,,,,,,,,,,,,,588,,,588,,,588,588,,,588,,,,,,588,,,,,,,,588,,,',
',588,588,588,588,588,588,,,,588,588,,,,,,,588,,,588,588,588,,,588,588',
'611,611,611,,611,,,,611,611,,,,611,,611,611,611,611,611,611,611,,,,',
',611,611,611,611,611,611,611,,,611,,,,,,,611,,,611,611,611,611,611,611',
'611,611,611,611,611,611,,611,611,,611,611,611,,,,,,,,,,,,,,,,,,,,611',
',,611,,,611,611,,,611,,611,,611,,611,,,,,,,,611,,,,,611,611,611,611',
'611,611,,,,611,611,,,,,,,611,,611,611,611,611,,,611,611,623,623,623',
',623,,,,623,623,,,,623,,623,623,623,623,623,623,623,,,,,,623,623,623',
'623,623,623,623,,,623,,,,,,,623,,,623,623,623,623,623,623,623,623,,623',
'623,623,,623,623,,623,623,623,,,,,,,,,,,,,,,,,,,,623,,,623,,,623,623',
',,623,,,,,,623,,,,,,,,623,,,,,623,623,623,623,623,623,,,,623,623,,,',
',,,623,,,623,623,623,,,623,623,629,629,629,,629,,,,629,629,,,,629,,629',
'629,629,629,629,629,629,,,,,,629,629,629,629,629,629,629,,,629,,,,,',
',629,,,629,629,629,629,629,629,629,629,,629,629,629,,629,629,,629,629',
'629,,,,,,,,,,,,,,,,,,,,629,,,629,,,629,629,,,629,,,,,,629,,,,,,,,629',
',,,,629,629,629,629,629,629,,,,629,629,,,,,,,629,,,629,629,629,,,629',
'629,658,658,658,,658,,,,658,658,,,,658,,658,658,658,658,658,658,658',
',,,,,658,658,658,658,658,658,658,,,658,,,,,,,658,,,658,658,658,658,658',
'658,658,658,,658,658,658,,658,658,,658,658,658,,,,,,,,,,,,,,,,,,,,658',
',,658,,,658,658,,,658,,658,,,,658,,,,,,,,658,,,,,658,658,658,658,658',
'658,,,,658,658,,,,,,,658,,,658,658,658,,,658,658,659,659,659,,659,,',
',659,659,,,,659,,659,659,659,659,659,659,659,,,,,,659,659,659,659,659',
'659,659,,,659,,,,,,,659,,,659,659,659,659,659,659,659,659,,659,659,659',
',659,659,,659,659,659,,,,,,,,,,,,,,,,,,,,659,,,659,,,659,659,,,659,',
',,,,659,,,,,,,,659,,,,,659,659,659,659,659,659,,,,659,659,,,,,,,659',
',,659,659,659,,,659,659,660,660,660,,660,,,,660,660,,,,660,,660,660',
'660,660,660,660,660,,,,,,660,660,660,660,660,660,660,,,660,,,,,,,660',
',,660,660,660,660,660,660,660,660,660,660,660,660,,660,660,,660,660',
'660,,,,,,,,,,,,,,,,,,,,660,,,660,,,660,660,,,660,,660,,660,,660,,,,',
',,,660,,,,,660,660,660,660,660,660,,,,660,660,,,,,,,660,,660,660,660',
'660,,,660,660,663,663,663,663,663,,,,663,663,,,,663,,663,663,663,663',
'663,663,663,,,,,,663,663,663,663,663,663,663,,,663,,,,,,663,663,,663',
'663,663,663,663,663,663,663,663,,663,663,663,,663,663,,663,663,663,',
',,,,,,,,,,,,,,,,,,663,,,663,,,663,663,,,663,,663,,,,663,,,,,,,,663,',
',,,663,663,663,663,663,663,,,,663,663,,,,,,,663,,,663,663,663,,,663',
'663,664,664,664,,664,,,,664,664,,,,664,,664,664,664,664,664,664,664',
',,,,,664,664,664,664,664,664,664,,,664,,,,,,,664,,,664,664,664,664,664',
'664,664,664,,664,664,664,,664,664,,664,664,664,,,,,,,,,,,,,,,,,,,,664',
',,664,,,664,664,,,664,,,,,,664,,,,,,,,664,,,,,664,664,664,664,664,664',
',,,664,664,,,,,,,664,,,664,664,664,,,664,664,667,667,667,,667,,,,667',
'667,,,,667,,667,667,667,667,667,667,667,,,,,,667,667,667,667,667,667',
'667,,,667,,,,,,,667,,,667,667,667,667,667,667,667,667,667,667,667,667',
',667,667,,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667,',
'667,,667,,667,,,,,,,,667,,,,,667,667,667,667,667,667,,,,667,667,,,,',
',,667,,667,667,667,667,,,667,667,668,668,668,,668,,,,668,668,,,,668',
',668,668,668,668,668,668,668,,,,,,668,668,668,668,668,668,668,,,668',
',,,,,,668,,,668,668,668,668,668,668,668,668,668,668,668,668,,668,668',
',668,668,668,,,,,,,,,,,,,,,,,,,,668,,,668,,,668,668,,,668,,,,668,,668',
',,,,,,,668,,,,,668,668,668,668,668,668,,,,668,668,,,,,,,668,,668,668',
'668,668,,,668,668,669,669,669,,669,,,,669,669,,,,669,,669,669,669,669',
'669,669,669,,,,,,669,669,669,669,669,669,669,,,669,,,,,,,669,,,669,669',
'669,669,669,669,669,669,,669,669,669,,669,669,,669,669,669,,,,,,,,,',
',,,,,,,,,,669,,,669,,,669,669,,,669,,,,,,669,,,,,,,,669,,,,,669,669',
'669,669,669,669,,,,669,669,,,,,,,669,,,669,669,669,,,669,669,670,670',
'670,,670,,,,670,670,,,,670,,670,670,670,670,670,670,670,,,,,,670,670',
'670,670,670,670,670,,,670,,,,,,,670,,,670,670,670,670,670,670,670,670',
',670,670,670,,670,670,,670,670,670,,,,,,,,,,,,,,,,,,,,670,,,670,,,670',
'670,,,670,,,,,,670,,,,,,,,670,,,,,670,670,670,670,670,670,,,,670,670',
',,,,,,670,,,670,670,670,,,670,670,675,675,675,,675,,,,675,675,,,,675',
',675,675,675,675,675,675,675,,,,,,675,675,675,675,675,675,675,,,675',
',,,,,,675,,,675,675,675,675,675,675,675,675,,675,675,675,,675,675,,675',
'675,675,,,,,,,,,,,,,,,,,,,,675,,,675,,,675,675,,,675,,,,,,675,,,,,,',
',675,,,,,675,675,675,675,675,675,,,,675,675,,,,,,,675,,,675,675,675',
',,675,675,676,676,676,,676,,,,676,676,,,,676,,676,676,676,676,676,676',
'676,,,,,,676,676,676,676,676,676,676,,,676,,,,,,,676,,,676,676,676,676',
'676,676,676,676,,676,676,676,,676,676,,676,676,676,,,,,,,,,,,,,,,,,',
',,676,,,676,,,676,676,,,676,,,,,,676,,,,,,,,676,,,,,676,676,676,676',
'676,676,,,,676,676,,,,,,,676,,,676,676,676,,,676,676,700,700,700,,700',
',,,700,700,,,,700,,700,700,700,700,700,700,700,,,,,,700,700,700,700',
'700,700,700,,,700,,,,,,,700,,,700,700,700,700,700,700,700,700,,700,700',
'700,,700,700,,700,700,700,,,,,,,,,,,,,,,,,,,,700,,,700,,,700,700,,,700',
',,,,,700,,,,,,,,700,,,,,700,700,700,700,700,700,,,,700,700,,,,,,,700',
',,700,700,700,,,700,700,703,703,703,,703,,,,703,703,,,,703,,703,703',
'703,703,703,703,703,,,,,,703,703,703,703,703,703,703,,,703,,,,,,,703',
',,703,703,703,703,703,703,703,703,,703,703,703,,703,703,,703,703,703',
',,,,,,,,,,,,,,,,,,,703,,,703,,,703,703,,,703,,,,,,703,,,,,,,,703,,,',
',703,703,703,703,703,703,,,,703,703,,,,,,,703,,,703,703,703,,,703,703',
'706,706,706,,706,,,,706,706,,,,706,,706,706,706,706,706,706,706,,,,',
',706,706,706,706,706,706,706,,,706,,,,,,,706,,,706,706,706,706,706,706',
'706,706,,706,706,706,,706,706,,,,706,,,,,,,,,,,,,,,,,,,,706,,,706,,',
'706,706,,,706,,,,,,,,,,,,,,,,,,,706,706,706,706,706,706,,,,706,706,',
',,,,,706,,,706,706,706,,,706,706,717,717,717,,717,,,,717,717,,,,717',
',717,717,717,717,717,717,717,,,,,,717,717,717,717,717,717,717,,,717',
',,,,,,717,,,717,717,717,717,717,717,717,717,,717,717,717,,717,717,,',
',717,,,,,,,,,,,,,,,,,,,,717,,,717,,,717,717,,,717,,,,,,,,,,,,,,,,,,',
'717,717,717,717,717,717,,,,717,717,,,,,,,717,,,717,717,717,,,717,717',
'718,718,718,,718,,,,718,718,,,,718,,718,718,718,718,718,718,718,,,,',
',718,718,718,718,718,718,718,,,718,,,,,,,718,,,718,718,718,718,718,718',
'718,718,,718,718,718,,718,718,,718,718,718,,,,,,,,,,,,,,,,,,,,718,,',
'718,,,718,718,,,718,,,,,,718,,,,,,,,718,,,,,718,718,718,718,718,718',
',,,718,718,,,,,,,718,,,718,718,718,,,718,718,723,723,723,,723,,,,723',
'723,,,,723,,723,723,723,723,723,723,723,,,,,,723,723,723,723,723,723',
'723,,,723,,,,,,,723,,,723,723,723,723,723,723,723,723,,723,723,723,',
'723,723,,723,723,723,,,,,,,,,,,,,,,,,,,,723,,,723,,,723,723,,,723,,723',
',,,723,,,,,,,,723,,,,,723,723,723,723,723,723,,,,723,723,,,,,,,723,',
',723,723,723,,,723,723,728,728,728,,728,,,,728,728,,,,728,,728,728,728',
'728,728,728,728,,,,,,728,728,728,728,728,728,728,,,728,,,,,,,728,,,728',
'728,728,728,728,728,728,728,728,728,728,728,,728,728,,728,728,728,,',
',,,,,,,,,,,,,,,,,728,,,728,,,728,728,,,728,,728,,,,728,,,,,,,,728,,',
',,728,728,728,728,728,728,,,,728,728,,,,,,,728,,728,728,728,728,,,728',
'728,731,731,731,,731,,,,731,731,,,,731,,731,731,731,731,731,731,731',
',,,,,731,731,731,731,731,731,731,,,731,,,,,,,731,,,731,731,731,731,731',
'731,731,731,731,731,731,731,,731,731,,731,731,731,,,,,,,,,,,,,,,,,,',
',731,,,731,,,731,731,,,731,,,,,,731,,,,,,,,731,,,,,731,731,731,731,731',
'731,,,,731,731,,,,,,,731,,731,731,731,731,,,731,731,747,747,747,,747',
',,,747,747,,,,747,,747,747,747,747,747,747,747,,,,,,747,747,747,747',
'747,747,747,,,747,,,,,,,747,,,747,747,747,747,747,747,747,747,,747,747',
'747,,747,747,,747,747,747,,,,,,,,,,,,,,,,,,,,747,,,747,,,747,747,,,747',
',,,,,747,,,,,,,,747,,,,,747,747,747,747,747,747,,,,747,747,,,,,,,747',
',,747,747,747,,,747,747,768,768,768,,768,,,,768,768,,,,768,,768,768',
'768,768,768,768,768,,,,,,768,768,768,768,768,768,768,,,768,,,,,,,768',
',,768,768,768,768,768,768,768,768,,768,768,768,,768,768,,768,768,768',
',,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768,,768,,,,768,,,,,,,,768',
',,,,768,768,768,768,768,768,,,,768,768,,,,,,,768,,,768,768,768,,,768',
'768,780,780,780,,780,,,,780,780,,,,780,,780,780,780,780,780,780,780',
',,,,,780,780,780,780,780,780,780,,,780,,,,,,,780,,,780,780,780,780,780',
'780,780,780,780,780,780,780,,780,780,,780,780,780,,,,,,,,,,,,,,,,,,',
',780,,,780,,,780,780,,,780,,780,,780,,780,,,,,,,,780,,,,,780,780,780',
'780,780,780,,,,780,780,,,,,,,780,,780,780,780,780,,,780,780,802,802',
'802,,802,,,,802,802,,,,802,,802,802,802,802,802,802,802,,,,,,802,802',
'802,802,802,802,802,,,802,,,,,,,802,,,802,802,802,802,802,802,802,802',
',802,802,802,,802,802,,802,802,802,,,,,,,,,,,,,,,,,,,,802,,,802,,,802',
'802,,,802,,,,,,802,,,,,,,,802,,,,,802,802,802,802,802,802,,,,802,802',
',,,,,,802,,,802,802,802,,,802,802,810,810,810,,810,,,,810,810,,,,810',
',810,810,810,810,810,810,810,,,,,,810,810,810,810,810,810,810,,,810',
',,,,,,810,,,810,810,810,810,810,810,810,810,,810,810,810,,810,810,,810',
'810,810,,,,,,,,,,,,,,,,,,,,810,,,810,,,810,810,,,810,,,,,,810,,,,,,',
',810,,,,,810,810,810,810,810,810,,,,810,810,,,,,,,810,,,810,810,810',
',,810,810,823,823,823,,823,,,,823,823,,,,823,,823,823,823,823,823,823',
'823,,,,,,823,823,823,823,823,823,823,,,823,,,,,,,823,,,823,823,823,823',
'823,823,823,823,,823,823,823,,823,823,,823,823,823,,,,,,,,,,,,,,,,,',
',,823,,,823,,,823,823,,,823,,,,,,823,,,,,,,,823,,,,,823,823,823,823',
'823,823,,,,823,823,,,,,,,823,,,823,823,823,,,823,823,824,824,824,,824',
',,,824,824,,,,824,,824,824,824,824,824,824,824,,,,,,824,824,824,824',
'824,824,824,,,824,,,,,,,824,,,824,824,824,824,824,824,824,824,,824,824',
'824,,824,824,,824,824,824,,,,,,,,,,,,,,,,,,,,824,,,824,,,824,824,,,824',
',,,,,824,,,,,,,,824,,,,,824,824,824,824,824,824,,,,824,824,,,,,,,824',
',,824,824,824,,,824,824,825,825,825,,825,,,,825,825,,,,825,,825,825',
'825,825,825,825,825,,,,,,825,825,825,825,825,825,825,,,825,,,,,,,825',
',,825,825,825,825,825,825,825,825,,825,825,825,,825,825,,825,825,825',
',,,,,,,,,,,,,,,,,,,825,,,825,,,825,825,,,825,,,,,,825,,,,,,,,825,,,',
',825,825,825,825,825,825,,,,825,825,,,,,,,825,,,825,825,825,,,825,825',
'826,826,826,,826,,,,826,826,,,,826,,826,826,826,826,826,826,826,,,,',
',826,826,826,826,826,826,826,,,826,,,,,,,826,,,826,826,826,826,826,826',
'826,826,,826,826,826,,826,826,,826,826,826,,,,,,,,,,,,,,,,,,,,826,,',
'826,,,826,826,,,826,,,,,,826,,,,,,,,826,,,,,826,826,826,826,826,826',
',,,826,826,,,,,,,826,,,826,826,826,,,826,826,828,828,828,,828,,,,828',
'828,,,,828,,828,828,828,828,828,828,828,,,,,,828,828,828,828,828,828',
'828,,,828,,,,,,,828,,,828,828,828,828,828,828,828,828,,828,828,828,',
'828,828,,828,828,828,,,,,,,,,,,,,,,,,,,,828,,,828,,,828,828,,,828,,',
',,,828,,,,,,,,828,,,,,828,828,828,828,828,828,,,,828,828,,,,,,,828,',
',828,828,828,,,828,828,885,885,885,,885,,,,885,885,,,,885,,885,885,885',
'885,885,885,885,,,,,,885,885,885,885,885,885,885,,,885,,,,,,,885,,,885',
'885,885,885,885,885,885,885,,885,885,885,,885,885,,885,885,885,,,,,',
',,,,,,,,,,,,,,885,,,885,,,885,885,,,885,,,,,,885,,,,,,,,885,,,,,885',
'885,885,885,885,885,,,,885,885,,,,,,,885,,,885,885,885,,,885,885,899',
'899,899,,899,,,,899,899,,,,899,,899,899,899,899,899,899,899,,,,,,899',
'899,899,899,899,899,899,,,899,,,,,,,899,,,899,899,899,899,899,899,899',
'899,,899,899,899,,899,899,,899,899,899,,,,,,,,,,,,,,,,,,,,899,,,899',
',,899,899,,,899,,,,,,899,,,,,,,,899,,,,,899,899,899,899,899,899,,,,899',
'899,,,,,,,899,,,899,899,899,,,899,899,919,919,919,,919,,,,919,919,,',
',919,,919,919,919,919,919,919,919,,,,,,919,919,919,919,919,919,919,',
',919,,,,,,,919,,,919,919,919,919,919,919,919,919,919,919,919,919,,919',
'919,,919,919,919,,,,,,,,,,,,,,,,,,,,919,,,919,,,919,919,,,919,,,,919',
',919,,,,,,,,919,,,,,919,919,919,919,919,919,,,,919,919,,,,,,,919,,919',
'919,919,919,,,919,919,920,920,920,,920,,,,920,920,,,,920,,920,920,920',
'920,920,920,920,,,,,,920,920,920,920,920,920,920,,,920,,,,,,,920,,,920',
'920,920,920,920,920,920,920,,920,920,920,,920,920,,920,920,920,,,,,',
',,,,,,,,,,,,,,920,,,920,,,920,920,,,920,,,,,,920,,,,,,,,920,,,,,920',
'920,920,920,920,920,,,,920,920,,,,,,,920,,,920,920,920,,,920,920,932',
'932,932,,932,,,,932,932,,,,932,,932,932,932,932,932,932,932,,,,,,932',
'932,932,932,932,932,932,,,932,,,,,,,932,,,932,932,932,932,932,932,932',
'932,,932,932,932,,932,932,,,,932,,,,,,,,,,,,,,,,,,,,932,,,932,,,932',
'932,,,932,,,,,,,,,,,,,,,,,,,932,932,932,932,932,932,,,,932,932,,,,,',
',932,,,932,932,932,,,932,932,941,941,941,,941,,,,941,941,,,,941,,941',
'941,941,941,941,941,941,,,,,,941,941,941,941,941,941,941,,,941,,,,,',
',941,,,941,941,941,941,941,941,941,941,,941,941,941,,941,941,,,,941',
',,,,,,,,,,,,,,,,,,,941,,,941,,,941,941,,,941,,,,,,,,,,,,,,,,,,,941,941',
'941,941,941,941,,,,941,941,,,,,,,941,,,941,941,941,,,941,941,967,967',
'967,,967,,,,967,967,,,,967,,967,967,967,967,967,967,967,,,,,,967,967',
'967,967,967,967,967,,,967,,,,,,,967,,,967,967,967,967,967,967,967,967',
',967,967,967,,967,967,,967,967,967,,,,,,,,,,,,,,,,,,,,967,,,967,,,967',
'967,,,967,,967,,,,967,,,,,,,,967,,,,,967,967,967,967,967,967,,,,967',
'967,,,,,,,967,,,967,967,967,,,967,967,992,992,992,,992,,,,992,992,,',
',992,,992,992,992,992,992,992,992,,,,,,992,992,992,992,992,992,992,',
',992,,,,,,,992,,,992,992,992,992,992,992,992,992,,992,992,992,,992,992',
',,,992,,,,,,,,,,,,,,,,,,,,992,,,992,,,992,992,,,992,,,,,,,,,,,,,,,,',
',,992,992,992,992,992,992,,,,992,992,,,,,,,992,,,992,992,992,,,992,992',
'1041,1041,1041,,1041,,,,1041,1041,,,,1041,,1041,1041,1041,1041,1041',
'1041,1041,,,,,,1041,1041,1041,1041,1041,1041,1041,,,1041,,,,,,,1041',
',,1041,1041,1041,1041,1041,1041,1041,1041,1041,1041,1041,1041,,1041',
'1041,,1041,1041,1041,,,,,,,,,,,,,,,,,,,,1041,,,1041,,,1041,1041,,,1041',
',1041,,1041,,1041,,,,,,,,1041,,,,,1041,1041,1041,1041,1041,1041,,,,1041',
'1041,,,,,,,1041,,1041,1041,1041,1041,,,1041,1041,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11',
'11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11',
',11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11',
'11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,,,,,11',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12',
',,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,',
',,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12',
',,,,,,,,12,,,,,12,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,,,,75,75,75,75,75,75,75,75,75,75,,,,,,75,75,75',
'75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75,,75,75,75,75,75,75,75,,,75',
'75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75,75,75,75,75,75,75,75,75,75',
'75,,,75,,,,,,,,,,,,,,,,,,,,75,,,,,75,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,,,,103',
'103,103,103,103,103,103,103,103,103,,,,,,103,103,103,103,103,103,103',
'103,103,103,103,103,,103,,,,,,,103,103,,103,103,103,103,103,103,103',
',,103,103,,,,103,103,103,103,,,,,,,,,,,,,,103,103,,103,103,103,103,103',
'103,103,103,103,103,103,,,103,,,,,,,,,,,,,,,,,,,,103,,,,,103,423,423',
'423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423',
'423,423,423,423,423,,,,423,423,423,423,423,423,423,423,423,423,,,,,',
'423,423,423,423,423,423,423,423,423,,,423,,,,,,,,,423,423,,423,423,423',
'423,423,423,423,,,423,423,,,,423,423,423,423,,,,,,,,,,,,,,423,423,,423',
'423,423,423,423,423,423,423,423,423,423,,,423,423,,,,,,,,,,423,,,,,',
',,,423,,,,,423,655,655,655,655,655,655,655,655,655,655,655,655,655,655',
'655,655,655,655,655,655,655,655,655,655,,,,655,655,655,655,655,655,655',
'655,655,655,,,,,,655,655,655,655,655,655,655,655,655,,,655,,,,,,,,,655',
'655,,655,655,655,655,655,655,655,,,655,655,,,,655,655,655,655,,,,,,',
',,,,,,,655,655,,655,655,655,655,655,655,655,655,655,655,655,,,655,655',
',,,,,,,,,655,,,,,,,,,655,,,,,655,789,789,789,789,789,789,789,789,789',
'789,789,789,789,789,789,789,789,789,789,789,789,789,789,789,,,,789,789',
'789,789,789,789,789,789,789,789,,,,,,789,789,789,789,789,789,789,789',
'789,,,789,,,,,,,,,789,789,,789,789,789,789,789,789,789,,,789,789,,,',
'789,789,789,789,,,,,,,,,,,,,,789,789,,789,789,789,789,789,789,789,789',
'789,789,789,,,789,,,,,,,,,,229,229,,,229,,,,,,789,,,229,229,789,229',
'229,229,229,229,229,229,,,229,229,,,,229,229,229,229,,,,,,229,,,,,,',
',229,229,,229,229,229,229,229,229,229,229,229,229,229,,,229,,,,,,,,',
',230,230,,,230,,,,,,229,,,230,230,229,230,230,230,230,230,230,230,,',
'230,230,,,,230,230,230,230,,,,,,230,,,,,,,,230,230,,230,230,230,230',
'230,230,230,230,230,230,230,,788,230,788,788,788,788,788,,,,,279,279',
',,279,788,,,,,230,,,279,279,230,279,279,279,279,279,279,279,,,279,279',
'788,,,279,279,279,279,,,788,788,788,788,,,,,,,,279,279,,279,279,279',
'279,279,279,279,279,279,279,279,,,279,,,,,,,,,788,474,474,,,474,,,,',
',279,,,474,474,279,474,474,474,474,474,474,474,,,474,474,,,,474,474',
'474,474,,,,,,474,,,,,,,,474,474,,474,474,474,474,474,474,474,474,474',
'474,474,,,474,,,,,,,,,,475,475,,,475,,,,,,474,,,475,475,474,475,475',
'475,475,475,475,475,,,475,475,,,,475,475,475,475,,,,,,475,,,,,,,,475',
'475,,475,475,475,475,475,475,475,475,475,475,475,,,475,,,,,,,,,,540',
'540,,,540,,,,,,475,,,540,540,475,540,540,540,540,540,540,540,,,540,540',
',,,540,540,540,540,,,,,,540,,,,,,,,540,540,,540,540,540,540,540,540',
'540,540,540,540,540,,,540,,,,,,,,,,541,541,,,541,,,,,,540,,,541,541',
'540,541,541,541,541,541,541,541,,,541,541,,,,541,541,541,541,,,,,,541',
',,,,,,,541,541,,541,541,541,541,541,541,541,541,541,541,541,,,541,,',
',,,,,,,550,550,,,550,,,,,,541,,,550,550,541,550,550,550,550,550,550',
'550,,,550,550,,,,550,550,550,550,,,,,,550,,,,,,,,550,550,,550,550,550',
'550,550,550,550,550,550,550,550,,,550,,,,,,,,,,551,551,,,551,,,,,,550',
',,551,551,550,551,551,551,551,551,551,551,,,551,551,,,,551,551,551,551',
',,,,,551,,,,,,,,551,551,,551,551,551,551,551,551,551,551,551,551,551',
',,551,,,,,,,,,,612,612,,,612,,,,,,551,,,612,612,551,612,612,612,612',
'612,612,612,,,612,612,,,,612,612,612,612,,,,,,612,,,,,,,,612,612,,612',
'612,612,612,612,612,612,612,612,612,612,,,612,,,,,,,,,,613,613,,,613',
',,,,,612,,,613,613,612,613,613,613,613,613,613,613,,,613,613,,,,613',
'613,613,613,,,,,,613,,,,,,,,613,613,,613,613,613,613,613,613,613,613',
'613,613,613,,,613,,,,,,,,,,661,661,,,661,,,,,,613,,,661,661,613,661',
'661,661,661,661,661,661,,,661,661,,,,661,661,661,661,,,,,,661,,,,,,',
',661,661,,661,661,661,661,661,661,661,661,661,661,661,,,661,,,,,,,,',
',662,662,,,662,,,,,,661,,,662,662,661,662,662,662,662,662,662,662,,',
'662,662,,,,662,662,662,662,,,,,,662,,,,,,,,662,662,,662,662,662,662',
'662,662,662,662,662,662,662,,,662,,,,,,,,,,778,778,,,778,,,,,,662,,',
'778,778,662,778,778,778,778,778,778,778,,,778,778,,,,778,778,778,778',
',,,,,778,,,,,,,,778,778,,778,778,778,778,778,778,778,778,778,778,778',
',,778,,,,,,,,,,779,779,,,779,,,,,,778,,,779,779,778,779,779,779,779',
'779,779,779,,,779,779,,,,779,779,779,779,,,,,,779,,,,,,,,779,779,,779',
'779,779,779,779,779,779,779,779,779,779,,,779,,,,,,,,,,1037,1037,,,1037',
',,,,,779,,,1037,1037,779,1037,1037,1037,1037,1037,1037,1037,,,1037,1037',
',,,1037,1037,1037,1037,,,,,,1037,,,,,,,,1037,1037,,1037,1037,1037,1037',
'1037,1037,1037,1037,1037,1037,1037,,,1037,,,,,,,,,,1042,1042,,,1042',
',,,,,1037,,,1042,1042,1037,1042,1042,1042,1042,1042,1042,1042,,,1042',
'1042,,,,1042,1042,1042,1042,,,,,,1042,,,,,,,,1042,1042,,1042,1042,1042',
'1042,1042,1042,1042,1042,1042,1042,1042,,,1042,,,,,,,,,,1043,1043,,',
'1043,,,,,,1042,,,1043,1043,1042,1043,1043,1043,1043,1043,1043,1043,',
',1043,1043,,,,1043,1043,1043,1043,,,,,,1043,,,,,,,,1043,1043,,1043,1043',
'1043,1043,1043,1043,1043,1043,1043,1043,1043,,831,1043,831,831,831,831',
'831,949,,949,949,949,949,949,,,831,,,,,1043,,949,,,1043,951,,951,951',
'951,951,951,,,,,831,,,,,951,,949,,831,831,831,831,,,,949,949,949,949',
'953,,953,953,953,953,953,951,955,,955,955,955,955,955,,953,831,951,951',
',,,,955,831,,,,,,983,949,983,983,983,983,983,953,986,,986,986,986,986',
'986,955,983,,953,953,,951,,,986,,955,955,988,,988,988,988,988,988,,',
'1047,983,1047,1047,1047,1047,1047,988,,986,983,983,983,983,,953,1047',
',986,986,986,986,,955,,,,,1061,988,1061,1061,1061,1061,1061,,,,1047',
',988,988,,,1061,,983,,,1047,1047,,,1063,986,1063,1063,1063,1063,1063',
',,,,,,1061,,,1063,,,,,988,1061,1061,1061,1061,,,,1065,1047,1065,1065',
'1065,1065,1065,,1067,1063,1067,1067,1067,1067,1067,,1065,,,,1063,1063',
',,1067,,,,1090,1061,1090,1090,1090,1090,1090,,,,1065,,,,,,1090,,1067',
',,1065,1065,,,,1063,,,1067,1067,,,,,,,,1090,,,,,,,,,,,1090,1090,,,,',
'1065,,,,,,,,1067,,,,,,,,,,,,,,,,,,,,1090' ]
        racc_action_check = arr = ::Array.new(26281, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    60,     0,   172,   nil,   370,   nil,   nil,  5926,   932,
   nil, 23706, 23844,    87,   nil,    96,   165,    85,   243,   373,
   363,   nil,   147,  6066,  2261,   314,   nil,   257,   nil,     0,
  1068,  1196,  6206,  6346,  6486,   nil,  1979,  6626,  6766,   nil,
   251,   435,   491,   335,   298,  6906,  7046,   879,  7186,   303,
   410,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1324,   nil,  7326,   nil,   nil,    89,   nil,  7466,  7606,   nil,
   nil,  7746,  7886,   358,   nil, 23982,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   301,   nil,   nil,   nil,   nil,   nil,   nil,   325,
   342,   396,   415, 24120,   nil,   nil,   nil,   nil,   nil,   nil,
     0,   nil,   nil,   139,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  8026,   nil,   nil,   nil,
   nil,  8166,  8306,  8446,  8586,  8726,   443,   nil,   625,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   443,   nil,  2120,  8866,  9006,  9146,  9286,  9426,  9566, 24607,
 24680,   nil,   nil,  9706,  9846,  9986,   nil,   nil,   445,    86,
   168,   571,   257,   503,   616,   nil, 10126,  2261,   621, 10266,
 10406, 10546, 10686, 10826, 10966, 11106, 11246, 11386, 11526, 11666,
 11806, 11946, 12086, 12226, 12366, 12506, 12646, 12786, 12926, 13066,
 13206,   nil,   nil,   nil,   nil, 13346,   nil,   nil,   nil, 24753,
   nil,   nil,   632, 13486,   nil,   nil,   664,   nil,   nil,   nil,
 13626,   nil,   nil, 13766,   nil,  2402,   nil,   634,   644,   nil,
 13906,   699, 14046,   nil,   nil, 14186, 14326,   nil,   nil,   525,
   nil,   nil, 14466,  1048,   nil,   653,  2402,   691,   731,   701,
 14606,  2543,   501,   506,   574,   779,   640,   nil,   752,   718,
   117,   nil,   nil,   nil,   768,   313,   746, 14746,   nil,   577,
   831,   645,   nil,   835, 14886,   nil, 15026,  2684,  1271,   778,
 15166, 15306,   nil,   nil,   637,   374,    69,   132, 15446,  2825,
  2966,   544,   891,   781,    39,    76,   681,   859,   110,   900,
   nil,   nil, 15586,   nil, 15726,   348,   359,   374,   478,   538,
   572,   591,   620,   684,   nil,   718,   nil,   nil,   nil,   nil,
   nil,   271,   nil,   446,   nil,   611,   nil,   806,   532,   nil,
   811,   nil,   813,   102,   nil,   822,   193,   nil,   574,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 24258,   nil,   nil,   nil,   nil,   849,   nil,
   nil,   837, 15866,   849,   nil,   nil,   839,   nil,   762,   291,
   942,   nil,   nil,  1979,   nil,   nil,   nil,   nil,   nil,  2120,
   863,   nil,   nil,   868,   869,   579,   668,  1456,   nil,   nil,
   nil,   278,   406,   909,   nil,   nil,  1584,  1716,   nil,   nil,
   nil,   123,   nil,   913, 24826, 24899, 16006,   353, 16146, 16286,
 16426,  3107,  3248,   234,   742,   938,   939,   954,   955,  1274,
  1406,  1534,  3389,  3530,  3671,  3812,  3953,  4094,   864,   897,
  4235,  4376,  2543,  1019,  1019,   nil,  1848,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   903,   904,   nil,   nil, 16566,
   nil,   nil, 16706,   nil, 16846,   nil,   276,   nil,   nil,   nil,
 16986,  1276,   914,   913,   nil,   nil,   921, 17126,   929, 17266,
 24972, 25045,   765,   974,   nil, 17406,   941,   nil,   985, 17546,
 25118, 25191,  1146,  2684, 17686,  1066,  1065,   953,   nil,   nil,
   467,   468,  1001,   985,   nil,   501,  1011,   nil,   738,   nil,
   971,   977,   nil,   983,   985,   992,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   981,   778,   nil,   nil, 17826,   nil,
   nil,   nil,  1076,   nil,   nil,   nil,  1078,   nil,   nil,  1080,
  3107,  1120,   nil,  3248,   164,  1124,  1125,  1133,  1141,   nil,
   nil, 17966, 25264, 25337,   132,   nil,   318,   409,   377,   nil,
   779,   nil,  1047, 18106,   nil,  1065,   nil,   nil,   nil, 18246,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   335,   nil,   nil,   598,   nil,   nil,   nil,  1027,   nil,
   nil,  1030,   nil,  3389,   nil, 24396,   nil,  1032, 18386, 18526,
 18666, 25410, 25483, 18806, 18946,   678,  1069, 19086, 19226, 19366,
 19506,  1069,   nil,   nil,   nil, 19646, 19786,  1071,   nil,   nil,
   nil,   383,   438,   534,   673,  1044,  1050,   nil,    89,  1156,
   177,   nil,  1079,   nil,  1189,   nil,   nil,  1071,   nil,  1113,
 19926,   nil,   nil, 20066,   nil,   195, 20206,  1073,   nil,  1081,
    32,    58,  1124,   106,   784,  1126,  1095, 20346, 20486,  1159,
   134,   800,   nil, 20626,   nil,   nil,   nil,   nil, 20766,   nil,
   nil, 20906,   nil,   nil,   nil,   146,  1101,   368,   nil,   nil,
   765,  1387,   nil,  1647,   nil,  1779,   nil, 21046,   nil,   937,
   nil,  1099,   272,  1105,   nil,   nil,   nil,   nil,   857,   nil,
  1220,   nil,   nil,   nil,   nil,   nil,  1232,   nil, 21186,  1122,
   164,   167,   238,   298,  3530,   nil,   783,   nil, 25556, 25629,
 21326,   nil,   nil,   nil,   896,  3671,  3812,  1842, 24742, 24534,
   244,   979,  3953,   nil,   nil,   460,   nil,   nil,   nil,  1141,
   nil,  1132, 21466,  1151,   440,   442,   812,   940,   nil,  2825,
 21606,   nil,  1153,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 21746, 21886, 22026, 22166,   470, 22306,   nil,
   nil, 25910,   nil,  4094,   nil,   nil,  1170,   nil,   119,   nil,
   nil,   nil,   nil,  1156,   130,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  4235,   nil,  1159,  1201,   nil,   nil,   602,   nil,
  4376,  4517,  1161,  1168,  1167,   nil,   nil,   nil,  1169,  1177,
   nil,  1179,  1191,   nil,  1192,   nil,   nil,  1200,  1003,  1199,
  1008,   nil,  1320,   nil,   nil, 22446,   nil,  4658,  1321,   nil,
   nil,   145,   180,  1326,   446,   852,   nil,  1216,  4799, 22586,
   576,  1334,   nil,  1218,   659,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1207,   nil,   nil,  1217,   479,   nil,   nil, 22726,
 22866,  2966,  1218,  1219,   nil,  1220,  1224,  1225,   nil,  1246,
  1230,  1214, 23006,   nil,   nil,   nil,   nil,  4940,  5081,   nil,
   138, 23146,   nil,   nil,  1249,  1359,  1062,   nil,   nil, 25917,
   nil, 25937,   nil, 25968,   nil, 25976,   nil,   nil,   nil,   nil,
   409,  1131,  1240,   nil,   157,   nil,   nil, 23286,  5222,   nil,
   nil,  1361,   684,   nil,   nil,  1362,   nil,   nil,  1282,   nil,
   498,   nil,   nil, 25999,   nil,   nil, 26007,   nil, 26027,   nil,
   nil,  1265, 23426,   815,  1321,   nil,  1373,  5363,   171,   173,
   816,  1327,   174,   nil,   nil,   nil,   734,   nil,   nil,   nil,
  1254,  1255,  1256,  1257,  1258,  1136,  1259,  1164,  5504,   nil,
   350,   nil,   nil,  5645,   nil,  5786,  1260,   nil,   nil,  1261,
  1276,  1277,  1281,   nil,  1282,   nil,   850, 25702,   nil,   nil,
  1406, 23566, 25775, 25848,   177,   nil,  1205, 26036,   nil,   nil,
   nil,   nil,  1189,  1285,   947,   nil,   nil,   nil,  1407,  1408,
   nil, 26064,   nil, 26089,   nil, 26118,   nil, 26126,   nil,   nil,
  1330,  1332,   nil,  1298,   180,   181,   208,   242,   nil,  1297,
  1305,   nil,   nil,   nil,  1307,  1310,  1316,  1317,   245,   nil,
 26146,   nil,   nil,   nil,   nil,  1318,   nil ]

racc_action_default = [
    -1,  -652,  -651,  -652,    -2,  -638,    -4,    -5,  -652,    -8,
    -9,  -652,  -652,  -652,   -35,  -652,  -652,   -39,  -652,  -652,
  -295,   -51,  -640,  -652,   -56,   -61,   -62,   -63,   -67,  -272,
  -272,  -272,  -310,  -344,  -345,   -79,  -651,   -83,   -91,   -93,
  -652,  -539,  -540,  -652,  -652,  -652,  -652,  -231,  -652,  -640,
  -245,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,  -294,
  -624,  -297,  -299,  -306,  -308,  -318,  -424,  -652,  -652,   -58,
   -58,  -638,  -652,  -328,  -335,  -652,  -346,  -347,  -349,  -350,
  -351,  -352,  -353,  -354,  -355,  -356,  -357,  -358,  -367,  -469,
  -470,  -471,  -472,  -473,  -474,  -651,  -477,  -651,  -651,  -651,
  -487,  -651,  -651,  -651,  -515,  -521,  -523,  -524,  -525,  -526,
  -622,  -528,  -529,  -623,  -531,  -532,  -533,  -534,  -535,  -536,
  -537,  -538,  -543,  -544,  1097,    -3,  -639,  -647,  -648,  -649,
    -7,  -652,  -652,  -652,  -652,  -652,  -652,   -23,  -652,  -122,
  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -134,  -135,
  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,
  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,
  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,
  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,
  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,
  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,  -195,
  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,
   -28,  -131,  -651,  -652,  -652,  -652,  -652,  -652,  -651,  -652,
  -652,  -634,  -635,  -652,  -652,  -640,  -641,   -55,  -652,  -539,
  -540,  -652,  -295,  -652,  -652,  -237,  -652,  -651,  -652,  -652,
  -652,  -652,  -652,  -652,  -652,  -652,  -652,  -652,  -652,  -652,
  -652,  -652,  -652,  -652,  -652,  -652,  -652,  -652,  -652,  -652,
  -652,  -246,  -247,  -248,  -249,  -652,  -360,  -453,  -432,  -652,
  -636,  -637,   -68,  -652,  -317,  -359,  -652,  -446,  -448,   -74,
  -651,  -443,   -75,  -640,   -76,  -252,  -267,  -651,  -651,  -271,
  -652,  -277,  -652,  -651,  -616,  -652,  -652,   -77,   -78,  -638,
   -17,   -18,  -652,   -21,   -22,   -81,  -651,  -640,  -652,   -84,
   -87,  -651,   -99,  -100,  -652,  -652,  -107,  -310,  -313,  -640,
  -436,  -344,  -345,  -348,  -444,  -652,   -89,  -652,   -95,  -305,
  -522,  -652,  -225,  -226,  -652,  -238,  -652,  -651,  -301,  -640,
  -651,  -651,  -319,  -320,  -571,   -57,  -652,  -652,  -652,  -651,
  -651,  -638,  -652,  -639,  -539,  -540,  -652,  -652,  -295,  -652,
  -377,  -378,  -652,  -331,  -652,  -122,  -123,  -165,  -166,  -167,
  -183,  -188,  -195,  -198,  -338,  -652,  -539,  -540,  -611,  -612,
  -475,  -652,  -499,  -652,  -501,  -652,  -503,  -652,  -652,  -482,
  -652,  -651,  -652,  -652,  -495,  -652,  -652,  -497,  -652,  -514,
  -516,  -517,  -518,  -519,    -6,  -650,   -29,   -30,   -31,   -32,
   -33,   -10,   -11,  -652,   -25,   -26,   -27,  -132,  -652,   -36,
   -38,  -282,  -652,  -652,  -281,   -37,  -652,   -40,  -652,  -295,
   -48,   -50,  -206,  -257,  -277,   -52,   -53,   -41,  -207,  -257,
  -640,  -262,  -263,  -651,  -651,  -625,  -626,  -272,  -441,  -627,
  -628,  -626,  -625,  -272,  -440,  -442,  -627,  -628,   -47,  -215,
   -54,  -640,  -316,  -652,  -652,  -652,  -651,  -305,  -652,  -652,
  -652,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,  -227,
  -228,  -229,  -230,  -232,  -233,  -234,  -235,  -236,  -239,  -240,
  -241,  -242,  -640,  -250,  -652,  -454,  -272,  -625,  -626,   -65,
   -69,  -273,  -437,  -450,  -453,  -640,  -640,  -312,  -268,  -652,
  -276,  -269,  -652,  -274,  -652,  -278,  -652,  -619,  -621,   -16,
  -639,   -20,  -640,   -80,  -303,   -96,   -85,  -652,  -640,  -651,
  -652,  -652,  -106,  -652,  -522,  -652,   -92,   -97,  -652,  -652,
  -652,  -652,  -251,  -243,  -652,  -461,  -652,  -640,  -300,  -253,
  -644,  -644,  -652,  -652,  -614,  -644,  -652,  -425,  -571,  -428,
  -610,  -610,  -554,  -556,  -556,  -556,  -570,  -572,  -573,  -574,
  -575,  -576,  -577,  -578,  -579,  -652,  -581,  -583,  -585,  -590,
  -592,  -593,  -595,  -600,  -602,  -603,  -605,  -606,  -607,  -652,
  -651,  -368,  -369,  -651,  -652,  -652,  -652,  -652,  -652,  -363,
  -456,  -651,  -652,  -652,  -305,   -58,  -117,  -118,  -652,  -120,
  -652,  -295,  -651,  -652,  -336,  -549,  -341,  -632,  -633,  -652,
  -476,  -500,  -505,  -506,  -508,  -478,  -502,  -479,  -504,  -480,
  -481,  -652,  -484,  -486,  -652,  -489,  -491,  -492,  -652,  -493,
  -494,  -652,  -520,  -651,   -24,  -652,   -34,  -285,  -652,  -652,
  -651,  -652,  -652,  -652,  -652,  -445,  -652,  -264,  -266,  -652,
  -652,   -70,  -260,  -261,  -438,  -652,  -652,   -72,  -439,  -315,
  -642,  -625,  -626,  -625,  -626,  -640,  -652,  -431,  -651,   -64,
  -433,  -450,  -652,  -451,  -652,  -259,  -311,  -651,  -275,  -279,
  -652,  -617,  -618,  -652,   -19,   -82,  -652,   -88,   -94,  -640,
  -625,  -626,  -651,  -629,  -105,  -652,   -90,  -652,  -652,  -224,
  -640,  -651,  -361,  -651,  -298,  -366,  -302,  -254,  -646,  -645,
  -256,  -646,  -307,  -309,  -615,  -652,  -640,  -652,  -552,  -553,
  -652,  -652,  -563,  -652,  -566,  -652,  -568,  -652,  -379,  -652,
  -381,  -383,  -390,  -640,  -584,  -594,  -604,  -608,  -651,  -370,
  -651,   -59,  -371,  -372,  -323,  -324,  -652,  -326,  -652,  -640,
  -625,  -626,  -629,  -304,  -651,  -117,  -118,  -119,  -652,  -652,
  -651,  -329,  -545,  -547,  -332,  -651,  -651,  -571,  -571,  -652,
  -640,  -652,  -651,  -483,  -485,  -652,  -488,  -496,  -498,  -652,
  -133,  -283,  -652,  -640,  -625,  -626,  -626,  -625,   -49,  -258,
  -652,  -643,  -651,   -43,  -209,   -44,  -210,   -71,   -45,  -212,
   -46,  -211,   -73,  -652,  -652,  -652,  -652,  -445,  -652,  -413,
  -414,  -640,  -416,  -651,  -435,  -434,  -652,  -447,  -651,  -449,
  -270,  -280,  -620,   -86,  -445,   -98,  -214,  -314,   -13,   -15,
  -362,  -364,  -651,  -468,  -462,  -651,  -463,  -464,  -644,  -426,
  -651,  -651,  -418,  -640,  -610,  -591,  -609,  -555,  -556,  -556,
  -582,  -556,  -556,  -601,  -556,  -579,  -596,  -640,  -652,  -388,
  -652,  -580,  -652,  -365,  -373,  -652,  -375,  -651,  -652,   -60,
  -325,  -652,  -445,  -652,  -117,  -118,  -121,  -640,  -651,  -652,
  -652,  -652,  -339,  -640,  -652,  -342,  -613,  -507,  -510,  -511,
  -512,  -513,  -652,  -490,   -12,  -284,  -445,   -42,  -208,  -265,
  -652,  -244,  -610,  -610,  -395,  -651,  -651,  -651,  -412,  -652,
  -640,  -579,  -587,  -588,  -598,  -455,   -66,  -651,  -651,  -467,
  -652,  -652,  -466,  -255,  -652,  -652,  -652,  -427,  -551,  -652,
  -559,  -652,  -561,  -652,  -564,  -652,  -567,  -569,  -380,  -382,
  -386,  -652,  -391,  -321,  -652,  -376,  -322,  -652,  -651,  -327,
  -445,  -652,  -652,  -333,  -337,  -652,  -548,  -550,  -549,  -509,
  -652,  -393,  -394,  -403,  -397,  -405,  -652,  -408,  -652,  -410,
  -415,  -652,  -652,  -586,  -652,  -452,  -651,  -651,  -539,  -540,
  -652,  -652,  -295,  -465,  -429,  -430,  -640,  -420,  -422,  -423,
  -556,  -556,  -556,  -556,  -384,  -652,  -389,  -652,  -651,  -279,
  -651,  -330,  -546,  -651,  -340,  -651,  -610,  -589,  -396,  -651,
  -651,  -651,  -651,  -599,  -651,  -417,  -597,  -652,  -305,   -14,
  -461,  -651,  -652,  -652,  -305,  -419,  -652,  -652,  -557,  -560,
  -562,  -565,  -652,  -387,  -651,  -457,  -458,  -459,  -652,  -652,
  -392,  -652,  -400,  -652,  -402,  -652,  -406,  -652,  -409,  -411,
  -304,  -629,  -460,  -640,  -625,  -626,  -629,  -304,  -421,  -556,
  -385,  -374,  -334,  -343,  -651,  -651,  -651,  -651,  -445,  -558,
  -652,  -398,  -401,  -404,  -407,  -651,  -399 ]

clist = [
'6,352,234,129,450,457,463,278,384,356,357,608,701,361,296,296,296,142',
'142,318,721,291,229,786,4,521,9,237,569,346,280,665,9,297,297,297,410',
'556,359,360,319,600,603,434,435,333,333,870,355,355,510,125,355,584',
'546,506,137,221,126,298,298,298,576,340,882,641,515,145,145,129,888',
'748,391,416,417,418,419,504,315,873,333,142,147,147,863,698,348,636',
'698,638,317,692,642,392,753,394,396,399,833,404,407,394,636,336,849',
'727,730,738,739,142,734,962,355,355,355,355,926,362,447,441,959,777',
'441,869,468,871,130,1033,441,1007,294,307,308,622,393,624,1,2,421,1009',
'408,136,653,848,938,704,220,448,371,430,9,423,761,469,889,279,691,655',
'701,420,344,562,690,388,282,289,292,563,353,369,781,385,626,347,349',
'557,350,351,372,929,898,521,623,900,1023,374,785,625,975,789,978,928',
'1016,930,1006,567,859,354,735,513,514,838,1033,688,1055,428,445,446',
'768,855,296,940,390,927,395,470,471,398,644,401,458,701,403,406,433',
'433,451,429,440,1078,318,440,907,698,698,748,467,440,879,1009,791,474',
'736,792,414,409,1053,472,937,899,457,463,685,868,707,865,766,1027,877',
'959,629,870,716,,,296,827,584,1029,836,,,296,,,296,576,512,991,,526',
'896,,1080,297,873,,19,451,870,844,,,19,297,520,520,,,318,604,392,,,318',
'517,,129,238,543,298,795,,,694,709,712,238,238,238,298,19,324,324,,291',
'712,540,333,533,1056,1010,,,,794,531,,642,355,547,,605,606,550,333,',
'19,559,564,892,560,238,238,544,529,238,366,315,129,1081,558,530,315',
'748,1030,748,,1031,612,532,,,870,,538,1025,561,565,1039,333,511,333',
',916,536,,769,712,,,516,,,,,,,469,645,448,948,,943,,,,607,,701,,19,',
',,,238,238,238,238,19,,,843,840,,,,,142,666,,,,,,803,457,463,817,584',
'661,584,1084,,822,1014,748,673,,,520,520,,678,672,,,296,981,982,903',
'904,,,458,,,654,,,,,,451,901,902,,970,145,,467,686,679,,698,584,584',
',794,,742,744,746,147,576,576,673,,,,748,,748,672,1072,,19,238,438,238',
'238,438,238,,,,,438,238,238,296,,,,,,695,696,,931,458,19,,,720,,451',
'748,840,547,458,,856,705,333,697,467,547,,708,945,,333,441,712,897,467',
',,813,815,,1060,441,441,818,820,238,726,441,441,,,,238,968,,238,,,,',
'758,774,,760,,971,814,816,,671,296,,819,821,19,677,,,19,762,458,784',
'324,19,,,451,790,,,,,,,,,467,783,,324,,932,997,835,,,,,,19,,,,,,846',
',,689,296,238,19,19,,,584,1018,,6,458,,1088,,,620,451,620,,142,,440',
',666,,,467,1057,,834,,440,440,799,,9,,440,440,,931,,,931,829,808,,666',
',,,,812,520,,,,,800,917,,673,,441,678,,,547,672,145,,1058,333,1059,862',
',,853,845,857,905,,433,333,147,,,,918,,847,,,,,,,,,,,814,816,821,819',
',,666,,,,,,858,886,893,886,,931,238,296,,,881,,431,444,891,458,,,932',
',912,932,,451,932,,932,,666,467,,950,952,,954,956,,957,,,142,,,,864',
',,906,,,,,,,,520,862,724,,440,19,935,1073,712,,,,324,,238,,,964,,,324',
',,,,939,829,,,238,918,972,,944,523,,525,,,527,528,,,942,932,,932,,932',
',932,764,765,,767,,355,,,,965,,,,,947,,666,,,355,,,932,,19,,,19,958',
',,,923,,566,238,,973,,,,977,,866,,,866,238,,862,,,,238,976,,,,,995,996',
',984,984,984,,,1048,1049,1050,1051,,,,,,,19,,333,,,,438,238,,,19,333',
',1020,,,438,438,,,,,438,438,,,,,,,,,1022,,,,,29,657,,,,1040,29,,,,,1045',
',,,,324,,,853,,29,1089,924,,333,1054,324,1042,,29,29,29,,29,,,,,,985',
'987,989,886,,,,890,296,,,,984,984,984,984,,984,458,,29,,,,451,29,29',
'1026,467,29,923,,,923,467,923,,886,666,,,,,,19,,,,699,,238,566,,702',
',19,19,,,,,,19,,,,,984,984,984,984,,,,,,,,984,872,438,874,,,29,,,,,29',
'29,29,29,29,,,,,,,,,,19,1062,1064,1066,1068,923,1069,923,,923,,923,',
',754,,,,,19,963,,,,,,966,19,19,866,,969,924,,923,924,,924,,974,,,,,',
',,,,,,,238,,19,,1091,1092,1093,1094,,,,,925,19,238,1096,,,,,,,,,,29',
'29,29,29,29,29,29,801,,,,29,29,29,,,699,566,,,,,993,,,29,,19,19,,,1000',
'1021,924,,924,1024,924,,924,,,,,,,,,,841,,,842,,,,,,19,,,29,924,,,,',
',29,,,29,854,,,,,699,,,566,,1036,,,,,19,,,29,,,,29,,876,,,29,,,,,,1011',
',1012,19,1013,,,,19,,19,,444,,1082,1083,,,,,29,,,,,,238,,,,,29,29,29',
',,32,1032,,1034,,,32,,,,915,,,,,,,,,,,32,,,,,,,,,32,32,32,,32,,,,,,',
',,,,,,,,16,,,,,,16,,,,,32,,1079,,,32,32,,,32,,,,,,,1085,,1086,,1087',
',,16,,,,,,,,,,,,,,,,,,,,,,1095,,,,16,,,,29,,,,,,370,,,,,32,,,566,,32',
'32,32,32,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,18,,,,,16,18,1019,29',
',,,,,16,,,,,,,,,29,,,,,,,,,,,18,,,,,,,,,,,,,,,,,,32,32,32,32,32,32,32',
',18,,,32,32,32,,,,29,,,29,,,,,32,,,29,,,,,,,,,,,,29,,,,,,29,,,16,,436',
',,436,,,,,,436,32,,,,,,,32,,29,32,18,,16,,29,29,,,29,18,,,,,29,29,,',
'32,,29,29,32,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,32,32,32,16',
',,,16,,,,,16,,,,,,,,,,,,,,,,,,,,18,,18,,,18,16,,,,,18,,,,,,,16,16,,',
',29,,18,,,,29,,,,,29,29,,,,,,29,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,',
',,,,,,29,,,,32,,,,18,,,,18,,,,,18,,29,,,,,,,,29,29,,,,,,,,,,,,,,,18',
',,,,,,,,29,,29,18,18,,32,,,,,,,29,29,32,,,,,,,,,,,,,,,32,,,20,,,,,,20',
',,,,,,,,,,,,29,29,,16,,,,,,,,,,,,20,326,326,,,,,,,32,,,32,,,,29,,,,32',
',,,,,20,,,,,,32,,,,368,,32,,,,,,,29,,,,,,,,,,,,,16,,,16,32,,,,29,,32',
'32,,29,32,29,,,,,32,32,,,,,32,32,,,,29,20,,,,,,,,,20,,,,,,,,18,,,,16',
',,,,,436,,,,16,,,,,,436,436,,,,,436,436,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,18,,,18,,,32,,,20,,439,32,,439,,,32,32,,439,,,,32,,,,',
',,,,,20,,,,,,,,32,,,,,,,,,,,18,,16,,,,18,,,,18,,32,16,16,,18,18,,,16',
',18,18,,,,,,,,32,,,,,,,436,32,32,,,,,,20,,,,20,,,,326,20,,,,,,16,,,32',
',32,,,,,326,,,,,41,32,32,,16,20,41,,,,,,16,16,,,,20,20,,,,,,,,,,,,621',
',621,,41,322,322,,,16,32,32,,,,18,,,,,16,,,,,,18,18,,,41,,,18,,,,,,',
'364,32,,386,,,,,,,,18,,,,,,,,16,16,,,1003,,,,,,,32,,,,18,,,,,,,,,,,',
',,,,16,32,,18,41,,32,,32,,,18,18,41,,,,,,,,,,,32,,,,,16,,,,,,,,,18,',
',,,,,,,,,18,16,,,,,16,,16,,,,,,,,,,,20,,,,,,,326,,,,,,,,326,,,,,18,18',
',,,42,,,,,,42,41,,,,,,,,,,,,,,,,,,,18,,,,,,41,,42,323,323,,,,,,,,,20',
',,20,,,,,,,18,,,,,42,,,,,,,,,,365,,,387,,,18,,,,,18,,18,,,,,,,,,,,,',
',41,20,,,41,,,439,322,41,,20,,,,,,439,439,,,,,439,439,322,,42,,,,,,',
',41,42,,,,,,,,,,,41,41,,,,,,326,,,,,,386,,386,,,326,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,42,,,,,,,,,,20,20,,,,,911',
'20,,,,,,,,42,,,,,,,,,,439,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,,,,,,,',
',20,,,,,,,,20,20,,,,42,,,,42,41,,,323,42,,,322,,,,,,,,322,,20,,,323',
',,,,,,,20,,42,,,,,,,,,,,,42,42,,,,,,,,,,,,387,,387,,,,,621,,,,,20,20',
',41,1002,,41,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,,,,,,,,,,,,,,621,41',
',,,20,,,,,,41,,,,,,,,,,,,,,,20,,,,,20,,20,,,,,,,,,,,,,,,,,,,,,322,,',
',,,,,,,,322,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,323,,,,,,,,323,,,,,,,',
',,,,,,,,41,,,,,,,,,,,41,41,,,,,,41,,,,,,,,,,,,,,,,,,,,,42,,,42,,,,,',
',,,,,,,,,,,41,,,,,,,,,,,,,,,,,,,41,,,,,,,,41,41,,,,,42,,,,,,,,,,42,',
',,,,,,,,245,41,,,,,,,,295,295,295,41,,,,,,,,,,342,343,,345,,,,,,,,323',
',,,,,,,,,,323,,386,,,,,41,41,,,998,,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,',
',,,,,,,,,,,,,,42,,,,,386,,,,,41,42,42,,,,,,42,,,,,,,,,,,,,41,,,,,41',
',41,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,42,,,,,,,,42,42,,,,,,,',
',,,,295,443,,,449,295,,,,,449,,,,42,,,,,,,,,245,,42,481,482,483,484',
'485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501',
'502,,,,,503,,,,,,,387,295,,,,42,42,,295,999,,295,,,,,,,295,,295,,,295',
'295,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,387,,552,,553,42,,,295,295',
',,,,,,,,,,,,,,,,42,,,,,42,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295',
',449,449,449,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,,,295,,295,,',
',,,,,,,,,,,,295,,,,,,,,,,719,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295',
',,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,295,449,295,,,,809,,,295,295,449,449,,,,,449,449,,,,,,,,,,,,,,,',
',,,,,,,,295,,,295,,,,,,,,,,,,,,,449,,,,,295,,,,,295,,,295,,,,,,,,,,',
',,,,,295,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,',
',295,,,,,,,,449,,,,,,,,,,,,,449,449,449,449,,921,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,295,449,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295' ]
        racc_goto_table = arr = ::Array.new(4134, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,104,39,120,35,49,49,173,69,23,23,115,221,23,45,45,45,70,70,14,15,87',
'37,123,2,89,9,26,172,39,37,36,9,84,84,84,69,12,41,41,62,108,108,28,28',
'79,79,211,30,30,51,5,30,210,64,49,21,21,8,86,86,86,205,77,109,194,35',
'73,73,120,111,149,190,23,23,23,23,174,58,216,79,70,74,74,164,90,9,195',
'90,195,59,52,195,6,150,6,6,6,162,6,6,6,195,63,17,85,85,155,155,70,85',
'151,30,30,30,30,160,5,32,24,148,67,24,161,32,161,7,217,24,166,57,57',
'57,68,191,68,1,3,10,167,191,11,13,16,18,20,22,76,25,29,9,31,42,76,44',
'48,54,75,221,9,80,83,88,100,50,50,50,103,106,117,119,124,125,126,127',
'128,129,130,131,164,132,89,133,134,135,136,137,138,139,140,141,152,151',
'158,165,168,169,170,171,177,178,180,217,182,183,14,30,30,184,185,45',
'186,189,161,192,30,30,193,196,197,87,221,198,199,84,84,6,26,26,166,14',
'26,200,90,90,149,70,26,149,167,201,37,172,202,7,203,151,60,162,204,49',
'49,35,209,64,213,115,214,150,148,220,211,64,,,45,36,210,160,52,,,45',
',,45,205,87,164,,190,67,,151,84,216,,34,6,211,36,,,34,84,6,6,,,14,23',
'6,,,14,60,,120,34,39,86,194,,,174,35,49,34,34,34,86,34,34,34,,87,49',
'37,79,60,111,161,,,,195,9,,195,30,62,,14,14,37,79,,34,6,6,36,84,34,34',
'77,5,34,34,58,120,109,60,8,58,149,161,149,,161,37,59,,,211,,59,123,86',
'86,17,79,57,79,,36,63,,35,49,,,57,,,,,,,76,6,76,155,,85,,,,5,,221,,34',
',,,,34,34,34,34,34,,,64,89,,,,,70,39,,,,,,35,49,49,51,210,37,210,161',
',51,149,149,87,,,6,6,,87,6,,,45,155,155,172,172,,,87,,,21,,,,,,6,12',
'12,,36,73,,70,39,60,,90,210,210,,195,,208,208,208,74,205,205,87,,,,149',
',149,6,15,,34,34,34,34,34,34,34,,,,,34,34,34,45,,,,,,60,60,,210,87,34',
',,30,,6,149,89,62,87,,28,60,79,86,70,62,,60,12,,79,24,49,35,70,,,32',
'32,,155,24,24,32,32,34,60,24,24,,,,34,108,,34,,,,,14,41,,14,,12,76,76',
',50,45,,76,76,34,50,,,34,120,87,30,34,34,,,6,30,,,,,,,,,70,6,,34,,212',
'108,104,,,,,,34,,,,,,76,,,50,45,34,34,34,,,210,108,,6,87,,36,,,34,6',
'34,,70,,26,,39,,,70,115,,173,,26,26,2,,9,,26,26,,210,,,210,6,9,,39,',
',,,86,6,,,,,21,32,,87,,24,87,,,62,6,73,,12,79,12,39,,,6,62,6,69,,84',
'79,74,,,,76,,60,,,,,,,,,,,76,76,76,76,,,39,,,,,,86,6,14,6,,210,34,45',
',,60,,82,82,84,87,,,212,,14,212,,6,212,,212,,39,70,,208,208,,208,208',
',208,,,70,,,,154,,,60,,,,,,,,6,39,102,,26,34,14,35,49,,,,34,,34,,,23',
',,34,,,,,14,6,,,34,76,23,,14,82,,82,,,82,82,,,6,212,,212,,212,,212,102',
'102,,102,,30,,,,14,,,,,60,,39,,,30,,,212,,34,,,34,60,,,,154,,82,34,',
'120,,,,120,,156,,,156,34,,39,,,,34,60,,,,,14,14,,6,6,6,,,208,208,208',
'208,,,,,,,34,,79,,,,34,34,,,34,79,,14,,,34,34,,,,,34,34,,,,,,,,,120',
',,,,53,82,,,,14,53,,,,,39,,,,,34,,,6,,53,208,156,,79,14,34,37,,53,53',
'53,,53,,,,,,157,157,157,6,,,,102,45,,,,6,6,6,6,,6,87,,53,,,,6,53,53',
'154,70,53,154,,,154,70,154,,6,39,,,,,,34,,,,82,,34,82,,82,,34,34,,,',
',,34,,,,,6,6,6,6,,,,,,,,6,159,34,159,,,53,,,,,53,53,53,53,53,,,,,,,',
',,34,157,157,157,157,154,157,154,,154,,154,,,82,,,,,34,102,,,,,,102',
'34,34,156,,102,156,,154,156,,156,,102,,,,,,,,,,,,,34,,34,,157,157,157',
'157,,,,,159,34,34,157,,,,,,,,,,53,53,53,53,53,53,53,82,,,,53,53,53,',
',82,82,,,,,34,,,53,,34,34,,,34,102,156,,156,102,156,,156,,,,,,,,,,82',
',,82,,,,,,34,,,53,156,,,,,,53,,,53,82,,,,,82,,,82,,34,,,,,34,,,53,,',
',53,,82,,,53,,,,,,159,,159,34,159,,,,34,,34,,82,,102,102,,,,,53,,,,',
',34,,,,,53,53,53,,,56,159,,159,,,56,,,,82,,,,,,,,,,,56,,,,,,,,,56,56',
'56,,56,,,,,,,,,,,,,,,27,,,,,,27,,,,,56,,159,,,56,56,,,56,,,,,,,159,',
'159,,159,,,27,,,,,,,,,,,,,,,,,,,,,,159,,,,27,,,,53,,,,,,27,,,,,56,,',
'82,,56,56,56,56,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,33,,,,,27,33',
'82,53,,,,,,27,,,,,,,,,53,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,56,56,56,56,56',
'56,56,,33,,,56,56,56,,,,53,,,53,,,,,56,,,53,,,,,,,,,,,,53,,,,,,53,,',
'27,,27,,,27,,,,,,27,56,,,,,,,56,,53,56,33,,27,,53,53,,,53,33,,,,,53',
'53,,,56,,53,53,56,,,,,56,,,,,,,,,,,,,,,,,,,,,,,,,,56,,,,,,,,,,,56,56',
'56,27,,,,27,,,,,27,,,,,,,,,,,,,,,,,,,,33,,33,,,33,27,,,,,33,,,,,,,27',
'27,,,,53,,33,,,,53,,,,,53,53,,,,,,53,,,,,,,,,,,,,,,,,,53,,,,,,,,,,,',
',,,,,,,,,,,53,,,,56,,,,33,,,,33,,,,,33,,53,,,,,,,,53,53,,,,,,,,,,,,',
',,33,,,,,,,,,53,,53,33,33,,56,,,,,,,53,53,56,,,,,,,,,,,,,,,56,,,38,',
',,,,38,,,,,,,,,,,,,53,53,,27,,,,,,,,,,,,38,38,38,,,,,,,56,,,56,,,,53',
',,,56,,,,,,38,,,,,,56,,,,38,,56,,,,,,,53,,,,,,,,,,,,,27,,,27,56,,,,53',
',56,56,,53,56,53,,,,,56,56,,,,,56,56,,,,53,38,,,,,,,,,38,,,,,,,,33,',
',,27,,,,,,27,,,,27,,,,,,27,27,,,,,27,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,33,,,33,,,56,,,38,,38,56,,38,,,56,56,,38,,,,56,,,,,,,',
',,38,,,,,,,,56,,,,,,,,,,,33,,27,,,,33,,,,33,,56,27,27,,33,33,,,27,,33',
'33,,,,,,,,56,,,,,,,27,56,56,,,,,,38,,,,38,,,,38,38,,,,,,27,,,56,,56',
',,,,38,,,,,65,56,56,,27,38,65,,,,,,27,27,,,,38,38,,,,,,,,,,,,38,,38',
',65,65,65,,,27,56,56,,,,33,,,,,27,,,,,,33,33,,,65,,,33,,,,,,,65,56,',
'65,,,,,,,,33,,,,,,,,27,27,,,27,,,,,,,56,,,,33,,,,,,,,,,,,,,,,27,56,',
'33,65,,56,,56,,,33,33,65,,,,,,,,,,,56,,,,,27,,,,,,,,,33,,,,,,,,,,,33',
'27,,,,,27,,27,,,,,,,,,,,38,,,,,,,38,,,,,,,,38,,,,,33,33,,,,66,,,,,,66',
'65,,,,,,,,,,,,,,,,,,,33,,,,,,65,,66,66,66,,,,,,,,,38,,,38,,,,,,,33,',
',,,66,,,,,,,,,,66,,,66,,,33,,,,,33,,33,,,,,,,,,,,,,,65,38,,,65,,,38',
'65,65,,38,,,,,,38,38,,,,,38,38,65,,66,,,,,,,,65,66,,,,,,,,,,,65,65,',
',,,,38,,,,,,65,,65,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,38,66,,,,,,,,,,38,38,,,,,38,38,,,,,,,,66,,,,,,,,,,38,,,',
',,,,,,,,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,38,,,,,,,,38,38,,,,66,,,,66',
'65,,,66,66,,,65,,,,,,,,65,,38,,,66,,,,,,,,38,,66,,,,,,,,,,,,66,66,,',
',,,,,,,,,66,,66,,,,,38,,,,,38,38,,65,38,,65,,,,,,,,,,,,,,,,,,,,,,,,',
'38,,,,,,,,,,,,,,,,,,,,,,,,38,65,,,,38,,,,,,65,,,,,,,,,,,,,,,38,,,,,38',
',38,,,,,,,,,,,,,,,,,,,,,65,,,,,,,,,,,65,,,,,,,,,,,,,,,,,,,,,,,,,,66',
',,,,,,66,,,,,,,,66,,,,,,,,,,,,,,,,65,,,,,,,,,,,65,65,,,,,,65,,,,,,,',
',,,,,,,,,,,,,66,,,66,,,,,,,,,,,,,,,,,65,,,,,,,,,,,,,,,,,,,65,,,,,,,',
'65,65,,,,,66,,,,,,,,,,66,,,,,,,,,,40,65,,,,,,,,40,40,40,65,,,,,,,,,',
'40,40,,40,,,,,,,,66,,,,,,,,,,,66,,65,,,,,65,65,,,65,,,,,,,,,,,,,,,,',
',,,,,,,,,,65,,,,,,,,,,,,,,,,,,,66,,,,,65,,,,,65,66,66,,,,,,66,,,,,,',
',,,,,,65,,,,,65,,65,,,,,,,,,,,,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,66,,,,',
',,,66,66,,,,,,,,,,,,40,40,,,40,40,,,,,40,,,,66,,,,,,,,,40,,66,40,40',
'40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,,,,,40,',
',,,,,66,40,,,,66,66,,40,66,,40,,,,,,,40,,40,,,40,40,,,,,,,,,,,,66,,',
',,,,,,,,,,,,,,,,,,,,,66,,40,,40,66,,,40,40,,,,,,,,,,,,,,,,,66,,,,,66',
',66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,40,40,40,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,40,,,40,,40,,,,,,,,,,,,,,,40,,,,,,,,,,40,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,40,,,,40,,,40,40,40,40,',
',,,40,40,,,,,,,,,,,,,,,,,,,,,,,,40,,,40,,,,,,,,,,,,,,,40,,,,,40,,,,',
'40,,,40,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,40,,,,,',
',,,,,,,,,,,,,,,,40,,,,,,,,40,,,,,,,,,,,,,40,40,40,40,,40,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,40' ]
        racc_goto_check = arr = ::Array.new(4134, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   136,    22,   137,   nil,    46,    -2,   118,    53,    24,
     2,   131,  -310,  -280,   -17,  -535,  -578,  -617,  -704,   nil,
  -385,    45,   134,   -58,  -105,    76,     4,  1383,  -180,   -74,
   -19,    14,  -109,  1502,   285,  -224,  -419,     3,  1889,   -20,
  3092,   -31,  -452,   nil,  -607,   -18,   nil,   nil,   128,  -224,
   135,  -232,  -422,   973,  -353,   nil,  1334,    98,    42,    54,
    12,   nil,     3,    65,  -283,  2229,  2442,  -497,  -239,   -67,
     6,   nil,   nil,    56,    71,  -270,   -80,    19,   nil,     8,
   113,   nil,   544,  -189,     1,  -455,    27,    -9,  -344,  -273,
  -434,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    88,   nil,   256,  -184,   -64,   nil,   102,   nil,  -315,  -694,
   nil,  -690,   nil,   nil,   nil,  -351,   nil,    97,   nil,  -452,
    -2,   nil,   nil,  -602,    96,  -213,   112,   112,  -173,   113,
   113,   105,  -601,  -191,  -601,  -789,   111,  -438,  -197,  -714,
  -437,  -715,   nil,   nil,   nil,   nil,   nil,   nil,  -758,  -514,
  -491,  -769,  -640,   nil,    62,  -463,   167,    90,  -638,   351,
  -715,  -618,  -590,   nil,  -652,  -752,  -817,  -807,  -159,  -539,
   131,  -369,  -326,   -18,  -200,   nil,   nil,   -88,   -88,   nil,
  -492,   nil,  -302,  -816,  -402,  -514,  -644,   nil,   nil,   120,
   -23,    37,   116,   118,  -333,  -306,  -183,   119,   121,   121,
  -559,  -393,  -391,   142,  -533,  -292,   nil,   nil,   -82,  -488,
  -301,  -694,  -207,  -482,  -723,   nil,  -664,  -859,   nil,   nil,
  -129,  -510 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   310,     7,   363,   313,
   nil,   nil,   nil,   nil,   555,   nil,   nil,   nil,   nil,   309,
   311,   nil,   nil,   nil,    14,    15,    21,   243,   nil,   nil,
    17,   nil,   437,   244,   341,   nil,   nil,   779,   242,   473,
    24,   nil,   nil,   358,   nil,    25,    26,    27,   nil,   715,
   nil,   nil,   nil,   330,   nil,    28,   327,   452,    35,   nil,
   nil,    37,    40,    39,   nil,   239,   240,   619,   nil,   144,
   460,   143,   146,    90,    91,   nil,   442,   105,    47,    50,
   275,   548,   301,   nil,   453,   nil,   454,   465,   674,   518,
   299,   283,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    61,   nil,   nil,   284,    65,   nil,    67,   nil,   nil,
    68,   884,    69,    70,    71,   nil,    72,   nil,    73,   nil,
   601,    74,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   288,   277,   723,   852,   610,   885,   750,   583,
   nil,   751,  1028,   922,   571,   nil,   572,   nil,   nil,   573,
   nil,   575,   nil,   830,   nil,   nil,   nil,   581,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   464,   286,   nil,   nil,   693,
   nil,   505,   nil,   nil,   nil,   nil,   nil,    89,    92,    94,
   nil,   nil,   nil,   nil,   nil,   631,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   867,   788,   570,   nil,   574,
   875,   586,   588,   589,   933,   592,   593,   934,   596,   599,
   nil,   304 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 151, :_reduce_1,
  2, 149, :_reduce_2,
  2, 150, :_reduce_3,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  3, 152, :_reduce_6,
  2, 152, :_reduce_none,
  1, 155, :_reduce_none,
  0, 159, :_reduce_9,
  3, 155, :_reduce_10,
  0, 161, :_reduce_11,
  4, 158, :_reduce_12,
  0, 166, :_reduce_13,
  6, 160, :_reduce_14,
  3, 160, :_reduce_15,
  2, 162, :_reduce_16,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  3, 167, :_reduce_19,
  2, 167, :_reduce_20,
  1, 168, :_reduce_none,
  1, 168, :_reduce_22,
  0, 179, :_reduce_23,
  4, 157, :_reduce_24,
  3, 157, :_reduce_25,
  3, 157, :_reduce_26,
  3, 157, :_reduce_27,
  2, 157, :_reduce_28,
  3, 157, :_reduce_29,
  3, 157, :_reduce_30,
  3, 157, :_reduce_31,
  3, 157, :_reduce_32,
  3, 157, :_reduce_33,
  4, 157, :_reduce_34,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  3, 157, :_reduce_38,
  1, 157, :_reduce_none,
  3, 172, :_reduce_40,
  3, 172, :_reduce_41,
  6, 172, :_reduce_42,
  5, 172, :_reduce_43,
  5, 172, :_reduce_44,
  5, 172, :_reduce_45,
  5, 172, :_reduce_46,
  3, 172, :_reduce_47,
  1, 180, :_reduce_48,
  3, 180, :_reduce_49,
  1, 180, :_reduce_none,
  1, 178, :_reduce_none,
  3, 178, :_reduce_52,
  3, 178, :_reduce_53,
  3, 178, :_reduce_54,
  2, 178, :_reduce_55,
  1, 178, :_reduce_none,
  1, 171, :_reduce_57,
  0, 191, :_reduce_58,
  0, 192, :_reduce_59,
  4, 189, :_reduce_60,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 194, :_reduce_none,
  4, 194, :_reduce_64,
  0, 202, :_reduce_65,
  4, 199, :_reduce_66,
  1, 201, :_reduce_67,
  2, 193, :_reduce_68,
  3, 193, :_reduce_69,
  4, 193, :_reduce_70,
  5, 193, :_reduce_71,
  4, 193, :_reduce_72,
  5, 193, :_reduce_73,
  2, 193, :_reduce_74,
  2, 193, :_reduce_75,
  2, 193, :_reduce_76,
  2, 193, :_reduce_77,
  2, 193, :_reduce_78,
  1, 173, :_reduce_none,
  3, 173, :_reduce_80,
  1, 207, :_reduce_none,
  3, 207, :_reduce_82,
  1, 206, :_reduce_83,
  2, 206, :_reduce_84,
  3, 206, :_reduce_85,
  5, 206, :_reduce_86,
  2, 206, :_reduce_87,
  4, 206, :_reduce_88,
  2, 206, :_reduce_89,
  4, 206, :_reduce_90,
  1, 206, :_reduce_91,
  3, 206, :_reduce_92,
  1, 210, :_reduce_none,
  3, 210, :_reduce_94,
  2, 209, :_reduce_95,
  3, 209, :_reduce_96,
  1, 212, :_reduce_97,
  3, 212, :_reduce_98,
  1, 211, :_reduce_99,
  1, 211, :_reduce_100,
  4, 211, :_reduce_101,
  3, 211, :_reduce_102,
  3, 211, :_reduce_103,
  3, 211, :_reduce_104,
  3, 211, :_reduce_105,
  2, 211, :_reduce_106,
  1, 211, :_reduce_107,
  1, 175, :_reduce_108,
  1, 175, :_reduce_109,
  4, 175, :_reduce_110,
  3, 175, :_reduce_111,
  3, 175, :_reduce_112,
  3, 175, :_reduce_113,
  3, 175, :_reduce_114,
  2, 175, :_reduce_115,
  1, 175, :_reduce_116,
  1, 215, :_reduce_117,
  1, 215, :_reduce_none,
  2, 216, :_reduce_119,
  1, 216, :_reduce_120,
  3, 216, :_reduce_121,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_125,
  1, 217, :_reduce_126,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 169, :_reduce_129,
  1, 169, :_reduce_none,
  1, 170, :_reduce_131,
  0, 223, :_reduce_132,
  4, 170, :_reduce_133,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  3, 188, :_reduce_206,
  3, 188, :_reduce_207,
  6, 188, :_reduce_208,
  5, 188, :_reduce_209,
  5, 188, :_reduce_210,
  5, 188, :_reduce_211,
  5, 188, :_reduce_212,
  0, 229, :_reduce_213,
  5, 188, :_reduce_214,
  3, 188, :_reduce_215,
  3, 188, :_reduce_216,
  3, 188, :_reduce_217,
  3, 188, :_reduce_218,
  3, 188, :_reduce_219,
  3, 188, :_reduce_220,
  3, 188, :_reduce_221,
  3, 188, :_reduce_222,
  3, 188, :_reduce_223,
  4, 188, :_reduce_224,
  2, 188, :_reduce_225,
  2, 188, :_reduce_226,
  3, 188, :_reduce_227,
  3, 188, :_reduce_228,
  3, 188, :_reduce_229,
  3, 188, :_reduce_230,
  1, 188, :_reduce_none,
  3, 188, :_reduce_232,
  3, 188, :_reduce_233,
  3, 188, :_reduce_234,
  3, 188, :_reduce_235,
  3, 188, :_reduce_236,
  2, 188, :_reduce_237,
  2, 188, :_reduce_238,
  3, 188, :_reduce_239,
  3, 188, :_reduce_240,
  3, 188, :_reduce_241,
  3, 188, :_reduce_242,
  3, 188, :_reduce_243,
  6, 188, :_reduce_244,
  1, 188, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  3, 226, :_reduce_250,
  3, 226, :_reduce_251,
  1, 230, :_reduce_252,
  1, 231, :_reduce_none,
  2, 231, :_reduce_254,
  4, 231, :_reduce_255,
  2, 231, :_reduce_256,
  1, 224, :_reduce_none,
  3, 224, :_reduce_258,
  3, 235, :_reduce_259,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 183, :_reduce_264,
  4, 183, :_reduce_265,
  2, 183, :_reduce_266,
  1, 205, :_reduce_267,
  2, 205, :_reduce_268,
  2, 205, :_reduce_269,
  4, 205, :_reduce_270,
  1, 205, :_reduce_271,
  0, 239, :_reduce_272,
  2, 198, :_reduce_273,
  2, 238, :_reduce_274,
  2, 237, :_reduce_275,
  1, 237, :_reduce_none,
  1, 232, :_reduce_277,
  2, 232, :_reduce_278,
  3, 232, :_reduce_279,
  4, 232, :_reduce_280,
  1, 177, :_reduce_281,
  1, 177, :_reduce_282,
  3, 176, :_reduce_283,
  4, 176, :_reduce_284,
  2, 176, :_reduce_285,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_296,
  0, 274, :_reduce_297,
  4, 227, :_reduce_298,
  0, 275, :_reduce_299,
  3, 227, :_reduce_300,
  0, 276, :_reduce_301,
  4, 227, :_reduce_302,
  3, 227, :_reduce_303,
  3, 227, :_reduce_304,
  2, 227, :_reduce_305,
  0, 277, :_reduce_306,
  4, 227, :_reduce_307,
  0, 278, :_reduce_308,
  4, 227, :_reduce_309,
  1, 227, :_reduce_310,
  4, 227, :_reduce_311,
  3, 227, :_reduce_312,
  1, 227, :_reduce_313,
  5, 227, :_reduce_314,
  4, 227, :_reduce_315,
  3, 227, :_reduce_316,
  2, 227, :_reduce_317,
  1, 227, :_reduce_none,
  2, 227, :_reduce_319,
  2, 227, :_reduce_320,
  6, 227, :_reduce_321,
  6, 227, :_reduce_322,
  4, 227, :_reduce_323,
  4, 227, :_reduce_324,
  5, 227, :_reduce_325,
  4, 227, :_reduce_326,
  6, 227, :_reduce_327,
  0, 279, :_reduce_328,
  0, 280, :_reduce_329,
  7, 227, :_reduce_330,
  0, 281, :_reduce_331,
  0, 282, :_reduce_332,
  0, 283, :_reduce_333,
  9, 227, :_reduce_334,
  0, 284, :_reduce_335,
  0, 285, :_reduce_336,
  6, 227, :_reduce_337,
  0, 286, :_reduce_338,
  0, 287, :_reduce_339,
  7, 227, :_reduce_340,
  0, 288, :_reduce_341,
  0, 289, :_reduce_342,
  9, 227, :_reduce_343,
  1, 227, :_reduce_344,
  1, 227, :_reduce_345,
  1, 227, :_reduce_346,
  1, 227, :_reduce_347,
  1, 182, :_reduce_348,
  1, 249, :_reduce_none,
  1, 255, :_reduce_none,
  1, 258, :_reduce_none,
  1, 260, :_reduce_none,
  1, 261, :_reduce_none,
  1, 262, :_reduce_none,
  1, 264, :_reduce_none,
  1, 266, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 290, :_reduce_none,
  1, 291, :_reduce_none,
  1, 292, :_reduce_none,
  1, 293, :_reduce_none,
  1, 294, :_reduce_none,
  1, 164, :_reduce_none,
  1, 295, :_reduce_none,
  1, 250, :_reduce_none,
  1, 204, :_reduce_none,
  1, 256, :_reduce_none,
  1, 256, :_reduce_none,
  2, 256, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 257, :_reduce_none,
  5, 257, :_reduce_374,
  1, 259, :_reduce_none,
  2, 259, :_reduce_376,
  1, 265, :_reduce_none,
  1, 265, :_reduce_378,
  1, 296, :_reduce_none,
  3, 296, :_reduce_380,
  1, 299, :_reduce_381,
  3, 299, :_reduce_382,
  1, 298, :_reduce_383,
  4, 298, :_reduce_384,
  6, 298, :_reduce_385,
  3, 298, :_reduce_386,
  5, 298, :_reduce_387,
  2, 298, :_reduce_388,
  4, 298, :_reduce_389,
  1, 298, :_reduce_390,
  3, 298, :_reduce_391,
  4, 300, :_reduce_392,
  2, 300, :_reduce_393,
  2, 300, :_reduce_394,
  1, 300, :_reduce_395,
  2, 305, :_reduce_396,
  1, 305, :_reduce_none,
  6, 306, :_reduce_398,
  8, 306, :_reduce_399,
  4, 306, :_reduce_400,
  6, 306, :_reduce_401,
  4, 306, :_reduce_402,
  2, 306, :_reduce_403,
  6, 306, :_reduce_404,
  2, 306, :_reduce_405,
  4, 306, :_reduce_406,
  6, 306, :_reduce_407,
  2, 306, :_reduce_408,
  4, 306, :_reduce_409,
  2, 306, :_reduce_410,
  4, 306, :_reduce_411,
  1, 306, :_reduce_412,
  1, 310, :_reduce_413,
  1, 310, :_reduce_414,
  3, 311, :_reduce_415,
  1, 311, :_reduce_416,
  4, 311, :_reduce_417,
  1, 312, :_reduce_none,
  4, 312, :_reduce_419,
  1, 313, :_reduce_420,
  3, 313, :_reduce_421,
  1, 314, :_reduce_422,
  1, 314, :_reduce_none,
  0, 318, :_reduce_424,
  0, 319, :_reduce_425,
  4, 254, :_reduce_426,
  4, 316, :_reduce_427,
  1, 316, :_reduce_428,
  3, 317, :_reduce_429,
  3, 317, :_reduce_430,
  3, 321, :_reduce_431,
  2, 195, :_reduce_432,
  4, 195, :_reduce_433,
  5, 195, :_reduce_434,
  5, 195, :_reduce_435,
  0, 324, :_reduce_436,
  3, 253, :_reduce_437,
  4, 253, :_reduce_438,
  4, 253, :_reduce_439,
  3, 253, :_reduce_440,
  3, 253, :_reduce_441,
  3, 253, :_reduce_442,
  2, 253, :_reduce_443,
  1, 253, :_reduce_444,
  4, 253, :_reduce_445,
  0, 325, :_reduce_446,
  4, 252, :_reduce_447,
  0, 326, :_reduce_448,
  4, 252, :_reduce_449,
  0, 327, :_reduce_450,
  0, 328, :_reduce_451,
  4, 200, :_reduce_452,
  0, 329, :_reduce_453,
  0, 330, :_reduce_454,
  4, 322, :_reduce_455,
  0, 332, :_reduce_456,
  6, 263, :_reduce_457,
  1, 331, :_reduce_none,
  1, 331, :_reduce_none,
  6, 163, :_reduce_460,
  0, 163, :_reduce_461,
  1, 333, :_reduce_462,
  1, 333, :_reduce_none,
  1, 333, :_reduce_none,
  2, 334, :_reduce_465,
  1, 334, :_reduce_none,
  2, 165, :_reduce_467,
  1, 165, :_reduce_none,
  1, 240, :_reduce_469,
  1, 240, :_reduce_470,
  1, 240, :_reduce_none,
  1, 241, :_reduce_472,
  1, 336, :_reduce_473,
  1, 336, :_reduce_none,
  2, 336, :_reduce_475,
  3, 337, :_reduce_476,
  1, 337, :_reduce_477,
  3, 242, :_reduce_478,
  3, 243, :_reduce_479,
  3, 244, :_reduce_480,
  3, 244, :_reduce_481,
  1, 341, :_reduce_482,
  3, 341, :_reduce_483,
  1, 342, :_reduce_none,
  2, 342, :_reduce_485,
  3, 246, :_reduce_486,
  0, 345, :_reduce_487,
  4, 246, :_reduce_488,
  1, 344, :_reduce_489,
  3, 344, :_reduce_490,
  3, 245, :_reduce_491,
  3, 245, :_reduce_492,
  3, 247, :_reduce_493,
  3, 247, :_reduce_494,
  1, 346, :_reduce_495,
  3, 346, :_reduce_496,
  1, 347, :_reduce_497,
  3, 347, :_reduce_498,
  1, 338, :_reduce_499,
  2, 338, :_reduce_500,
  1, 339, :_reduce_501,
  2, 339, :_reduce_502,
  1, 340, :_reduce_503,
  2, 340, :_reduce_504,
  1, 343, :_reduce_505,
  0, 349, :_reduce_506,
  3, 343, :_reduce_507,
  0, 350, :_reduce_508,
  4, 343, :_reduce_509,
  1, 348, :_reduce_510,
  1, 348, :_reduce_511,
  1, 348, :_reduce_512,
  1, 348, :_reduce_none,
  2, 221, :_reduce_514,
  1, 221, :_reduce_515,
  1, 351, :_reduce_none,
  1, 351, :_reduce_none,
  1, 351, :_reduce_none,
  1, 351, :_reduce_none,
  3, 222, :_reduce_520,
  1, 335, :_reduce_none,
  2, 335, :_reduce_522,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 214, :_reduce_532,
  1, 214, :_reduce_533,
  1, 214, :_reduce_534,
  1, 214, :_reduce_535,
  1, 214, :_reduce_536,
  1, 214, :_reduce_537,
  1, 214, :_reduce_538,
  1, 248, :_reduce_539,
  1, 248, :_reduce_540,
  1, 181, :_reduce_541,
  1, 181, :_reduce_542,
  1, 186, :_reduce_543,
  1, 186, :_reduce_544,
  0, 352, :_reduce_545,
  4, 267, :_reduce_546,
  1, 267, :_reduce_547,
  3, 271, :_reduce_548,
  0, 354, :_reduce_549,
  3, 271, :_reduce_550,
  4, 353, :_reduce_551,
  2, 353, :_reduce_552,
  2, 353, :_reduce_553,
  1, 353, :_reduce_none,
  2, 356, :_reduce_555,
  0, 356, :_reduce_556,
  6, 320, :_reduce_557,
  8, 320, :_reduce_558,
  4, 320, :_reduce_559,
  6, 320, :_reduce_560,
  4, 320, :_reduce_561,
  6, 320, :_reduce_562,
  2, 320, :_reduce_563,
  4, 320, :_reduce_564,
  6, 320, :_reduce_565,
  2, 320, :_reduce_566,
  4, 320, :_reduce_567,
  2, 320, :_reduce_568,
  4, 320, :_reduce_569,
  1, 320, :_reduce_570,
  0, 320, :_reduce_571,
  1, 315, :_reduce_572,
  1, 315, :_reduce_573,
  1, 315, :_reduce_574,
  1, 315, :_reduce_575,
  1, 297, :_reduce_none,
  1, 297, :_reduce_577,
  1, 358, :_reduce_none,
  1, 359, :_reduce_none,
  3, 359, :_reduce_580,
  1, 307, :_reduce_581,
  3, 307, :_reduce_582,
  1, 360, :_reduce_none,
  2, 361, :_reduce_584,
  1, 361, :_reduce_585,
  2, 362, :_reduce_586,
  1, 362, :_reduce_587,
  1, 301, :_reduce_none,
  3, 301, :_reduce_589,
  1, 355, :_reduce_none,
  3, 355, :_reduce_591,
  1, 363, :_reduce_none,
  1, 363, :_reduce_none,
  2, 302, :_reduce_594,
  1, 302, :_reduce_595,
  3, 364, :_reduce_596,
  3, 365, :_reduce_597,
  1, 308, :_reduce_598,
  3, 308, :_reduce_599,
  1, 357, :_reduce_600,
  3, 357, :_reduce_601,
  1, 366, :_reduce_none,
  1, 366, :_reduce_none,
  2, 309, :_reduce_604,
  1, 309, :_reduce_605,
  1, 367, :_reduce_none,
  1, 367, :_reduce_none,
  2, 304, :_reduce_608,
  2, 303, :_reduce_609,
  0, 303, :_reduce_610,
  1, 272, :_reduce_none,
  0, 368, :_reduce_612,
  4, 272, :_reduce_613,
  1, 251, :_reduce_614,
  2, 251, :_reduce_none,
  1, 234, :_reduce_none,
  3, 234, :_reduce_617,
  3, 369, :_reduce_618,
  2, 369, :_reduce_619,
  4, 369, :_reduce_620,
  2, 369, :_reduce_621,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  1, 273, :_reduce_none,
  1, 273, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  0, 153, :_reduce_none,
  1, 153, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  2, 208, :_reduce_none,
  2, 184, :_reduce_none,
  0, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 268, :_reduce_647,
  1, 268, :_reduce_none,
  1, 156, :_reduce_none,
  2, 156, :_reduce_650,
  0, 154, :_reduce_651 ]

racc_reduce_n = 652

racc_shift_n = 1097

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tLOWEST => 144,
  :tEQL => 145,
  :tBDOT2 => 146,
  :tBDOT3 => 147 }

racc_nt_base = 148

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tLOWEST",
  "tEQL",
  "tBDOT2",
  "tBDOT3",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "@29",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "@36",
  "cases",
  "@37",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "@38",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@39",
  "@40",
  "sym",
  "@41",
  "args_tail",
  "@42",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@43",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

                      lexer.cond.pop # local_pop
                      lexer.cmdarg.pop

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug20 2, val, result

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_24(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_28(val, _values, result)
                      result = val[1]

    result
end

def _reduce_29(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_30(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_31(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_34(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_37(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_43(val, _values, result)
                      prim, _, id, opasgn, rhs = val
                      result = s(:op_asgn, prim, rhs, id.to_sym, opasgn.to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_45(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

def _reduce_49(val, _values, result)
                      expr, (_, line), resbody = val

                      expr = value_expr expr
                      ary  = s(:array).line line
                      result = new_rescue(expr, new_resbody(ary, resbody))

    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_53(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_54(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_55(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_60(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      blk, _, msg, args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_65(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_66(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend

    result
end

def _reduce_67(val, _values, result)
                      msg, = val
                      result = new_call(nil, msg.to_sym).line lexer.lineno

    result
end

def _reduce_68(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_69(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_70(val, _values, result)
                      lhs, callop, op, args = val
                      result = new_call lhs, op.to_sym, args, callop

    result
end

def _reduce_71(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_72(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_73(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_74(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_75(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_77(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = val[1]

    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_83(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_84(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_85(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_86(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_87(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_88(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_89(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_90(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_91(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_92(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 93 omitted

def _reduce_94(val, _values, result)
                      result = val[1]

    result
end

def _reduce_95(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_97(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_98(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_102(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_103(val, _values, result)
                      recv, _, id = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_104(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, id = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      _, id = val
                      l = lexer.lineno

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_108(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line

    result
end

def _reduce_109(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line
                      debug20 9, val, result

    result
end

def _reduce_110(val, _values, result)
                      lhs, _, args, _ = val
                      result = self.aryset lhs, args

    result
end

def _reduce_111(val, _values, result)
                      lhs, op, id = val
                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_112(val, _values, result)
                      lhs, _, id = val
                      result = new_attrasgn lhs, id

    result
end

def _reduce_113(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_114(val, _values, result)
                      expr, _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_115(val, _values, result)
                      _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      l = lexer.lineno
                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_116(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_117(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      _, name = val
                      result = s(:colon3, name.to_sym).line lexer.lineno

    result
end

def _reduce_120(val, _values, result)
                      result = val[0].to_sym

    result
end

def _reduce_121(val, _values, result)
                      pval, _, name = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]

    result
end

def _reduce_126(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym

    result
end

# reduce 127 omitted

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      id, = val
                      result = s(:lit, id.to_sym).line lexer.lineno

    result
end

# reduce 130 omitted

def _reduce_131(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_132(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_133(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

def _reduce_206(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_210(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_211(val, _values, result)
                      lhs, _, id, op, rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_212(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_213(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_214(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_215(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_217(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_224(val, _values, result)
                      lit = s(:lit, val[1]).line lexer.lineno
                      result = new_call(new_call(lit, :"**", argl(val[3])), :"-@")


    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 231 omitted

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_234(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_235(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_236(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_237(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_238(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_239(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_240(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_241(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_242(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_243(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_244(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_251(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_252(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 253 omitted

def _reduce_254(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_255(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_256(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 257 omitted

def _reduce_258(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_259(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

def _reduce_264(val, _values, result)
                      result = args val

    result
end

def _reduce_265(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_266(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_267(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_268(val, _values, result)
                      result = call_args val

    result
end

def _reduce_269(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_270(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_271(val, _values, result)
                      result = call_args val

    result
end

def _reduce_272(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_273(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_274(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_275(val, _values, result)
                      result = val[1]

    result
end

# reduce 276 omitted

def _reduce_277(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_278(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_279(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_280(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_281(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_282(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_283(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_284(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_285(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

def _reduce_296(val, _values, result)
                      msg, = val
                      result = new_call nil, msg.to_sym

    result
end

def _reduce_297(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_298(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_299(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_300(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_301(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_302(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_303(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_304(val, _values, result)
                      expr, _, id = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_305(val, _values, result)
                      _, id = val

                      result = s(:colon3, id.to_sym).line lexer.lineno

    result
end

def _reduce_306(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_307(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_308(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_309(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_310(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_311(val, _values, result)
                      result = new_yield val[2]

    result
end

def _reduce_312(val, _values, result)
                      result = new_yield

    result
end

def _reduce_313(val, _values, result)
                      result = new_yield

    result
end

def _reduce_314(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_315(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_316(val, _values, result)
                      debug20 14, val, result

    result
end

def _reduce_317(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 318 omitted

def _reduce_319(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_320(val, _values, result)
                      result = val[1] # TODO: fix lineno

    result
end

def _reduce_321(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_322(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_323(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_324(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_325(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_326(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_327(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_328(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_329(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_330(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_331(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_332(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_333(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_334(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_335(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_336(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_337(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_338(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      self.comments.push self.lexer.comments

    result
end

def _reduce_339(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_340(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_341(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_342(val, _values, result)
                      result = [self.in_def, lexer.lineno]

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL
                      self.comments.push self.lexer.comments

    result
end

def _reduce_343(val, _values, result)
                      _, _recv, _, _, _name, (in_def, _lineno), _args, _body, _ = val

                      result = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_344(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_345(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_346(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_347(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_348(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

# reduce 372 omitted

# reduce 373 omitted

def _reduce_374(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 375 omitted

def _reduce_376(val, _values, result)
                      result = val[1]

    result
end

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      result = val[1]

    result
end

def _reduce_381(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_382(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_383(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_384(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym

    result
end

def _reduce_385(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2

    result
end

def _reduce_386(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*

    result
end

def _reduce_387(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2

    result
end

def _reduce_388(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"

    result
end

def _reduce_389(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args

    result
end

def _reduce_390(val, _values, result)
                      result = block_var :*

    result
end

def _reduce_391(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args

    result
end

def _reduce_392(val, _values, result)
                      result = call_args val

    result
end

def _reduce_393(val, _values, result)
                      result = call_args val

    result
end

def _reduce_394(val, _values, result)
                      result = call_args val

    result
end

def _reduce_395(val, _values, result)
                      line = lexer.lineno
                      result = call_args val # TODO: push line down
                      result.line line

    result
end

def _reduce_396(val, _values, result)
                      result = args val

    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      result = args val

    result
end

def _reduce_399(val, _values, result)
                      result = args val

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

def _reduce_401(val, _values, result)
                      result = args val

    result
end

def _reduce_402(val, _values, result)
                      result = args val

    result
end

def _reduce_403(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
                      result = args val

    result
end

def _reduce_407(val, _values, result)
                      result = args val

    result
end

def _reduce_408(val, _values, result)
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = args val

    result
end

def _reduce_410(val, _values, result)
                      result = args val

    result
end

def _reduce_411(val, _values, result)
                      result = args val

    result
end

def _reduce_412(val, _values, result)
                      result = args val

    result
end

def _reduce_413(val, _values, result)
 result = 0
    result
end

def _reduce_414(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_415(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_416(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_417(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 418 omitted

def _reduce_419(val, _values, result)
                      result = args val

    result
end

def _reduce_420(val, _values, result)
                      result = args val

    result
end

def _reduce_421(val, _values, result)
                      result = args val

    result
end

def _reduce_422(val, _values, result)
                      id, = val
                      line = lexer.lineno
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 423 omitted

def _reduce_424(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_425(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_426(val, _values, result)
                      (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line = line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_427(val, _values, result)
                      result = args val

    result
end

def _reduce_428(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_429(val, _values, result)
                      result = val[1]

    result
end

def _reduce_430(val, _values, result)
                      result = val[1]

    result
end

def _reduce_431(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_432(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      cmd, blk = val

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_433(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_434(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_435(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_436(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_437(val, _values, result)
                      call, lineno, args = val

                      result = call.concat args.sexp_body if args
                      result.line lineno

    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]

    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_440(val, _values, result)
                      result = new_call val[0], val[2].to_sym

    result
end

def _reduce_441(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_442(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_443(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_444(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_445(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_446(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_447(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_448(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_449(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_450(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_451(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_452(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_453(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_454(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_455(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_456(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_457(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]

    result
end

# reduce 458 omitted

# reduce 459 omitted

def _reduce_460(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_461(val, _values, result)
                      result = nil

    result
end

def _reduce_462(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 463 omitted

# reduce 464 omitted

def _reduce_465(val, _values, result)
                      result = val[1]

    result
end

# reduce 466 omitted

def _reduce_467(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

def _reduce_470(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

# reduce 471 omitted

def _reduce_472(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_473(val, _values, result)
                      debug20 23, val, result

    result
end

# reduce 474 omitted

def _reduce_475(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_476(val, _values, result)
                      _, str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_ICNTNT

                      result = str

    result
end

def _reduce_477(val, _values, result)
                      result = new_string val

    result
end

def _reduce_478(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_479(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_480(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_481(val, _values, result)
                      result = val[1]

    result
end

def _reduce_482(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_483(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 484 omitted

def _reduce_485(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_486(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_487(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_488(val, _values, result)
                      _, line, list, _, = val
                      list.line = line
                      result = list

    result
end

def _reduce_489(val, _values, result)
                      result = new_symbol_list.line lexer.lineno

    result
end

def _reduce_490(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_491(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_492(val, _values, result)
                      result = val[1]

    result
end

def _reduce_493(val, _values, result)
                      result = s(:array).line lexer.lineno # FIX

    result
end

def _reduce_494(val, _values, result)
                      result = val[1]

    result
end

def _reduce_495(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_496(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_497(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_498(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_499(val, _values, result)
                      result = s(:str, "").line lexer.lineno

    result
end

def _reduce_500(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_501(val, _values, result)
                      result = nil

    result
end

def _reduce_502(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_503(val, _values, result)
                      result = nil

    result
end

def _reduce_504(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_505(val, _values, result)
                      result = new_string val

    result
end

def _reduce_506(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_507(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_508(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_509(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cmdarg.pop
                      lexer.cond.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_510(val, _values, result)
 result = s(:gvar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_511(val, _values, result)
 result = s(:ivar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_512(val, _values, result)
 result = s(:cvar, val[0].to_sym).line lexer.lineno
    result
end

# reduce 513 omitted

def _reduce_514(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym

    result
end

def _reduce_515(val, _values, result)
                      result = val[0].to_sym

    result
end

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

# reduce 519 omitted

def _reduce_520(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug20 26, val, result
                      end

    result
end

# reduce 521 omitted

def _reduce_522(val, _values, result)
                      result = -val[1] # TODO: pt_testcase

    result
end

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

def _reduce_532(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_533(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_534(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_535(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_536(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_537(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_538(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_539(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_540(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_541(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_542(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result

    result
end

def _reduce_543(val, _values, result)
 result = s(:nth_ref,  val[0]).line lexer.lineno
    result
end

def _reduce_544(val, _values, result)
 result = s(:back_ref, val[0]).line lexer.lineno
    result
end

def _reduce_545(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_546(val, _values, result)
                      result = val[2]

    result
end

def _reduce_547(val, _values, result)
                      result = nil

    result
end

def _reduce_548(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true

    result
end

def _reduce_549(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_550(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_551(val, _values, result)
                      result = args val

    result
end

def _reduce_552(val, _values, result)
                      result = args val

    result
end

def _reduce_553(val, _values, result)
                      result = args val

    result
end

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      result = val[1]

    result
end

def _reduce_556(val, _values, result)
                      result = nil

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

def _reduce_558(val, _values, result)
                      result = args val

    result
end

def _reduce_559(val, _values, result)
                      result = args val

    result
end

def _reduce_560(val, _values, result)
                      result = args val

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val

    result
end

def _reduce_568(val, _values, result)
                      result = args val

    result
end

def _reduce_569(val, _values, result)
                      result = args val

    result
end

def _reduce_570(val, _values, result)
                      result = args val

    result
end

def _reduce_571(val, _values, result)
                      result = args val

    result
end

def _reduce_572(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_573(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_574(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_575(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 576 omitted

def _reduce_577(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier

    result
end

# reduce 578 omitted

# reduce 579 omitted

def _reduce_580(val, _values, result)
                      result = val[1]

    result
end

def _reduce_581(val, _values, result)
                      arg, = val

                      case arg
                      when Symbol then
                        result = s(:args, arg).line lexer.lineno
                      when Sexp then
                        result = arg
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end

    result
end

def _reduce_582(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << item

    result
end

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_585(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_586(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_587(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 590 omitted

def _reduce_591(val, _values, result)
                      result = args val

    result
end

# reduce 592 omitted

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"

    result
end

def _reduce_595(val, _values, result)
                      result = :"**"

    result
end

def _reduce_596(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names

    result
end

def _reduce_597(val, _values, result)
                      result = self.assignable val[0], val[2]

    result
end

def _reduce_598(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_599(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_600(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_601(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 602 omitted

# reduce 603 omitted

def _reduce_604(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"

    result
end

def _reduce_605(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name

    result
end

# reduce 606 omitted

# reduce 607 omitted

def _reduce_608(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym

    result
end

def _reduce_609(val, _values, result)
                      result = val[1]

    result
end

def _reduce_610(val, _values, result)
                      result = nil

    result
end

# reduce 611 omitted

def _reduce_612(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_613(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_614(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 615 omitted

# reduce 616 omitted

def _reduce_617(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_618(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_619(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_620(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value).line sym.line

    result
end

def _reduce_621(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

# reduce 643 omitted

# reduce 644 omitted

# reduce 645 omitted

# reduce 646 omitted

def _reduce_647(val, _values, result)
 yyerrok
    result
end

# reduce 648 omitted

# reduce 649 omitted

def _reduce_650(val, _values, result)
 yyerrok
    result
end

def _reduce_651(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby24Parser
