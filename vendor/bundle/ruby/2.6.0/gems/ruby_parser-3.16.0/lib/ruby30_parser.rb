#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Ruby30Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-531,606,287,606,606,-108,287,-531,-531,-531,836,606,-531,-531,-531',
'287,-531,237,652,-102,836,3,227,228,-531,-531,-531,-531,-531,655,130',
'233,-531,-94,126,129,-531,-531,283,-531,-531,-531,-531,-531,835,-109',
'-116,-104,606,-115,865,-80,97,238,835,891,235,613,-111,-113,98,767,-108',
'-109,-116,-115,224,-531,-531,-531,-531,-531,-531,-531,-531,-531,-531',
'-531,-531,-531,-531,651,-110,-531,-531,-531,-102,-531,-531,289,-101',
'-531,654,289,-531,-531,234,-531,-107,-531,225,-531,289,-531,-531,-531',
'-531,-531,-531,-531,-99,-531,238,-531,-104,130,-116,130,130,-103,129',
'-102,129,129,-102,130,-531,-531,-531,-531,129,-531,-534,-531,-111,-113',
'-112,-110,-531,-534,-534,-534,-102,-531,-534,-534,-534,-531,-534,-104',
'-100,-107,-104,226,-106,864,-534,-101,-534,-534,-534,130,130,-102,-104',
'971,129,129,-534,-534,-104,-534,-534,-534,-534,-534,-108,-109,-116,-115',
'-112,-108,-109,-116,-115,-629,-103,-101,108,109,229,-114,-101,227,228',
'-101,-114,227,228,-534,-534,-534,-534,-534,-534,-534,-534,-534,-534',
'-534,-534,-534,-534,-101,-629,-534,-534,-534,278,-534,-534,-103,-545',
'-534,-103,287,-534,-534,854,-534,340,-534,636,-534,855,-534,-534,-534',
'-534,-534,-534,-534,-103,-534,341,-534,-629,130,-111,-113,-112,-110',
'129,-111,-113,-112,-110,-630,-534,-534,-534,-534,238,-534,-308,-534',
'636,110,111,641,-534,-308,-308,-308,-630,-534,377,-308,-308,-534,-308',
'233,-108,238,-534,-103,733,238,232,732,-440,-534,-626,638,637,634,-105',
'230,779,-546,-308,-308,780,-308,-308,-308,-308,-308,108,109,-114,401',
'289,404,707,-114,482,406,586,409,583,582,581,-541,584,426,235,638,637',
'-627,-541,-308,-308,-308,-308,-308,-308,-308,-308,-308,-308,-308,-308',
'-308,-308,-531,234,-308,-308,-308,431,679,-531,-213,481,-308,483,-626',
'-308,-109,636,-531,636,-308,484,-308,827,-308,-308,-308,-308,-308,-308',
'-308,591,-308,-116,-308,237,-626,513,828,-534,636,292,594,-116,110,111',
'-534,-308,-308,-633,-105,-627,-308,884,673,-534,-633,-633,-633,-308',
'523,591,-633,-633,-308,-633,733,-531,-114,735,-115,-545,594,-627,-633',
'602,601,-633,638,637,638,637,634,-111,674,-633,-633,797,-633,-633,-633',
'-633,-633,586,526,583,582,581,-113,584,-540,638,637,528,-534,602,601',
'-540,924,595,917,-79,733,-99,-111,735,-633,-633,-633,-633,-633,-633',
'-633,-633,-633,-633,-633,-633,-633,-633,-633,-108,-633,-633,-633,238',
'680,-633,-542,595,-633,538,-629,-633,-113,-542,-633,814,-633,539,-633',
'546,-633,-633,-633,-633,-633,-633,-633,295,-633,-633,-633,-352,-633',
'233,-543,-544,-110,238,-352,1019,479,-543,-544,-633,-633,-633,-103,-352',
'-633,480,-543,-544,-633,-633,-633,-633,292,-633,-633,-633,-633,-633',
'233,-633,-112,733,-546,-539,735,545,-633,-633,-633,-633,-539,-110,-299',
'238,543,549,1050,-633,-633,-299,-633,-633,-633,-633,-633,555,233,258',
'-299,238,-536,233,-352,554,234,-543,-544,-536,617,-537,130,636,480,613',
'-100,129,-537,615,-633,-633,-633,-633,-633,-633,-633,-633,-633,-633',
'-633,-633,-633,-633,-109,234,-633,-633,-633,233,829,-633,227,228,-633',
'419,666,-633,-633,-299,-633,618,-633,619,-633,664,-633,-633,-633,-633',
'-633,-633,-633,234,-633,-633,-633,586,234,583,582,581,591,584,638,637',
'639,643,-213,-633,-633,-633,-633,594,-633,-308,-633,673,-538,674,647',
'-633,-308,-308,-308,-538,-633,-308,-308,-308,-112,-308,-309,631,234',
'589,572,227,228,-309,632,-308,-308,-308,599,598,602,601,-309,650,-106',
'-308,-308,653,-308,-308,-308,-308,-308,-102,233,-104,-308,602,601,-309',
'130,782,-115,-308,660,129,-309,-281,-630,636,784,-111,-308,-113,595',
'-309,-308,-308,-308,-308,-308,-308,-308,-308,-308,-308,-308,-308,-308',
'-308,662,-309,-308,-308,-308,-308,830,-308,275,276,-308,636,-308,-308',
'-308,636,-308,-630,-308,663,-308,-308,-308,-308,-308,-308,-308,-308',
'-308,234,-308,-308,-308,586,-309,583,582,581,591,584,638,637,644,274',
'273,-308,-308,-308,-308,594,-308,-308,-308,887,891,814,130,-308,-308',
'-308,-308,129,-308,667,-308,-308,-114,-308,233,238,-308,589,638,637',
'656,1041,638,637,800,233,599,598,602,601,784,671,1047,-308,-308,672',
'-308,-308,-308,-308,-308,1045,233,-101,227,228,887,891,586,1041,583',
'582,581,292,584,130,684,258,784,258,129,-110,595,258,-308,-308,-308',
'-308,-308,-308,-308,-308,-308,-308,-308,-308,-308,-308,258,234,-308',
'-308,-308,258,679,691,753,238,-308,255,234,-308,238,257,256,756,-308',
'238,-308,-94,-308,-308,-308,-308,-308,-308,-308,234,-308,586,-308,583',
'582,581,710,584,586,238,583,582,581,558,584,-308,-308,-633,-308,721',
'-308,722,726,428,-633,-633,-633,-308,430,429,-633,-633,-308,-633,258',
'729,-114,238,736,753,737,528,-633,258,741,744,753,745,756,747,268,269',
'749,-633,-633,964,-633,-633,-633,-633,-633,1012,751,583,582,581,255',
'584,261,759,257,256,253,254,760,255,259,761,260,257,256,253,254,763',
'-633,-633,-633,-633,-633,-633,-633,-633,-633,-633,-633,-633,-633,-633',
'729,258,-633,-633,-633,586,680,583,582,581,-633,584,729,-633,613,729',
'786,791,-633,801,-633,802,-633,-633,-633,-633,-633,-633,-633,-282,-633',
'-633,-633,255,815,513,513,257,256,253,254,238,832,753,278,-633,-633',
'841,-633,843,-633,8,87,88,89,12,80,-633,526,528,81,82,-633,721,238,85',
'-112,83,84,86,33,34,78,79,133,134,135,136,137,90,31,30,118,117,119,120',
'912,913,22,292,914,124,125,668,11,51,10,13,122,121,123,112,62,114,113',
'115,292,116,124,125,721,108,109,258,47,48,46,258,262,263,264,265,275',
'276,270,271,266,267,238,251,252,882,238,268,269,891,43,729,238,36,918',
'-283,64,65,258,238,66,923,38,255,940,261,50,257,256,253,254,274,273',
'259,23,260,721,-281,945,105,97,99,100,101,103,950,238,744,98,106,255',
'272,953,-256,257,256,68,955,957,95,102,104,959,959,110,111,238,965,44',
'45,314,87,88,89,12,80,729,729,729,81,82,238,729,238,85,983,83,84,86',
'33,34,78,79,133,134,135,136,137,90,31,30,118,117,119,120,-284,984,22',
'744,987,990,992,668,11,51,316,13,122,121,123,112,62,114,113,115,994',
'116,124,125,238,108,109,996,47,48,46,258,262,263,264,265,275,276,270',
'271,266,267,1008,251,252,1009,1021,268,269,729,43,729,791,318,1039,1042',
'64,65,854,1048,66,1051,38,255,959,261,50,257,256,253,254,274,273,259',
'23,260,959,959,1056,105,97,99,100,101,103,1021,744,1065,98,106,1067',
'272,1069,1071,1071,726,68,1021,729,95,102,104,729,-630,110,111,-629',
'238,44,45,314,87,88,89,12,80,959,1021,1094,81,82,1071,1071,1071,85,1071',
'83,84,86,33,34,78,79,133,134,135,136,137,90,31,30,118,117,119,120,,1012',
'22,583,582,581,,584,11,51,316,13,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,258,262,263,264,265,275,276,270,271,266,267',
',251,252,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257,256,253',
'254,274,273,259,23,260,,,,105,97,99,100,101,103,,,,98,106,,272,,,,,68',
',,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83',
'84,86,33,34,78,79,133,134,135,136,137,90,31,30,118,117,119,120,,,22',
',,,,,11,51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',47,48,46,258,262,263,264,265,275,276,270,271,266,267,,251,252,,,268',
'269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257,256,253,254,274,273,259',
'23,260,,,,105,97,99,100,101,103,,,,98,106,,272,,,,,68,,,95,102,104,',
',110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78',
'79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,316,13,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,258,262,263,264,265',
'275,276,270,271,266,267,,251,252,,,268,269,,43,,,318,,,64,65,,,66,,38',
'255,,261,50,257,256,253,254,274,273,259,23,260,,,,105,97,99,100,101',
'103,,,,98,106,238,272,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88',
'89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,22,,,,,,11,51,316,13,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,258,262,263,264,265,275,276,270,271,266,267,',
'251,252,,,268,269,,43,,,318,,,64,65,,,66,,38,255,,261,50,257,256,253',
'254,274,273,259,23,260,,,,105,97,99,100,101,103,,,,98,106,,272,,,,,68',
',,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83',
'84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,316',
'13,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,258',
'262,263,264,265,275,276,270,271,266,267,,251,252,,,268,269,,43,,,36',
',,64,65,,,66,,38,255,,261,50,257,256,253,254,274,273,259,23,260,,,,105',
'97,99,100,101,103,,,,98,106,,272,,,,,68,,,95,102,104,,,110,111,,,44',
'45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31',
'30,118,117,119,120,,,22,,,,,,11,51,316,13,122,121,123,112,62,114,113',
'115,,116,124,125,,108,109,,47,48,46,258,262,263,264,265,275,276,270',
'271,266,267,,251,252,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50',
'257,256,253,254,274,273,259,23,260,,,,105,97,99,100,101,103,,,,98,106',
',272,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81',
'82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,',
',,,11,51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',47,48,46,258,262,263,264,265,275,276,270,271,266,267,,-656,-656,,,268',
'269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257,256,253,254,274,273,259',
'23,260,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79',
',,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,316,13,122,121,123,112',
'62,114,113,115,,116,124,125,,108,109,,47,48,46,258,262,263,264,265,275',
'276,270,271,266,267,,-656,-656,,,268,269,,43,,,36,,,64,65,,,66,,38,255',
',261,50,257,256,253,254,274,273,259,23,260,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80',
',,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,',
',22,,,,,,11,51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,47,48,46,258,262,263,264,265,275,276,270,271,266,267,,-656,-656',
',,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257,256,253,254,274',
'273,259,23,260,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,,110,111,,,44,45,8,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34',
'78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,10,13,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,258,262,263,264,265',
'275,276,270,271,266,267,,-656,-656,,,268,269,,43,,,36,,,64,65,,,66,',
'38,255,,261,50,257,256,253,254,274,273,259,23,260,,,,105,97,99,100,101',
'103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12',
'80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120',
',586,22,583,582,581,,584,11,51,316,13,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,258,-656,-656,-656,-656,275,276,,753',
'-656,-656,,,,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257,256',
'253,254,274,273,259,23,260,,,,105,97,99,100,101,103,,,,98,106,,,,,,',
'68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85',
',83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,586,22,583,582',
'581,,584,11,51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,47,48,46,258,-656,-656,-656,-656,275,276,,753,-656,-656,,,,,,268',
'269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257,256,253,254,274,273,259',
'23,260,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79',
',,,,,90,31,30,118,117,119,120,,586,22,583,582,581,,584,11,51,316,13',
'122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,258,-656',
'-656,-656,-656,275,276,,753,-656,-656,,,,,,268,269,,43,,,36,,,64,65',
',,66,,38,255,,261,50,257,256,253,254,274,273,259,23,260,,,,105,97,99',
'100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87',
'88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,586,22,583,582,581,,584,11,51,316,13,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,258,-656,-656,-656,-656,275',
'276,,753,-656,-656,,,,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50',
'257,256,253,254,274,273,259,23,260,,,,105,97,99,100,101,103,,,,98,106',
',,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82',
',,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,',
'11,51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,258,-656,-656,-656,-656,275,276,,,-656,-656,,,,,,268,269,,43,',
',36,,,64,65,,,66,,38,255,,261,50,257,256,253,254,274,273,259,23,260',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,',
'90,31,30,118,117,119,120,,,22,,,,,,11,51,316,13,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,258,-656,-656,-656,-656,275',
'276,,,-656,-656,,,,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257',
'256,253,254,274,273,259,23,260,,,,105,97,99,100,101,103,,,,98,106,,',
',,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,',
',85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11',
'51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48',
'46,258,262,263,264,265,275,276,,,266,267,,,,,,268,269,,43,,,36,,,64',
'65,,,66,,38,255,,261,50,257,256,253,254,274,273,259,23,260,,,,105,97',
'99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,314',
'87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118',
'117,119,120,,,22,,,,,,11,51,316,13,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,258,262,263,264,265,275,276,270,,266,267',
',,,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257,256,253,254,274',
'273,259,23,260,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33',
'34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,316,13,122,121',
'123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,258,,,,,,,,,',
',,,,,,268,269,,43,,,36,,258,64,65,,,66,,38,255,,261,50,257,256,253,254',
'268,269,259,23,260,,,,105,97,99,100,101,103,,,255,98,106,,257,256,253',
'254,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,',
',,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11',
'51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48',
'46,258,,,,,,,,,,,,,,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50',
'257,256,253,254,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,',
',95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83',
'84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,316',
'13,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,258',
',,,,,,,,,,,,,,,268,269,,43,,,36,,,64,65,,,66,,38,255,,261,50,257,256',
'253,254,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33',
'34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,316,13,122,121',
'123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,',
',,,,,,43,,,36,,,64,65,,,66,,38,,,,50,,,,,,,,23,,,,,105,97,99,100,101',
'103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12',
'80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120',
',,22,,,,,,11,51,316,13,122,121,123,112,62,114,113,115,,116,124,125,',
'108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,64,65,,,66,,38,,,,50',
',,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104',
',,110,111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34',
'78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,316,13,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,43,,,36,,,64,65,,,66,,38,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80',
',,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,',
',22,,,,,,11,51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,64,65,,,66,,38,,,,50,,,,',
',,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,,,44,45,314,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79',
',,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,316,13,122,121,123,112',
'62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,43',
',,36,,,64,65,,,66,,38,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,314,87,88,89,12,80,,,,81',
'82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,',
',,,11,51,316,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,64,65,,,66,,38,,,,50,,,,,,,,23',
',,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111',
',,44,45,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90',
'31,30,118,117,119,120,,,22,,,,,,11,51,10,13,122,121,123,112,62,114,113',
'115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,64',
'65,,,66,,38,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,',
',,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83',
'84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,,,122',
'121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,',
',,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100',
'101,103,,,,98,106,,,,,,,68,,,95,102,104,,-448,110,111,,,44,45,-448,-448',
'-448,,,-448,-448,-448,586,-448,583,582,581,591,584,,,,-448,-448,-448',
',,,594,,,,,-448,-448,,-448,-448,-448,-448,-448,,,,,,,,,,589,,,,,,,,',
'599,598,602,601,,-448,-448,-448,-448,-448,-448,-448,-448,-448,-448,-448',
'-448,-448,-448,,,-448,-448,-448,,,-448,,292,-448,,,-448,-448,,-448,595',
'-448,,-448,,-448,-448,-448,-448,-448,-448,-448,,-448,-448,-448,,,,,',
',,,,,,,-448,-448,-317,-448,,-448,,,,-317,-317,-317,-448,,-317,-317,-317',
'-448,-317,,,,,,,,,,-317,-317,,,,,,,,,-317,-317,,-317,-317,-317,-317',
'-317,,,,,,,,,,,,,,,,,,,,,,,,-317,-317,-317,-317,-317,-317,-317,-317',
'-317,-317,-317,-317,-317,-317,,,-317,-317,-317,,,-317,,295,-317,,,-317',
'-317,,-317,,-317,,-317,,-317,-317,-317,-317,-317,-317,-317,,-317,,-317',
',,,,,,,,,,,,-317,-317,,-317,,-317,87,88,89,,80,,-317,,81,82,,-317,,85',
',83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,',
',122,121,123,112,62,114,113,115,307,116,124,125,,108,109,,47,48,46,',
',,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,304,,302,,50,,,,,,,,248,,',
',,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31',
'30,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307',
'116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,304,,302,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,',
',,,,,68,,308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,',
',122,121,123,112,62,114,113,115,307,116,124,125,,108,109,,47,48,46,',
',,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,304,,302,,50,,,,,,,,248,,',
',,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90',
'330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113',
'115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64',
'65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,',
',68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84',
'86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122',
'121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,',
',,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100',
'101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,',
'80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119',
'120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,',
',,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,',
',90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
',,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106',
',,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105',
'97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,-300,110,111,,,44',
'45,-300,-300,-300,,,-300,-300,-300,586,-300,583,582,581,591,584,,,,',
'-300,-300,-300,,,594,,,,,-300,-300,,-300,-300,-300,-300,-300,,,,,,,',
',,589,,,,,,,,,599,598,602,601,,-300,-300,-300,-300,-300,-300,-300,-300',
'-300,-300,-300,-300,-300,-300,,,-300,-300,-300,,,-300,,,-300,,,-300',
'-300,,-300,595,-300,,-300,,-300,-300,-300,-300,-300,-300,-300,,-300',
',-300,,,,,,,,,,,,,-300,-300,-300,-300,,-300,,-300,,,,,-300,,,,-655,-300',
'87,88,89,12,80,-655,-655,-655,81,82,-655,-655,-655,85,-655,83,84,86',
'33,34,78,79,,-655,-655,-655,,90,31,30,118,117,119,120,-655,-655,22,-655',
'-655,-655,-655,-655,11,51,,13,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,-655,-655,-655,-655,-655,-655,-655,-655,-655',
'-655,-655,-655,-655,-655,,,-655,-655,-655,43,,-655,36,292,-655,64,65',
'-655,-655,66,-655,38,-655,,-655,50,-655,-655,-655,-655,-655,-655,-655',
'23,-655,-655,-655,,105,97,99,100,101,103,,,,98,106,-655,-655,,-655,',
'-655,68,,,95,102,104,-655,,110,111,,-655,44,45,87,88,89,,80,,,,81,82',
',,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,',
',51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105',
'97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45',
'87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118',
'117,119,120,,,22,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,',
',,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78',
'79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112,62',
'114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,',
',249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98',
'106,130,,,,,129,68,,,95,102,104,,,110,111,,,44,45,87,88,89,12,80,,,',
'81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22',
',,,,,11,51,10,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,64,65,,,66,,38,,,,50,,,,,,,,23',
',,,,105,97,99,100,101,103,,,,98,106,,,,,,419,68,,,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31',
'30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34',
'78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112',
'62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243',
',,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,',
',85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51',
',,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,',
',,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97',
'99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87',
'88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,22,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125',
',108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50',
',,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104',
',,110,111,,,44,45,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79',
',,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,,13,122,121,123,112,62',
'114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,64,65,,,66,,38,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,',
',85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,436,,,,50,,,,,,,,248,,,,',
'105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44',
'45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118',
'117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,436',
',,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78',
'79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112,62',
'114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,',
',249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,',
',85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51',
',,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,',
',,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97',
'99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87',
'88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125',
',108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50',
',,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104',
',,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79',
',,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,',
'249,,,64,65,,,66,,304,,302,,50,,,,,,,,248,,,,,105,305,99,100,101,103',
',,,98,106,,,,,,,68,,308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,',
',81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31',
'30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34',
'78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112',
'62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243',
',,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98',
'106,238,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82',
',,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330',
'336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86',
'333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121',
'123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,',
',,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101',
'103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,',
',,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120',
',,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248',
',,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90',
'330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113',
'115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64',
'65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,',
',68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84',
'86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122',
'121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,',
',,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100',
'101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,',
'80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119',
'120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,',
',,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,',
',90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
',,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106',
',,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105',
'97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45',
'87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336',
'118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330',
'336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86',
'333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121',
'123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,',
',,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101',
'103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,',
',,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120',
',,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248',
',,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90',
'330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113',
'115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64',
'65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,',
',68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84',
'86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122',
'121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,',
',,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100',
'101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,',
'80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119',
'120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,',
',,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,',
',90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
',,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106',
',,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105',
'97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45',
'87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336',
'118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330',
'336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86',
'33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,',
',,,,,243,,,249,,,64,65,,,66,,304,,302,,50,,,,,,,,248,,,,,105,305,99',
'100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110,111,,,44,45,87',
'88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,304',
',302,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308',
'95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33',
'34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,',
',,,,,243,,,249,,,64,65,,,66,,304,,302,,50,,,,,,,,248,,,,,105,305,99',
'100,101,103,,,,98,106,238,,,,,,68,,308,95,102,104,,,110,111,,,44,45',
'87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336',
'118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330',
'336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,,110,111,,,44,45,87,88,89,12,80,,,,81,82,,,,85,,83,84',
'86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11,51,,13,122',
'121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,',
',,,,,,,,,,43,,,36,,,64,65,,,66,,38,,,,50,,,,,,,,23,,,,,105,97,99,100',
'101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,',
'80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119',
'120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,',
',,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,',
',90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
'558,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106',
',,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,307,116,124,125,,108,109,,47,48',
'46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,304,,,,50,,,,,,,,248,',
',,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90',
'330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113',
'115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
',,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106',
',,,,,,68,,308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,',
'85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51',
',,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,',
',,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97',
'99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87',
'88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118',
'117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,',
',,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102',
'104,,-634,110,111,,,44,45,-634,-634,-634,,,-634,-634,-634,586,-634,583',
'582,581,591,584,,,,-634,-634,-634,-634,,,594,,,,,-634,-634,,-634,-634',
'-634,-634,-634,,,,,,,,,,589,,,,,,,,,,,602,601,,-634,-634,-634,-634,-634',
'-634,-634,-634,-634,-634,-634,-634,-634,-634,,,-634,-634,-634,,,-634',
',,-634,,,-634,-634,,-634,595,-634,,-634,,-634,-634,-634,-634,-634,-634',
'-634,,-634,-634,-634,586,,583,582,581,591,584,,,,,,-634,-634,-634,-634',
'594,-634,-635,-634,,,,,-634,-635,-635,-635,,-634,-635,-635,-635,,-635',
',,,589,,,,,-635,-635,-635,-635,599,598,602,601,,,,-635,-635,,-635,-635',
'-635,-635,-635,,,,,,,,,,,,,,,,,,,,,,595,,-635,-635,-635,-635,-635,-635',
'-635,-635,-635,-635,-635,-635,-635,-635,,,-635,-635,-635,,,-635,,,-635',
',,-635,-635,,-635,,-635,,-635,,-635,-635,-635,-635,-635,-635,-635,,-635',
'-635,-635,,,,,,,,,,,,,-635,-635,-635,-635,,-635,,-635,,,,,-635,,87,88',
'89,-635,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,304',
',302,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308',
'95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330',
'336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,-655,110,111,,,44,45,-655,-655,-655,,,-655,-655,-655,586',
'-655,583,582,581,591,584,,,,-655,-655,,,,,594,,,,,-655,-655,,-655,-655',
'-655,-655,-655,,586,,583,582,581,591,584,,589,,,,,,,,594,599,598,602',
'601,,,,,,,,,,,,,-655,,,,,589,,-655,,,,,292,-655,599,598,602,601,,,595',
',,,,,,,,,,,,,-655,-655,,,,,,,238,,,,,,-655,,595,,,-655,87,88,89,,80',
',-655,,81,82,,-655,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117',
'119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307,116,124',
'125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,704',
',302,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308',
'95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,',
',,,,,243,,,249,,,64,65,,,66,,,,302,,50,,,,,,,,248,,,,,105,305,99,100',
'101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110,111,,,44,45,87,88,89',
',80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119',
'120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,',
',,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,,,44,45,87,88,89,12,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,',
',90,31,30,118,117,119,120,,,22,,,,,,11,51,316,13,122,121,123,112,62',
'114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,64,65,,,66,,38,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,419,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82',
',,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,',
',,51,,,122,121,123,112,62,114,113,115,307,116,124,125,,108,109,,47,48',
'46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,304,,302,,50,,,,,,,,248',
',,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110',
'111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,',
',90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
',,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106',
',,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51,,',
'122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,',
',,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97,99',
'100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88',
'89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117',
'119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125',
',108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50',
',,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104',
',,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79',
',,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,',
'249,,,64,65,,,66,,304,,302,,50,,,,,,,,248,,,,,105,305,99,100,101,103',
',,,98,106,,,,,,,68,,308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,',
',81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,',
',,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,',
'44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30',
'118,117,119,120,,,22,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,806,,,,50,,,,,,,,248,,,,,105,97,99,100,101',
'103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,',
',,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,',
'250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248',
',,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31',
'30,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307',
'116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,304,,302,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,',
',,,,,68,,308,95,102,104,,,110,111,,,44,45,87,88,89,12,80,,,,81,82,,',
',85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,11',
'51,,13,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,43,,,36,,,64,65,,,66,,38,,,,50,,,,,,,,23,,,,,105',
'97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45',
'87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336',
'118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,',
',,,,,243,,,249,,,64,65,,,66,,704,,302,,50,,,,,,,,248,,,,,105,305,99',
'100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110,111,,,44,45,87',
'88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118',
'117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,302,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,,,,,,,68',
',308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84',
'86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,,,122,121',
'123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,',
',,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101',
'103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,',
',,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117,119,120,,',
'250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248',
',,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111',
',,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31',
'30,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,',
'116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86',
'33,34,78,79,,,,,,90,31,30,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330',
'336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65',
',,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68',
',,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86',
'333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121',
'123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,',
',,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101',
'103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,',
',,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120',
',,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,436,,,,50,,,,,',
',,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,',
',90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,307,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,',
'249,,,64,65,,,66,,704,,,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,',
',98,106,,,,,,,68,,308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,307,116,124,125,,108,109,',
'47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248',
',,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110',
'111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,',
',90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
',,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106',
',,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,304,,,,50,,,,,,,,248,,,,',
'105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44',
'45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118',
'117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',304,,302,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,,,,,,',
'68,,308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83',
'84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,',
',122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,',
',,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97',
'99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87',
'88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118,117',
'119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125',
',108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50',
',,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104',
',,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79',
',,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62',
'114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,',
',249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,',
',85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,',
',,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48',
'46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,',
'105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44',
'45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336',
'118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123',
'112,62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,',
',,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103',
',,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,,,50,,,,,,,,248,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,',
',44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31',
'30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112,62,114,113,115,,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34',
'78,79,,,,,,90,31,30,118,117,119,120,,,22,,,,,,,51,,,122,121,123,112',
'62,114,113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243',
',,249,,,64,65,,,66,,,,,,50,,,,,,,,23,,,,,105,97,99,100,101,103,,,,98',
'106,,,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,',
',85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,',
',,,,51,,,122,121,123,112,62,114,113,115,307,116,124,125,,108,109,,47',
'48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,,,302,,50,,,,,,,,248',
',,,,105,305,99,100,101,103,,,,98,106,,,,,,,68,,308,95,102,104,,,110',
'111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,',
',90,330,336,118,117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114',
'113,115,,116,124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249',
',,64,65,,,66,,,,,,50,,,,,,,,248,,,,,105,97,99,100,101,103,,,,98,106',
',,,,,,68,,,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'51,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,47,48,46',
',,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66,,704,,,,50,,,,,,,,248,,,,',
'105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,,,44',
'45,87,88,89,,80,,,,81,82,,,,85,,83,84,86,33,34,78,79,,,,,,90,31,30,118',
'117,119,120,,,250,,,,,,,51,,,122,121,123,112,62,114,113,115,307,116',
'124,125,,108,109,,47,48,46,,,,,,,,,,,,,,,,,,,,243,,,249,,,64,65,,,66',
',304,,302,,50,,,,,,,,248,,,,,105,305,99,100,101,103,,,,98,106,,,,,,',
'68,,308,95,102,104,,,110,111,,,44,45,87,88,89,,80,,,,81,82,,,,85,,83',
'84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,331',
',,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,,,337,,,,,,',
',,,,,,,,,,,,,327,,,323,,,64,65,,,66,,322,,,,,,,,,,,,,,,,,105,97,99,100',
'101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,87,88,89,,80,,,,81',
'82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250',
',,,,,,331,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,,',
'337,,,,,,,,,,,,,,,,,,,,327,,,249,,,64,65,,,66,,,,,,,,,,,,,,,,,,,105',
'97,99,100,101,103,,,,98,106,,,,339,,,68,,,95,102,104,,,110,111,87,88',
'89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117',
'119,120,,,250,,,,,,,331,,,122,121,123,112,62,114,113,115,,116,124,125',
',108,109,,,,337,,,,,,,,,,,,,,,,,,,,371,,,36,,,64,65,,,66,,38,,,,,,,',
',,,,,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110',
'111,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330',
'336,118,117,119,120,,,250,,,,,,,331,,,122,121,123,112,62,114,113,115',
',116,124,125,,108,109,,,,337,,,,,,,,,,,,,,,,,,,,327,,,249,,,64,65,,',
'66,,,,,,,,,,,,,,,,,,,105,97,99,100,101,103,,,,98,106,,,,541,,,68,,,95',
'102,104,,,110,111,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79',
',,,,,90,330,336,118,117,119,120,,,250,,,,,,,331,,,122,121,123,112,62',
'114,113,115,,116,124,125,,108,109,,,,337,,,,,,,,,,,,,,,,,,,,327,,,323',
',,64,65,,,66,,,,,,,,,,,,,,,,,,,105,97,99,100,101,103,,,,98,106,,,,,',
',68,,,95,102,104,,,110,111,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,331,,,122,121',
'123,620,62,114,113,621,,116,124,125,,108,109,,,,337,,,,,,,,,,,,,,,,',
',,,622,,,249,,,64,65,,,66,,,,,,,,,,,,,,,,,,,105,97,99,100,101,103,,',
',98,106,,,,,,,68,,,95,102,104,,,110,111,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'331,,,122,121,123,620,62,114,113,621,,116,124,125,,108,109,,,,337,,',
',,,,,,,,,,,,,,,,,622,,,249,,,64,65,,,66,,,,,,,,,,,,,,,,,,,105,97,99',
'100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,87,88,89,,80,',
',,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120',
',,250,,,,,,,331,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109',
',,,337,,,,,,,,,,,,,,,,,,,,327,,,323,,,64,65,,,66,,,,,,,,,,,,,,,,,,,105',
'97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,87,88,89',
',80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119',
'120,,,250,,,,,,,331,,,122,121,123,112,62,114,113,115,,116,124,125,,108',
'109,,,,337,,,,,,,,,,,,,,,,,,,,327,,,323,,,64,65,,,66,,,,,,,,,,,,,,,',
',,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,87',
'88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90,330,336,118',
'117,119,120,,,250,,,,,,,331,,,122,121,123,112,62,114,113,115,,116,124',
'125,,108,109,,,,337,,,,,,,,,,,,,,,,,,,,327,,,323,,,64,65,,,66,,,,,,',
',,,,,,,,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,',
'110,111,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79,,,,,,90',
'330,336,118,117,119,120,,,250,,,,,,,331,,,122,121,123,112,62,114,113',
'115,,116,124,125,,108,109,,,,337,,,,,,,,,,,,,,,,,,,,327,,,323,,,64,65',
',,66,,,,,,,,,,,,,,,,,,,105,97,99,100,101,103,,,,98,106,,,,,,,68,,,95',
'102,104,,,110,111,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333,334,78,79',
',,,,,90,330,336,118,117,119,120,,,250,,,,,,,331,,,122,121,123,112,62',
'114,113,115,,116,124,125,,108,109,,,,337,,,,,,,,,,,,,,,,,,,,998,,,249',
',,64,65,,,66,,,,,,,,,,,,,,,,,,,105,97,99,100,101,103,,,,98,106,,,,,',
',68,,,95,102,104,,,110,111,87,88,89,,80,,,,81,82,,,,85,,83,84,86,333',
'334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,,331,,,122,121',
'123,112,62,114,113,115,,116,124,125,,108,109,,,,337,,,,,,,,,,,,,,,,',
',,,1005,,,249,,,64,65,,,66,,,,,,,,,,,,,,,,,,,105,97,99,100,101,103,',
',,98,106,,,,,,,68,,,95,102,104,,,110,111,87,88,89,,80,,,,81,82,,,,85',
',83,84,86,333,334,78,79,,,,,,90,330,336,118,117,119,120,,,250,,,,,,',
'331,,,122,121,123,112,62,114,113,115,,116,124,125,,108,109,,,,337,,',
',,,,,,,,,,,,,,,,,998,,,249,,,64,65,,,66,,,,,,,,,,,,,,,,,,,105,97,99',
'100,101,103,,,,98,106,,,,,,,68,,,95,102,104,,,110,111,191,202,192,215',
'188,208,198,197,218,219,213,196,195,190,216,220,221,200,189,203,207',
'209,201,194,,,,210,217,212,211,204,214,199,187,206,205,,,,,,186,193',
'184,185,181,182,183,141,143,140,,142,,,,,,,,,175,176,,171,153,154,155',
'162,159,161,,,156,157,,,,177,178,163,164,,,,,,,,,,,,,,168,167,,152,174',
'170,169,165,166,160,158,150,173,151,,,179,105,,,,,,,,,,106,,,,,,,,,172',
',,,,180,191,202,192,215,188,208,198,197,218,219,213,196,195,190,216',
'220,221,200,189,203,207,209,201,194,,,,210,217,212,211,204,214,199,187',
'206,205,,,,,,186,193,184,185,181,182,183,141,143,,,142,,,,,,,,,175,176',
',171,153,154,155,162,159,161,,,156,157,,,,177,178,163,164,,,,,,,,,,',
',,,168,167,,152,174,170,169,165,166,160,158,150,173,151,,,179,105,,',
',,,,,,,106,,,,,,,,,172,,,,,180,191,202,192,215,188,208,198,197,218,219',
'213,196,195,190,216,220,221,200,189,203,207,209,201,194,,,,210,217,212',
'386,385,387,384,187,206,205,,,,,,186,193,184,185,381,382,383,379,143',
'114,113,380,,116,,,,,,,175,176,,171,153,154,155,162,159,161,,,156,157',
',,,177,178,163,164,,,,,,393,,,,,,,,168,167,,152,174,170,169,165,166',
'160,158,150,173,151,,,179,,,,,,,,,,,,,,,,,,,,172,,,,,180,191,202,192',
'215,188,208,198,197,218,219,213,196,195,190,216,220,221,200,189,203',
'207,209,201,194,,,,210,217,212,211,204,214,199,187,206,205,,,,,,186',
'193,184,185,181,182,183,141,143,416,415,142,,417,,,,,,,175,176,,171',
'153,154,155,162,159,161,,,156,157,,,,177,178,163,164,,,,,,,,,,,,,,168',
'167,,152,174,170,169,165,166,160,158,150,173,151,,,179,,,,,,,,,,,,,',
',,,,,,172,,,,,180,191,202,192,215,188,208,198,197,218,219,213,196,195',
'190,216,220,221,200,189,203,207,209,201,194,,,,210,217,212,211,204,214',
'199,187,206,205,,,,,,186,193,184,185,181,182,183,141,143,,,142,,,,,',
',,,175,176,,171,153,154,155,162,159,161,,,156,157,,,,177,178,163,164',
',,,,,,,,,,,,,168,167,,152,174,170,169,165,166,160,158,150,173,151,,',
'179,105,,,,,,,,,,106,,,,,,,,,172,,,,,180,191,202,192,215,188,208,198',
'197,218,219,213,196,195,190,216,220,221,200,189,203,207,209,201,194',
',,,210,217,212,211,204,214,199,187,206,205,,,,,,186,193,184,185,181',
'182,183,141,143,,,142,,,,,,,,,175,176,,171,153,154,155,162,159,161,',
',156,157,,,,177,178,163,164,,,,,,,,,,,,,,168,167,,152,174,170,169,165',
'166,160,158,150,173,151,,,179,105,,,,,,,,,,106,,,,,,,,,172,,,,,180,191',
'202,192,215,188,208,198,197,218,219,213,196,195,190,216,220,221,200',
'189,203,207,209,201,194,,,,210,217,212,211,204,214,199,187,206,205,',
',,,,186,193,184,185,181,182,183,141,143,,,142,,,,,,,,,175,176,,171,153',
'154,155,162,159,161,,,156,157,,,,177,178,163,164,,,,,,,,,,,,,,168,167',
',152,174,170,169,165,166,160,158,150,173,151,,,179,,,,,,,,,,459,463',
',,460,,,,,,172,,,175,176,180,171,153,154,155,162,159,161,,,156,157,',
',,177,178,163,164,,,,,,292,,,,,,,,168,167,,152,174,170,169,165,166,160',
'158,150,173,151,,,179,,,,,,,,,,466,470,,,465,,,,,,172,,,175,176,180',
'171,153,154,155,162,159,161,,,156,157,,,,177,178,163,164,,,,,,292,,',
',,,,,168,167,,152,174,170,169,165,166,160,158,150,173,151,,586,179,583',
'582,581,591,584,,,,,511,463,,,512,594,,,,,172,,,175,176,180,171,153',
'154,155,162,159,161,,,156,157,589,,,177,178,163,164,,,599,598,602,601',
',,,,,,,168,167,,152,174,170,169,165,166,160,158,150,173,151,,,179,,',
',,,,,,595,685,463,,,686,,,,,,172,,,175,176,180,171,153,154,155,162,159',
'161,,,156,157,,,,177,178,163,164,,,,,,292,,,,,,,,168,167,,152,174,170',
'169,165,166,160,158,150,173,151,,,179,,,,,,,,,,687,470,,,688,,,,,,172',
',,175,176,180,171,153,154,155,162,159,161,,,156,157,,,,177,178,163,164',
',,,,,292,,,,,,,,168,167,,152,174,170,169,165,166,160,158,150,173,151',
',,179,,,,,,,,,,714,463,,,715,,,,,,172,,,175,176,180,171,153,154,155',
'162,159,161,,,156,157,,,,177,178,163,164,,,,,,292,,,,,,,,168,167,,152',
'174,170,169,165,166,160,158,150,173,151,,,179,,,,,,,,,,717,470,,,718',
',,,,,172,,,175,176,180,171,153,154,155,162,159,161,,,156,157,,,,177',
'178,163,164,,,,,,292,,,,,,,,168,167,,152,174,170,169,165,166,160,158',
'150,173,151,,,179,,,,,,,,,,685,463,,,686,,,,,,172,,,175,176,180,171',
'153,154,155,162,159,161,,,156,157,,,,177,178,163,164,,,,,,292,,,,,,',
',168,167,,152,174,170,169,165,166,160,158,150,173,151,,,179,,,,,,,,',
',687,470,,,688,,,,,,172,,,175,176,180,171,153,154,155,162,159,161,,',
'156,157,,,,177,178,163,164,,,,,,292,,,,,,,,168,167,,152,174,170,169',
'165,166,160,158,150,173,151,,,179,,,,,,,,,,774,463,,,775,,,,,,172,,',
'175,176,180,171,153,154,155,162,159,161,,,156,157,,,,177,178,163,164',
',,,,,292,,,,,,,,168,167,,152,174,170,169,165,166,160,158,150,173,151',
',,179,,,,,,,,,,776,470,,,777,,,,,,172,,,175,176,180,171,153,154,155',
'162,159,161,,,156,157,,,,177,178,163,164,,,,,,292,,,,,,,,168,167,,152',
'174,170,169,165,166,160,158,150,173,151,,,179,,,,,,,,,,808,463,,,809',
',,,,,172,,,175,176,180,171,153,154,155,162,159,161,,,156,157,,,,177',
'178,163,164,,,,,,292,,,,,,,,168,167,,152,174,170,169,165,166,160,158',
'150,173,151,,,179,,,,,,,,,,811,470,,,810,,,,,,172,,,175,176,180,171',
'153,154,155,162,159,161,,,156,157,,,,177,178,163,164,,,,,,292,,,,,,',
',168,167,,152,174,170,169,165,166,160,158,150,173,151,,,179,,,,,,,,',
',898,470,,,899,,,,,,172,,,175,176,180,171,153,154,155,162,159,161,,',
'156,157,,,,177,178,163,164,,,,,,292,,,,,,,,168,167,,152,174,170,169',
'165,166,160,158,150,173,151,,,179,,,,,,,,,,511,463,,,512,,,,,,172,,',
'175,176,180,171,153,154,155,162,159,161,,,156,157,,,,177,178,163,164',
',,,,,292,,,,,,,,168,167,,152,174,170,169,165,166,160,158,150,173,151',
',,179,,,,,,,,,,1075,470,,,1074,,,,,,172,,,175,176,180,171,153,154,155',
'162,159,161,,,156,157,,,,177,178,163,164,,,,,,292,,,,,,,,168,167,,152',
'174,170,169,165,166,160,158,150,173,151,,,179,,,,,,,,,,1078,463,,,1079',
',,,,,172,,,175,176,180,171,153,154,155,162,159,161,,,156,157,,,,177',
'178,163,164,,,,,,292,,,,,,,,168,167,,152,174,170,169,165,166,160,158',
'150,173,151,,,179,586,,583,582,581,591,584,,,1080,470,,,1081,,,594,',
',172,,,175,176,180,171,153,154,155,162,159,161,,,156,157,,,589,177,178',
'163,164,,,,,,292,602,601,,,,,,168,167,,152,174,170,169,165,166,160,158',
'150,173,151,,586,179,583,582,581,591,584,,,,,,595,,,,594,,,,,172,,,',
'586,180,583,582,581,591,584,,,,,,,589,,586,594,583,582,581,591,584,',
',602,601,,,,,586,594,583,582,581,591,584,,589,,,,,,,,594,,,602,601,',
',589,,,,,595,,,,599,598,602,601,,,589,586,,583,582,581,591,584,,599',
'598,602,601,,,595,586,594,583,582,581,591,584,,,,,,,,595,586,594,583',
'582,581,591,584,,589,,,,,,595,,594,,,602,601,,,589,586,,583,582,581',
'591,584,,,,602,601,,,589,586,594,583,582,581,591,584,,599,598,602,601',
',,595,586,594,583,582,581,591,584,,589,,,,,,595,,594,,,602,601,,,589',
',,,,,595,,,,,602,601,,,589,586,,583,582,581,591,584,,,,602,601,,,595',
',594,,,,,,,,,,,,,595,,,,,,,,,589,,,,,,595,,,,,602,601,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,595' ]
        racc_action_table = arr = ::Array.new(27103, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'112,360,67,361,944,368,332,112,112,112,692,968,112,112,112,694,112,22',
'407,714,842,1,475,475,112,379,112,112,112,410,5,27,379,709,3,5,112,112',
'27,112,112,112,112,112,692,369,372,715,895,618,739,709,94,22,842,1024',
'20,1024,774,775,94,608,1002,1003,1006,1048,13,112,112,112,112,112,112',
'112,112,112,112,112,112,112,112,407,896,112,112,112,714,112,112,67,848',
'112,410,332,112,112,27,112,20,112,15,112,694,112,112,112,112,112,112',
'112,368,112,475,112,715,360,20,361,944,717,360,714,361,944,714,968,112',
'112,112,112,968,112,115,112,1078,1079,1080,1092,112,115,115,115,714',
'112,115,115,115,112,115,715,369,372,715,16,618,739,115,848,115,115,115',
'608,895,774,775,895,608,895,115,115,715,115,115,115,115,115,1002,1003',
'1006,1048,776,1002,1003,1006,1048,717,717,896,46,46,18,777,848,724,724',
'848,1081,794,794,115,115,115,115,115,115,115,115,115,115,115,115,115',
'115,848,1080,115,115,115,25,115,115,717,241,115,717,29,115,115,725,115',
'40,115,530,115,725,115,115,115,115,115,115,115,717,115,43,115,776,311',
'1078,1079,1080,1092,311,1078,1079,1080,1092,777,115,115,115,115,51,115',
'465,115,399,46,46,399,115,465,465,465,1081,115,75,465,465,115,465,19',
'241,724,380,776,564,794,19,564,29,380,620,530,530,530,777,19,622,242',
'465,465,622,465,465,465,465,465,337,337,1081,101,29,102,530,1081,244',
'103,756,104,756,756,756,381,756,138,443,399,399,621,381,465,465,465',
'465,465,465,465,465,465,465,465,465,465,465,620,19,465,465,465,222,465',
'620,481,243,465,245,620,465,242,645,620,395,465,246,465,685,465,465',
'465,465,465,465,465,741,465,244,465,250,620,284,686,621,799,288,741',
'443,337,337,621,465,465,466,465,621,465,756,808,621,466,466,466,465',
'299,984,466,466,465,466,565,620,465,565,481,41,984,621,466,741,741,898',
'645,645,395,395,395,685,809,466,466,645,466,466,466,466,466,964,300',
'964,964,964,686,964,382,799,799,303,621,984,984,382,831,741,799,317',
'569,41,808,569,466,466,466,466,466,466,466,466,466,466,466,466,466,466',
'898,41,466,466,466,319,466,898,383,984,466,320,898,466,809,383,898,920',
'466,321,466,327,466,466,466,466,466,466,466,330,466,466,466,52,898,240',
'324,325,831,331,52,964,240,324,325,466,466,687,466,52,466,240,324,325',
'687,687,687,466,336,687,687,687,466,687,326,898,466,862,42,384,862,326',
'687,687,687,687,384,920,328,1010,326,338,1010,687,687,328,687,687,687',
'687,687,345,342,347,328,353,385,370,52,342,240,324,325,385,370,386,365',
'397,342,366,42,365,386,370,687,687,687,687,687,687,687,687,687,687,687',
'687,687,687,42,326,687,687,687,442,687,687,17,17,687,367,442,687,687',
'328,687,371,687,373,687,442,687,687,687,687,687,687,687,342,687,687',
'687,358,370,358,358,358,358,358,397,397,397,401,341,687,687,687,687',
'358,687,688,687,459,387,460,404,687,688,688,688,387,687,688,688,688',
'687,688,546,389,442,358,358,359,359,546,389,688,688,688,358,358,358',
'358,546,406,341,688,688,409,688,688,688,688,688,459,624,460,718,744',
'744,780,904,624,341,718,432,904,780,435,718,402,624,459,718,460,358',
'780,688,688,688,688,688,688,688,688,688,688,688,688,688,688,437,546',
'688,688,688,899,688,688,49,49,688,412,899,688,688,648,688,899,688,440',
'688,899,688,688,688,688,688,688,688,624,688,718,688,572,780,572,572',
'572,572,572,402,402,402,49,49,688,688,688,688,572,688,810,688,762,762',
'669,908,688,810,810,810,908,688,444,810,810,688,810,997,454,899,572',
'412,412,412,997,648,648,648,1004,572,572,572,572,997,457,1004,810,810',
'458,810,810,810,810,810,1004,1040,669,788,788,1058,1058,589,1040,589',
'589,589,467,589,976,477,487,1040,489,976,669,572,490,810,810,810,810',
'810,810,810,810,810,810,810,810,810,810,491,997,810,810,810,492,810',
'508,589,519,810,487,1004,810,520,487,487,589,810,536,810,537,810,810',
'810,810,810,810,810,1040,810,753,810,753,753,753,540,753,882,542,882',
'882,882,547,882,810,810,811,810,550,810,552,559,140,811,811,811,810',
'140,140,811,811,810,811,507,560,810,561,566,753,567,570,811,502,574',
'575,882,577,753,578,507,507,579,811,811,882,811,811,811,811,811,950',
'588,950,950,950,507,950,507,596,507,507,507,507,600,502,507,603,507',
'502,502,502,502,605,811,811,811,811,811,811,811,811,811,811,811,811',
'811,811,609,503,811,811,811,884,811,884,884,884,811,884,610,811,611',
'612,626,629,811,652,811,655,811,811,811,811,811,811,811,661,811,811',
'811,503,670,675,681,503,503,503,503,689,690,884,693,811,811,696,811',
'698,811,2,2,2,2,2,2,811,701,703,2,2,811,711,713,2,811,2,2,2,2,2,2,2',
'9,9,9,9,9,2,2,2,2,2,2,2,795,795,2,716,795,795,795,447,2,2,2,2,2,2,2',
'2,2,2,2,2,719,2,2,2,720,2,2,723,2,2,2,447,447,447,447,447,447,447,447',
'447,447,447,740,447,447,755,757,447,447,764,2,770,773,2,803,805,2,2',
'488,807,2,816,2,447,840,447,2,447,447,447,447,447,447,447,2,447,847',
'858,859,2,2,2,2,2,2,866,867,868,2,2,488,447,872,447,488,488,2,873,875',
'2,2,2,876,878,2,2,881,883,2,2,36,36,36,36,36,36,886,892,897,36,36,901',
'905,907,36,916,36,36,36,36,36,36,36,315,315,315,315,315,36,36,36,36',
'36,36,36,919,926,36,927,929,930,931,453,36,36,36,36,36,36,36,36,36,36',
'36,36,933,36,36,36,934,36,36,935,36,36,36,453,453,453,453,453,453,453',
'453,453,453,453,948,453,453,949,966,453,453,975,36,979,982,36,995,998',
'36,36,1000,1005,36,1014,36,453,1015,453,36,453,453,453,453,453,453,453',
'36,453,1016,1017,1018,36,36,36,36,36,36,1020,1030,1033,36,36,1034,453',
'1035,1036,1038,1044,36,1057,1062,36,36,36,1063,1074,36,36,1075,1077',
'36,36,224,224,224,224,224,224,1083,1084,1088,224,224,1089,1090,1091',
'224,1099,224,224,224,224,224,224,224,352,352,352,352,352,224,224,224',
'224,224,224,224,,1050,224,1050,1050,1050,,1050,224,224,224,224,224,224',
'224,224,224,224,224,224,,224,224,224,,224,224,,224,224,224,24,24,24',
'24,24,24,24,24,24,24,24,,24,24,,,24,24,,224,,,224,,,224,224,,,224,,224',
'24,,24,224,24,24,24,24,24,24,24,224,24,,,,224,224,224,224,224,224,,',
',224,224,,24,,,,,224,,,224,224,224,,,224,224,,,224,224,249,249,249,249',
'249,249,,,,249,249,,,,249,,249,249,249,249,249,249,249,535,535,535,535',
'535,249,249,249,249,249,249,249,,,249,,,,,,249,249,249,249,249,249,249',
'249,249,249,249,249,,249,249,249,,249,249,,249,249,249,297,297,297,297',
'297,297,297,297,297,297,297,,297,297,,,297,297,,249,,,249,,,249,249',
',,249,,249,297,,297,249,297,297,297,297,297,297,297,249,297,,,,249,249',
'249,249,249,249,,,,249,249,,297,,,,,249,,,249,249,249,,,249,249,,,249',
'249,318,318,318,318,318,318,,,,318,318,,,,318,,318,318,318,318,318,318',
'318,,,,,,318,318,318,318,318,318,318,,,318,,,,,,318,318,318,318,318',
'318,318,318,318,318,318,318,,318,318,318,,318,318,,318,318,318,506,506',
'506,506,506,506,506,506,506,506,506,,506,506,,,506,506,,318,,,318,,',
'318,318,,,318,,318,506,,506,318,506,506,506,506,506,506,506,318,506',
',,,318,318,318,318,318,318,,,,318,318,506,506,,,,,318,,,318,318,318',
',,318,318,,,318,318,323,323,323,323,323,323,,,,323,323,,,,323,,323,323',
'323,323,323,323,323,,,,,,323,323,323,323,323,323,323,,,323,,,,,,323',
'323,323,323,323,323,323,323,323,323,323,323,,323,323,323,,323,323,,323',
'323,323,557,557,557,557,557,557,557,557,557,557,557,,557,557,,,557,557',
',323,,,323,,,323,323,,,323,,323,557,,557,323,557,557,557,557,557,557',
'557,323,557,,,,323,323,323,323,323,323,,,,323,323,,557,,,,,323,,,323',
'323,323,,,323,323,,,323,323,351,351,351,351,351,351,,,,351,351,,,,351',
',351,351,351,351,351,351,351,,,,,,351,351,351,351,351,351,351,,,351',
',,,,,351,351,351,351,351,351,351,351,351,351,351,351,,351,351,351,,351',
'351,,351,351,351,813,813,813,813,813,813,813,813,813,813,813,,813,813',
',,813,813,,351,,,351,,,351,351,,,351,,351,813,,813,351,813,813,813,813',
'813,813,813,351,813,,,,351,351,351,351,351,351,,,,351,351,,813,,,,,351',
',,351,351,351,,,351,351,,,351,351,363,363,363,363,363,363,,,,363,363',
',,,363,,363,363,363,363,363,363,363,,,,,,363,363,363,363,363,363,363',
',,363,,,,,,363,363,363,363,363,363,363,363,363,363,363,363,,363,363',
'363,,363,363,,363,363,363,925,925,925,925,925,925,925,925,925,925,925',
',925,925,,,925,925,,363,,,363,,,363,363,,,363,,363,925,,925,363,925',
'925,925,925,925,925,925,363,925,,,,363,363,363,363,363,363,,,,363,363',
',925,,,,,363,,,363,363,363,,,363,363,,,363,363,364,364,364,364,364,364',
',,,364,364,,,,364,,364,364,364,364,364,364,364,,,,,,364,364,364,364',
'364,364,364,,,364,,,,,,364,364,364,364,364,364,364,364,364,364,364,364',
',364,364,364,,364,364,,364,364,364,343,343,343,343,343,343,343,343,343',
'343,343,,343,343,,,343,343,,364,,,364,,,364,364,,,364,,364,343,,343',
'364,343,343,343,343,343,343,343,364,343,,,,364,364,364,364,364,364,',
',,364,364,,,,,,,364,,,364,364,364,,,364,364,,,364,364,604,604,604,604',
'604,604,,,,604,604,,,,604,,604,604,604,604,604,604,604,,,,,,604,604',
'604,604,604,604,604,,,604,,,,,,604,604,604,604,604,604,604,604,604,604',
'604,604,,604,604,604,,604,604,,604,604,604,344,344,344,344,344,344,344',
'344,344,344,344,,344,344,,,344,344,,604,,,604,,,604,604,,,604,,604,344',
',344,604,344,344,344,344,344,344,344,604,344,,,,604,604,604,604,604',
'604,,,,604,604,,,,,,,604,,,604,604,604,,,604,604,,,604,604,607,607,607',
'607,607,607,,,,607,607,,,,607,,607,607,607,607,607,607,607,,,,,,607',
'607,607,607,607,607,607,,,607,,,,,,607,607,607,607,607,607,607,607,607',
'607,607,607,,607,607,607,,607,607,,607,607,607,485,485,485,485,485,485',
'485,485,485,485,485,,485,485,,,485,485,,607,,,607,,,607,607,,,607,,607',
'485,,485,607,485,485,485,485,485,485,485,607,485,,,,607,607,607,607',
'607,607,,,,607,607,,,,,,,607,,,607,607,607,,,607,607,,,607,607,657,657',
'657,657,657,657,,,,657,657,,,,657,,657,657,657,657,657,657,657,,,,,',
'657,657,657,657,657,657,657,,,657,,,,,,657,657,657,657,657,657,657,657',
'657,657,657,657,,657,657,657,,657,657,,657,657,657,486,486,486,486,486',
'486,486,486,486,486,486,,486,486,,,486,486,,657,,,657,,,657,657,,,657',
',657,486,,486,657,486,486,486,486,486,486,486,657,486,,,,657,657,657',
'657,657,657,,,,657,657,,,,,,,657,,,657,657,657,,,657,657,,,657,657,778',
'778,778,778,778,778,,,,778,778,,,,778,,778,778,778,778,778,778,778,',
',,,,778,778,778,778,778,778,778,,965,778,965,965,965,,965,778,778,778',
'778,778,778,778,778,778,778,778,778,,778,778,778,,778,778,,778,778,778',
'496,496,496,496,496,496,496,,965,496,496,,,,,,496,496,,778,,,778,,,778',
'778,,,778,,778,496,,496,778,496,496,496,496,496,496,496,778,496,,,,778',
'778,778,778,778,778,,,,778,778,,,,,,,778,,,778,778,778,,,778,778,,,778',
'778,789,789,789,789,789,789,,,,789,789,,,,789,,789,789,789,789,789,789',
'789,,,,,,789,789,789,789,789,789,789,,1019,789,1019,1019,1019,,1019',
'789,789,789,789,789,789,789,789,789,789,789,789,,789,789,789,,789,789',
',789,789,789,497,497,497,497,497,497,497,,1019,497,497,,,,,,497,497',
',789,,,789,,,789,789,,,789,,789,497,,497,789,497,497,497,497,497,497',
'497,789,497,,,,789,789,789,789,789,789,,,,789,789,,,,,,,789,,,789,789',
'789,,,789,789,,,789,789,790,790,790,790,790,790,,,,790,790,,,,790,,790',
'790,790,790,790,790,790,,,,,,790,790,790,790,790,790,790,,1021,790,1021',
'1021,1021,,1021,790,790,790,790,790,790,790,790,790,790,790,790,,790',
'790,790,,790,790,,790,790,790,498,498,498,498,498,498,498,,1021,498',
'498,,,,,,498,498,,790,,,790,,,790,790,,,790,,790,498,,498,790,498,498',
'498,498,498,498,498,790,498,,,,790,790,790,790,790,790,,,,790,790,,',
',,,,790,,,790,790,790,,,790,790,,,790,790,796,796,796,796,796,796,,',
',796,796,,,,796,,796,796,796,796,796,796,796,,,,,,796,796,796,796,796',
'796,796,,1056,796,1056,1056,1056,,1056,796,796,796,796,796,796,796,796',
'796,796,796,796,,796,796,796,,796,796,,796,796,796,499,499,499,499,499',
'499,499,,1056,499,499,,,,,,499,499,,796,,,796,,,796,796,,,796,,796,499',
',499,796,499,499,499,499,499,499,499,796,499,,,,796,796,796,796,796',
'796,,,,796,796,,,,,,,796,,,796,796,796,,,796,796,,,796,796,837,837,837',
'837,837,837,,,,837,837,,,,837,,837,837,837,837,837,837,837,,,,,,837',
'837,837,837,837,837,837,,,837,,,,,,837,837,837,837,837,837,837,837,837',
'837,837,837,,837,837,837,,837,837,,837,837,837,500,500,500,500,500,500',
'500,,,500,500,,,,,,500,500,,837,,,837,,,837,837,,,837,,837,500,,500',
'837,500,500,500,500,500,500,500,837,500,,,,837,837,837,837,837,837,',
',,837,837,,,,,,,837,,,837,837,837,,,837,837,,,837,837,856,856,856,856',
'856,856,,,,856,856,,,,856,,856,856,856,856,856,856,856,,,,,,856,856',
'856,856,856,856,856,,,856,,,,,,856,856,856,856,856,856,856,856,856,856',
'856,856,,856,856,856,,856,856,,856,856,856,501,501,501,501,501,501,501',
',,501,501,,,,,,501,501,,856,,,856,,,856,856,,,856,,856,501,,501,856',
'501,501,501,501,501,501,501,856,501,,,,856,856,856,856,856,856,,,,856',
'856,,,,,,,856,,,856,856,856,,,856,856,,,856,856,864,864,864,864,864',
'864,,,,864,864,,,,864,,864,864,864,864,864,864,864,,,,,,864,864,864',
'864,864,864,864,,,864,,,,,,864,864,864,864,864,864,864,864,864,864,864',
'864,,864,864,864,,864,864,,864,864,864,504,504,504,504,504,504,504,',
',504,504,,,,,,504,504,,864,,,864,,,864,864,,,864,,864,504,,504,864,504',
'504,504,504,504,504,504,864,504,,,,864,864,864,864,864,864,,,,864,864',
',,,,,,864,,,864,864,864,,,864,864,,,864,864,865,865,865,865,865,865',
',,,865,865,,,,865,,865,865,865,865,865,865,865,,,,,,865,865,865,865',
'865,865,865,,,865,,,,,,865,865,865,865,865,865,865,865,865,865,865,865',
',865,865,865,,865,865,,865,865,865,505,505,505,505,505,505,505,505,',
'505,505,,,,,,505,505,,865,,,865,,,865,865,,,865,,865,505,,505,865,505',
'505,505,505,505,505,505,865,505,,,,865,865,865,865,865,865,,,,865,865',
',,,,,,865,,,865,865,865,,,865,865,,,865,865,891,891,891,891,891,891',
',,,891,891,,,,891,,891,891,891,891,891,891,891,,,,,,891,891,891,891',
'891,891,891,,,891,,,,,,891,891,891,891,891,891,891,891,891,891,891,891',
',891,891,891,,891,891,,891,891,891,556,,,,,,,,,,,,,,,,556,556,,891,',
',891,,495,891,891,,,891,,891,556,,556,891,556,556,556,556,495,495,556',
'891,556,,,,891,891,891,891,891,891,,,495,891,891,,495,495,495,495,,891',
',,891,891,891,,,891,891,,,891,891,902,902,902,902,902,902,,,,902,902',
',,,902,,902,902,902,902,902,902,902,,,,,,902,902,902,902,902,902,902',
',,902,,,,,,902,902,902,902,902,902,902,902,902,902,902,902,,902,902',
'902,,902,902,,902,902,902,493,,,,,,,,,,,,,,,,493,493,,902,,,902,,,902',
'902,,,902,,902,493,,493,902,493,493,493,493,,,,902,,,,,902,902,902,902',
'902,902,,,,902,902,,,,,,,902,,,902,902,902,,,902,902,,,902,902,941,941',
'941,941,941,941,,,,941,941,,,,941,,941,941,941,941,941,941,941,,,,,',
'941,941,941,941,941,941,941,,,941,,,,,,941,941,941,941,941,941,941,941',
'941,941,941,941,,941,941,941,,941,941,,941,941,941,494,,,,,,,,,,,,,',
',,494,494,,941,,,941,,,941,941,,,941,,941,494,,494,941,494,494,494,494',
',,,941,,,,,941,941,941,941,941,941,,,,941,941,,,,,,,941,,,941,941,941',
',,941,941,,,941,941,942,942,942,942,942,942,,,,942,942,,,,942,,942,942',
'942,942,942,942,942,,,,,,942,942,942,942,942,942,942,,,942,,,,,,942',
'942,942,942,942,942,942,942,942,942,942,942,,942,942,942,,942,942,,942',
'942,942,,,,,,,,,,,,,,,,,,,,942,,,942,,,942,942,,,942,,942,,,,942,,,',
',,,,942,,,,,942,942,942,942,942,942,,,,942,942,,,,,,,942,,,942,942,942',
',,942,942,,,942,942,972,972,972,972,972,972,,,,972,972,,,,972,,972,972',
'972,972,972,972,972,,,,,,972,972,972,972,972,972,972,,,972,,,,,,972',
'972,972,972,972,972,972,972,972,972,972,972,,972,972,972,,972,972,,972',
'972,972,,,,,,,,,,,,,,,,,,,,972,,,972,,,972,972,,,972,,972,,,,972,,,',
',,,,972,,,,,972,972,972,972,972,972,,,,972,972,,,,,,,972,,,972,972,972',
',,972,972,,,972,972,1001,1001,1001,1001,1001,1001,,,,1001,1001,,,,1001',
',1001,1001,1001,1001,1001,1001,1001,,,,,,1001,1001,1001,1001,1001,1001',
'1001,,,1001,,,,,,1001,1001,1001,1001,1001,1001,1001,1001,1001,1001,1001',
'1001,,1001,1001,1001,,1001,1001,,1001,1001,1001,,,,,,,,,,,,,,,,,,,,1001',
',,1001,,,1001,1001,,,1001,,1001,,,,1001,,,,,,,,1001,,,,,1001,1001,1001',
'1001,1001,1001,,,,1001,1001,,,,,,,1001,,,1001,1001,1001,,,1001,1001',
',,1001,1001,1022,1022,1022,1022,1022,1022,,,,1022,1022,,,,1022,,1022',
'1022,1022,1022,1022,1022,1022,,,,,,1022,1022,1022,1022,1022,1022,1022',
',,1022,,,,,,1022,1022,1022,1022,1022,1022,1022,1022,1022,1022,1022,1022',
',1022,1022,1022,,1022,1022,,1022,1022,1022,,,,,,,,,,,,,,,,,,,,1022,',
',1022,,,1022,1022,,,1022,,1022,,,,1022,,,,,,,,1022,,,,,1022,1022,1022',
'1022,1022,1022,,,,1022,1022,,,,,,,1022,,,1022,1022,1022,,,1022,1022',
',,1022,1022,1027,1027,1027,1027,1027,1027,,,,1027,1027,,,,1027,,1027',
'1027,1027,1027,1027,1027,1027,,,,,,1027,1027,1027,1027,1027,1027,1027',
',,1027,,,,,,1027,1027,1027,1027,1027,1027,1027,1027,1027,1027,1027,1027',
',1027,1027,1027,,1027,1027,,1027,1027,1027,,,,,,,,,,,,,,,,,,,,1027,',
',1027,,,1027,1027,,,1027,,1027,,,,1027,,,,,,,,1027,,,,,1027,1027,1027',
'1027,1027,1027,,,,1027,1027,,,,,,,1027,,,1027,1027,1027,,,1027,1027',
',,1027,1027,1029,1029,1029,1029,1029,1029,,,,1029,1029,,,,1029,,1029',
'1029,1029,1029,1029,1029,1029,,,,,,1029,1029,1029,1029,1029,1029,1029',
',,1029,,,,,,1029,1029,1029,1029,1029,1029,1029,1029,1029,1029,1029,1029',
',1029,1029,1029,,1029,1029,,1029,1029,1029,,,,,,,,,,,,,,,,,,,,1029,',
',1029,,,1029,1029,,,1029,,1029,,,,1029,,,,,,,,1029,,,,,1029,1029,1029',
'1029,1029,1029,,,,1029,1029,,,,,,,1029,,,1029,1029,1029,,,1029,1029',
',,1029,1029,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8',
',,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,',
',,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,',
',8,8,8,,,8,8,,,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23',
',,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23',
'23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,',
'23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23,,30',
'23,23,,,23,23,30,30,30,,,30,30,30,745,30,745,745,745,745,745,,,,30,30',
'30,,,,745,,,,,30,30,,30,30,30,30,30,,,,,,,,,,745,,,,,,,,,745,745,745',
'745,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30',
',,30,30,,30,745,30,,30,,30,30,30,30,30,30,30,,30,30,30,,,,,,,,,,,,,30',
'30,31,30,,30,,,,31,31,31,30,,31,31,31,30,31,,,,,,,,,,31,31,,,,,,,,,31',
'31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,,,,,31,31,31,31,31,31,31,31,31',
'31,31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31,,31,,31,,31,31,31',
'31,31,31,31,,31,,31,,,,,,,,,,,,,31,31,,31,,31,32,32,32,,32,,31,,32,32',
',31,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32',
',,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,',
',,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32',
'32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,,,32,32,33,33,33,,33,,,,33',
'33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,',
'33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,',
',,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33',
'33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,,,33,33,34,34,34,,34,,',
',34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,',
',,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,',
',,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34',
'34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,,,34,34,44,44,44,,44',
',,,44,44,,,,44,,44,44,44,44,44,44,44,,,,,,44,44,44,44,44,44,44,,,44',
',,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44,44,,44,44,44,,,,,,',
',,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,44,,,,,44,44,44,44',
'44,44,,,,44,44,,,,,,,44,,,44,44,44,,,44,44,,,44,44,45,45,45,,45,,,,45',
'45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,',
'45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,',
',,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45',
',,,45,45,,,,,,,45,,,45,45,45,,,45,45,,,45,45,47,47,47,,47,,,,47,47,',
',,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,',
',47,47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,',
',,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47',
'47,,,,,,,47,,,47,47,47,,,47,47,,,47,47,48,48,48,,48,,,,48,48,,,,48,',
'48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,,,48,,,48,48',
'48,48,48,48,48,48,,48,48,48,,48,48,,48,48,48,,,,,,,,,,,,,,,,,,,,48,',
',48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48,48,48,48,,,,48,48,,',
',,,,48,,,48,48,48,,,48,48,,,48,48,50,50,50,,50,,,,50,50,,,,50,,50,50',
'50,50,50,50,50,,,,,,50,50,50,50,50,50,50,,,50,,,,,,,50,,,50,50,50,50',
'50,50,50,50,,50,50,50,,50,50,,50,50,50,,,,,,,,,,,,,,,,,,,,50,,,50,,',
'50,50,,,50,,,,,,50,,,,,,,,50,,,,,50,50,50,50,50,50,,,,50,50,,,,,,,50',
',,50,50,50,,62,50,50,,,50,50,62,62,62,,,62,62,62,747,62,747,747,747',
'747,747,,,,,62,62,62,,,747,,,,,62,62,,62,62,62,62,62,,,,,,,,,,747,,',
',,,,,,747,747,747,747,,62,62,62,62,62,62,62,62,62,62,62,62,62,62,,,62',
'62,62,,,62,,,62,,,62,62,,62,747,62,,62,,62,62,62,62,62,62,62,,62,,62',
',,,,,,,,,,,,62,62,62,62,,62,,62,,,,,62,,,,461,62,64,64,64,64,64,461',
'461,461,64,64,461,461,461,64,461,64,64,64,64,64,64,64,,461,461,461,',
'64,64,64,64,64,64,64,461,461,64,461,461,461,461,461,64,64,,64,64,64',
'64,64,64,64,64,64,,64,64,64,,64,64,,64,64,64,461,461,461,461,461,461',
'461,461,461,461,461,461,461,461,,,461,461,461,64,,461,64,461,461,64',
'64,461,461,64,461,64,461,,461,64,461,461,461,461,461,461,461,64,461',
'461,461,,64,64,64,64,64,64,,,,64,64,461,461,,461,,461,64,,,64,64,64',
'461,,64,64,,461,64,64,69,69,69,,69,,,,69,69,,,,69,,69,69,69,69,69,69',
'69,,,,,,69,69,69,69,69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69',
',69,69,69,,69,69,,69,69,69,,,,,,,,,,,,,,,,,,,,69,,,69,,,69,69,,,69,',
',,,,69,,,,,,,,69,,,,,69,69,69,69,69,69,,,,69,69,,,,,,,69,,,69,69,69',
',,69,69,,,69,69,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70,,',
',,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70',
'70,70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,',
'70,,,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,,,,,,,70,,,70,70,70,,,70',
'70,,,70,70,73,73,73,,73,,,,73,73,,,,73,,73,73,73,73,73,73,73,,,,,,73',
'73,73,73,73,73,73,,,73,,,,,,,73,,,73,73,73,73,73,73,73,73,,73,73,73',
',73,73,,73,73,73,,,,,,,,,,,,,,,,,,,,73,,,73,,,73,73,,,73,,,,,,73,,,',
',,,,73,,,,,73,73,73,73,73,73,,,,73,73,73,,,,,73,73,,,73,73,73,,,73,73',
',,73,73,128,128,128,128,128,,,,128,128,,,,128,,128,128,128,128,128,128',
'128,,,,,,128,128,128,128,128,128,128,,,128,,,,,,128,128,128,128,128',
'128,128,128,128,128,128,128,,128,128,128,,128,128,,128,128,128,,,,,',
',,,,,,,,,,,,,,128,,,128,,,128,128,,,128,,128,,,,128,,,,,,,,128,,,,,128',
'128,128,128,128,128,,,,128,128,,,,,,128,128,,,128,128,128,,,128,128',
',,128,128,133,133,133,,133,,,,133,133,,,,133,,133,133,133,133,133,133',
'133,,,,,,133,133,133,133,133,133,133,,,133,,,,,,,133,,,133,133,133,133',
'133,133,133,133,,133,133,133,,133,133,,133,133,133,,,,,,,,,,,,,,,,,',
',,133,,,133,,,133,133,,,133,,,,,,133,,,,,,,,133,,,,,133,133,133,133',
'133,133,,,,133,133,,,,,,,133,,,133,133,133,,,133,133,,,133,133,134,134',
'134,,134,,,,134,134,,,,134,,134,134,134,134,134,134,134,,,,,,134,134',
'134,134,134,134,134,,,134,,,,,,,134,,,134,134,134,134,134,134,134,134',
',134,134,134,,134,134,,134,134,134,,,,,,,,,,,,,,,,,,,,134,,,134,,,134',
'134,,,134,,,,,,134,,,,,,,,134,,,,,134,134,134,134,134,134,,,,134,134',
',,,,,,134,,,134,134,134,,,134,134,,,134,134,135,135,135,,135,,,,135',
'135,,,,135,,135,135,135,135,135,135,135,,,,,,135,135,135,135,135,135',
'135,,,135,,,,,,,135,,,135,135,135,135,135,135,135,135,,135,135,135,',
'135,135,,135,135,135,,,,,,,,,,,,,,,,,,,,135,,,135,,,135,135,,,135,,',
',,,135,,,,,,,,135,,,,,135,135,135,135,135,135,,,,135,135,,,,,,,135,',
',135,135,135,,,135,135,,,135,135,136,136,136,,136,,,,136,136,,,,136',
',136,136,136,136,136,136,136,,,,,,136,136,136,136,136,136,136,,,136',
',,,,,,136,,,136,136,136,136,136,136,136,136,,136,136,136,,136,136,,136',
'136,136,,,,,,,,,,,,,,,,,,,,136,,,136,,,136,136,,,136,,,,,,136,,,,,,',
',136,,,,,136,136,136,136,136,136,,,,136,136,,,,,,,136,,,136,136,136',
',,136,136,,,136,136,137,137,137,137,137,,,,137,137,,,,137,,137,137,137',
'137,137,137,137,,,,,,137,137,137,137,137,137,137,,,137,,,,,,137,137',
',137,137,137,137,137,137,137,137,137,,137,137,137,,137,137,,137,137',
'137,,,,,,,,,,,,,,,,,,,,137,,,137,,,137,137,,,137,,137,,,,137,,,,,,,',
'137,,,,,137,137,137,137,137,137,,,,137,137,,,,,,,137,,,137,137,137,',
',137,137,,,137,137,225,225,225,,225,,,,225,225,,,,225,,225,225,225,225',
'225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225',
'225,225,225,225,225,225,,225,225,225,,225,225,,225,225,225,,,,,,,,,',
',,,,,,,,,,225,,,225,,,225,225,,,225,,225,,,,225,,,,,,,,225,,,,,225,225',
'225,225,225,225,,,,225,225,,,,,,,225,,,225,225,225,,,225,225,,,225,225',
'226,226,226,,226,,,,226,226,,,,226,,226,226,226,226,226,226,226,,,,',
',226,226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226,226',
'226,226,,226,226,226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,',
'226,,,226,226,,,226,,226,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226',
',,,226,226,,,,,,,226,,,226,226,226,,,226,226,,,226,226,227,227,227,',
'227,,,,227,227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227',
'227,227,227,227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227',
'227,227,,227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227',
',,227,,,,,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,,,',
',,,227,,,227,227,227,,,227,227,,,227,227,228,228,228,,228,,,,228,228',
',,,228,,228,228,228,228,228,228,228,,,,,,228,228,228,228,228,228,228',
',,228,,,,,,,228,,,228,228,228,228,228,228,228,228,,228,228,228,,228',
'228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228',
',,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,,,,,,,228,,,228,228',
'228,,,228,228,,,228,228,229,229,229,,229,,,,229,229,,,,229,,229,229',
'229,229,229,229,229,,,,,,229,229,229,229,229,229,229,,,229,,,,,,,229',
',,229,229,229,229,229,229,229,229,,229,229,229,,229,229,,229,229,229',
',,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,',
',229,229,229,229,229,229,,,,229,229,,,,,,,229,,,229,229,229,,,229,229',
',,229,229,230,230,230,,230,,,,230,230,,,,230,,230,230,230,230,230,230',
'230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230,230,230,230',
'230,230,230,230,230,230,230,230,,230,230,,230,230,230,,,,,,,,,,,,,,',
',,,,,230,,,230,,,230,230,,,230,,230,,230,,230,,,,,,,,230,,,,,230,230',
'230,230,230,230,,,,230,230,,,,,,,230,,230,230,230,230,,,230,230,,,230',
'230,235,235,235,,235,,,,235,235,,,,235,,235,235,235,235,235,235,235',
',,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235',
'235,235,235,,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235',
',,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235',
',,,235,235,,,,,,,235,,,235,235,235,,,235,235,,,235,235,236,236,236,',
'236,,,,236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236',
'236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236',
'236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236',
',,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236,,,,236,236,,,',
',,,236,,,236,236,236,,,236,236,,,236,236,237,237,237,,237,,,,237,237',
',,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237,237',
',,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,,237',
'237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237',
',,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237,237,,,,,,237,,,237',
'237,237,,,237,237,,,237,237,248,248,248,,248,,,,248,248,,,,248,,248',
'248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,',
',248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248,,248,248',
'248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,248',
',,,,248,248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248,248,,,248',
'248,,,248,248,251,251,251,,251,,,,251,251,,,,251,,251,251,251,251,251',
'251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251',
'251,251,251,251,251,,251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,',
',,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251,251,251',
'251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,,251,251,,,251,251,252',
'252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252',
'252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252',
'252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252',
',,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252',
'252,,,,,,,252,,,252,252,252,,,252,252,,,252,252,253,253,253,,253,,,',
'253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253',
'253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253',
',253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,',
',,,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253',
',,253,253,253,,,253,253,,,253,253,254,254,254,,254,,,,254,254,,,,254',
',254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254',
',,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,,254',
'254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,',
',254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254',
',,254,254,,,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255',
'255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255',
'255,255,255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,',
',,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255',
'255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255,255,,,255',
'255,256,256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256',
',,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256',
'256,256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256',
',,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256',
',,,256,256,,,,,,,256,,,256,256,256,,,256,256,,,256,256,257,257,257,',
'257,,,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257',
'257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257',
'257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257',
',,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,',
',,,257,,,257,257,257,,,257,257,,,257,257,258,258,258,,258,,,,258,258',
',,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258',
',,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,,258',
'258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258',
',,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,,,258,258',
'258,,,258,258,,,258,258,259,259,259,,259,,,,259,259,,,,259,,259,259',
'259,259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259',
',,259,259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259,259',
',,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,',
',259,259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,,,259,259',
',,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260,260,260,260,260',
'260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260',
'260,260,260,260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,',
',,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260',
'260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260,260,,,260,260,261,261',
'261,,261,,,,261,261,,,,261,,261,261,261,261,261,261,261,,,,,,261,261',
'261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261',
',261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261',
'261,,,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261,261',
',,,,,,261,,,261,261,261,,,261,261,,,261,261,262,262,262,,262,,,,262',
'262,,,,262,,262,262,262,262,262,262,262,,,,,,262,262,262,262,262,262',
'262,,,262,,,,,,,262,,,262,262,262,262,262,262,262,262,,262,262,262,',
'262,262,,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,',
',,,262,,,,,,,,262,,,,,262,262,262,262,262,262,,,,262,262,,,,,,,262,',
',262,262,262,,,262,262,,,262,262,263,263,263,,263,,,,263,263,,,,263',
',263,263,263,263,263,263,263,,,,,,263,263,263,263,263,263,263,,,263',
',,,,,,263,,,263,263,263,263,263,263,263,263,,263,263,263,,263,263,,263',
'263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263,,,,,,',
',263,,,,,263,263,263,263,263,263,,,,263,263,,,,,,,263,,,263,263,263',
',,263,263,,,263,263,264,264,264,,264,,,,264,264,,,,264,,264,264,264',
'264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264',
'264,264,264,264,264,264,264,,264,264,264,,264,264,,264,264,264,,,,,',
',,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264,,,,,,,,264,,,,,264',
'264,264,264,264,264,,,,264,264,,,,,,,264,,,264,264,264,,,264,264,,,264',
'264,265,265,265,,265,,,,265,265,,,,265,,265,265,265,265,265,265,265',
',,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265',
'265,265,265,,265,265,265,,265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265',
',,265,,,265,265,,,265,,,,,,265,,,,,,,,265,,,,,265,265,265,265,265,265',
',,,265,265,,,,,,,265,,,265,265,265,,,265,265,,,265,265,266,266,266,',
'266,,,,266,266,,,,266,,266,266,266,266,266,266,266,,,,,,266,266,266',
'266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266,266,266,266,,266',
'266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266',
',,266,,,,,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,,,266,266,,,',
',,,266,,,266,266,266,,,266,266,,,266,266,267,267,267,,267,,,,267,267',
',,,267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267,267',
',,267,,,,,,,267,,,267,267,267,267,267,267,267,267,,267,267,267,,267',
'267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,,,,,267',
',,,,,,,267,,,,,267,267,267,267,267,267,,,,267,267,,,,,,,267,,,267,267',
'267,,,267,267,,,267,267,268,268,268,,268,,,,268,268,,,,268,,268,268',
'268,268,268,268,268,,,,,,268,268,268,268,268,268,268,,,268,,,,,,,268',
',,268,268,268,268,268,268,268,268,,268,268,268,,268,268,,268,268,268',
',,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,,,,,268,,,,,,,,268,,,',
',268,268,268,268,268,268,,,,268,268,,,,,,,268,,,268,268,268,,,268,268',
',,268,268,269,269,269,,269,,,,269,269,,,,269,,269,269,269,269,269,269',
'269,,,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269,269',
'269,269,269,269,,269,269,269,,269,269,,269,269,269,,,,,,,,,,,,,,,,,',
',,269,,,269,,,269,269,,,269,,,,,,269,,,,,,,,269,,,,,269,269,269,269',
'269,269,,,,269,269,,,,,,,269,,,269,269,269,,,269,269,,,269,269,270,270',
'270,,270,,,,270,270,,,,270,,270,270,270,270,270,270,270,,,,,,270,270',
'270,270,270,270,270,,,270,,,,,,,270,,,270,270,270,270,270,270,270,270',
',270,270,270,,270,270,,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270',
'270,,,270,,,,,,270,,,,,,,,270,,,,,270,270,270,270,270,270,,,,270,270',
',,,,,,270,,,270,270,270,,,270,270,,,270,270,271,271,271,,271,,,,271',
'271,,,,271,,271,271,271,271,271,271,271,,,,,,271,271,271,271,271,271',
'271,,,271,,,,,,,271,,,271,271,271,271,271,271,271,271,,271,271,271,',
'271,271,,271,271,271,,,,,,,,,,,,,,,,,,,,271,,,271,,,271,271,,,271,,',
',,,271,,,,,,,,271,,,,,271,271,271,271,271,271,,,,271,271,,,,,,,271,',
',271,271,271,,,271,271,,,271,271,272,272,272,,272,,,,272,272,,,,272',
',272,272,272,272,272,272,272,,,,,,272,272,272,272,272,272,272,,,272',
',,,,,,272,,,272,272,272,272,272,272,272,272,,272,272,272,,272,272,,272',
'272,272,,,,,,,,,,,,,,,,,,,,272,,,272,,,272,272,,,272,,,,,,272,,,,,,',
',272,,,,,272,272,272,272,272,272,,,,272,272,,,,,,,272,,,272,272,272',
',,272,272,,,272,272,277,277,277,,277,,,,277,277,,,,277,,277,277,277',
'277,277,277,277,,,,,,277,277,277,277,277,277,277,,,277,,,,,,,277,,,277',
'277,277,277,277,277,277,277,,277,277,277,,277,277,,277,277,277,,,,,',
',,,,,,,,,,,,,,277,,,277,,,277,277,,,277,,,,,,277,,,,,,,,277,,,,,277',
'277,277,277,277,277,,,,277,277,,,,,,,277,,,277,277,277,,,277,277,,,277',
'277,285,285,285,,285,,,,285,285,,,,285,,285,285,285,285,285,285,285',
',,,,,285,285,285,285,285,285,285,,,285,,,,,,,285,,,285,285,285,285,285',
'285,285,285,285,285,285,285,,285,285,,285,285,285,,,,,,,,,,,,,,,,,,',
',285,,,285,,,285,285,,,285,,285,,285,,285,,,,,,,,285,,,,,285,285,285',
'285,285,285,,,,285,285,,,,,,,285,,285,285,285,285,,,285,285,,,285,285',
'292,292,292,,292,,,,292,292,,,,292,,292,292,292,292,292,292,292,,,,',
',292,292,292,292,292,292,292,,,292,,,,,,,292,,,292,292,292,292,292,292',
'292,292,292,292,292,292,,292,292,,292,292,292,,,,,,,,,,,,,,,,,,,,292',
',,292,,,292,292,,,292,,292,,292,,292,,,,,,,,292,,,,,292,292,292,292',
'292,292,,,,292,292,,,,,,,292,,292,292,292,292,,,292,292,,,292,292,295',
'295,295,,295,,,,295,295,,,,295,,295,295,295,295,295,295,295,,,,,,295',
'295,295,295,295,295,295,,,295,,,,,,,295,,,295,295,295,295,295,295,295',
'295,295,295,295,295,,295,295,,295,295,295,,,,,,,,,,,,,,,,,,,,295,,,295',
',,295,295,,,295,,295,,295,,295,,,,,,,,295,,,,,295,295,295,295,295,295',
',,,295,295,295,,,,,,295,,295,295,295,295,,,295,295,,,295,295,302,302',
'302,,302,,,,302,302,,,,302,,302,302,302,302,302,302,302,,,,,,302,302',
'302,302,302,302,302,,,302,,,,,,,302,,,302,302,302,302,302,302,302,302',
',302,302,302,,302,302,,302,302,302,,,,,,,,,,,,,,,,,,,,302,,,302,,,302',
'302,,,302,,,,,,302,,,,,,,,302,,,,,302,302,302,302,302,302,,,,302,302',
',,,,,,302,,,302,302,302,,,302,302,,,302,302,304,304,304,,304,,,,304',
'304,,,,304,,304,304,304,304,304,304,304,,,,,,304,304,304,304,304,304',
'304,,,304,,,,,,,304,,,304,304,304,304,304,304,304,304,,304,304,304,',
'304,304,,304,304,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,',
',,,304,,,,,,,,304,,,,,304,304,304,304,304,304,,,,304,304,,,,,,,304,',
',304,304,304,,,304,304,,,304,304,307,307,307,,307,,,,307,307,,,,307',
',307,307,307,307,307,307,307,,,,,,307,307,307,307,307,307,307,,,307',
',,,,,,307,,,307,307,307,307,307,307,307,307,,307,307,307,,307,307,,307',
'307,307,,,,,,,,,,,,,,,,,,,,307,,,307,,,307,307,,,307,,,,,,307,,,,,,',
',307,,,,,307,307,307,307,307,307,,,,307,307,,,,,,,307,,,307,307,307',
',,307,307,,,307,307,308,308,308,,308,,,,308,308,,,,308,,308,308,308',
'308,308,308,308,,,,,,308,308,308,308,308,308,308,,,308,,,,,,,308,,,308',
'308,308,308,308,308,308,308,,308,308,308,,308,308,,308,308,308,,,,,',
',,,,,,,,,,,,,,308,,,308,,,308,308,,,308,,,,,,308,,,,,,,,308,,,,,308',
'308,308,308,308,308,,,,308,308,,,,,,,308,,,308,308,308,,,308,308,,,308',
'308,314,314,314,314,314,,,,314,314,,,,314,,314,314,314,314,314,314,314',
',,,,,314,314,314,314,314,314,314,,,314,,,,,,314,314,,314,314,314,314',
'314,314,314,314,314,,314,314,314,,314,314,,314,314,314,,,,,,,,,,,,,',
',,,,,,314,,,314,,,314,314,,,314,,314,,,,314,,,,,,,,314,,,,,314,314,314',
'314,314,314,,,,314,314,,,,,,,314,,,314,314,314,,,314,314,,,314,314,348',
'348,348,,348,,,,348,348,,,,348,,348,348,348,348,348,348,348,,,,,,348',
'348,348,348,348,348,348,,,348,,,,,,,348,,,348,348,348,348,348,348,348',
'348,,348,348,348,,348,348,,348,348,348,,,,,,,,,,,,,,,,,,,,348,,,348',
',,348,348,,,348,,,,,,348,,,,,,,,348,,,,,348,348,348,348,348,348,,,,348',
'348,,,,,,,348,,,348,348,348,,,348,348,,,348,348,350,350,350,,350,,,',
'350,350,,,,350,,350,350,350,350,350,350,350,,,,,,350,350,350,350,350',
'350,350,,,350,,,,,,,350,,,350,350,350,350,350,350,350,350,,350,350,350',
',350,350,,350,350,350,,,,,,,,,,,,,,,,,,,,350,,,350,350,,350,350,,,350',
',,,,,350,,,,,,,,350,,,,,350,350,350,350,350,350,,,,350,350,,,,,,,350',
',,350,350,350,,,350,350,,,350,350,354,354,354,,354,,,,354,354,,,,354',
',354,354,354,354,354,354,354,,,,,,354,354,354,354,354,354,354,,,354',
',,,,,,354,,,354,354,354,354,354,354,354,354,354,354,354,354,,354,354',
',354,354,354,,,,,,,,,,,,,,,,,,,,354,,,354,,,354,354,,,354,,354,,,,354',
',,,,,,,354,,,,,354,354,354,354,354,354,,,,354,354,,,,,,,354,,354,354',
'354,354,,,354,354,,,354,354,355,355,355,,355,,,,355,355,,,,355,,355',
'355,355,355,355,355,355,,,,,,355,355,355,355,355,355,355,,,355,,,,,',
',355,,,355,355,355,355,355,355,355,355,355,355,355,355,,355,355,,355',
'355,355,,,,,,,,,,,,,,,,,,,,355,,,355,,,355,355,,,355,,,,,,355,,,,,,',
',355,,,,,355,355,355,355,355,355,,,,355,355,,,,,,,355,,355,355,355,355',
',,355,355,,,355,355,362,362,362,,362,,,,362,362,,,,362,,362,362,362',
'362,362,362,362,,,,,,362,362,362,362,362,362,362,,,362,,,,,,,362,,,362',
'362,362,362,362,362,362,362,,362,362,362,,362,362,,362,362,362,,,,,',
',,,,,,,,,,,,,,362,,,362,,,362,362,,,362,,,,,,362,,,,,,,,362,,,,,362',
'362,362,362,362,362,,,,362,362,,,,,,,362,,,362,362,362,,,362,362,,,362',
'362,436,436,436,,436,,,,436,436,,,,436,,436,436,436,436,436,436,436',
',,,,,436,436,436,436,436,436,436,,,436,,,,,,,436,,,436,436,436,436,436',
'436,436,436,,436,436,436,,436,436,,436,436,436,,,,,,,,,,,,,,,,,,,,436',
',,436,,,436,436,,,436,,,,,,436,,,,,,,,436,,,,,436,436,436,436,436,436',
',,,436,436,,,,,,,436,,,436,436,436,,470,436,436,,,436,436,470,470,470',
',,470,470,470,749,470,749,749,749,749,749,,,,470,470,470,470,,,749,',
',,,470,470,,470,470,470,470,470,,,,,,,,,,749,,,,,,,,,,,749,749,,470',
'470,470,470,470,470,470,470,470,470,470,470,470,470,,,470,470,470,,',
'470,,,470,,,470,470,,470,749,470,,470,,470,470,470,470,470,470,470,',
'470,470,470,791,,791,791,791,791,791,,,,,,470,470,470,470,791,470,471',
'470,,,,,470,471,471,471,,470,471,471,471,,471,,,,791,,,,,471,471,471',
'471,791,791,791,791,,,,471,471,,471,471,471,471,471,,,,,,,,,,,,,,,,',
',,,,,791,,471,471,471,471,471,471,471,471,471,471,471,471,471,471,,',
'471,471,471,,,471,,,471,,,471,471,,471,,471,,471,,471,471,471,471,471',
'471,471,,471,471,471,,,,,,,,,,,,,471,471,471,471,,471,,471,,,,,471,',
'480,480,480,471,480,,,,480,480,,,,480,,480,480,480,480,480,480,480,',
',,,,480,480,480,480,480,480,480,,,480,,,,,,,480,,,480,480,480,480,480',
'480,480,480,480,480,480,480,,480,480,,480,480,480,,,,,,,,,,,,,,,,,,',
',480,,,480,,,480,480,,,480,,480,,480,,480,,,,,,,,480,,,,,480,480,480',
'480,480,480,,,,480,480,,,,,,,480,,480,480,480,480,,,480,480,,,480,480',
'482,482,482,,482,,,,482,482,,,,482,,482,482,482,482,482,482,482,,,,',
',482,482,482,482,482,482,482,,,482,,,,,,,482,,,482,482,482,482,482,482',
'482,482,,482,482,482,,482,482,,482,482,482,,,,,,,,,,,,,,,,,,,,482,,',
'482,,,482,482,,,482,,,,,,482,,,,,,,,482,,,,,482,482,482,482,482,482',
',,,482,482,,,,,,,482,,,482,482,482,,,482,482,,,482,482,483,483,483,',
'483,,,,483,483,,,,483,,483,483,483,483,483,483,483,,,,,,483,483,483',
'483,483,483,483,,,483,,,,,,,483,,,483,483,483,483,483,483,483,483,,483',
'483,483,,483,483,,483,483,483,,,,,,,,,,,,,,,,,,,,483,,,483,,,483,483',
',,483,,,,,,483,,,,,,,,483,,,,,483,483,483,483,483,483,,,,483,483,,,',
',,,483,,,483,483,483,,,483,483,,,483,483,484,484,484,,484,,,,484,484',
',,,484,,484,484,484,484,484,484,484,,,,,,484,484,484,484,484,484,484',
',,484,,,,,,,484,,,484,484,484,484,484,484,484,484,,484,484,484,,484',
'484,,484,484,484,,,,,,,,,,,,,,,,,,,,484,,,484,,,484,484,,,484,,,,,,484',
',,,,,,,484,,,,,484,484,484,484,484,484,,,,484,484,,,,,,,484,,,484,484',
'484,,510,484,484,,,484,484,510,510,510,,,510,510,510,792,510,792,792',
'792,792,792,,,,510,510,,,,,792,,,,,510,510,,510,510,510,510,510,,835',
',835,835,835,835,835,,792,,,,,,,,835,792,792,792,792,,,,,,,,,,,,,510',
',,,,835,,510,,,,,510,510,835,835,835,835,,,792,,,,,,,,,,,,,,510,510',
',,,,,,835,,,,,,510,,835,,,510,523,523,523,,523,,510,,523,523,,510,,523',
',523,523,523,523,523,523,523,,,,,,523,523,523,523,523,523,523,,,523',
',,,,,,523,,,523,523,523,523,523,523,523,523,523,523,523,523,,523,523',
',523,523,523,,,,,,,,,,,,,,,,,,,,523,,,523,,,523,523,,,523,,523,,523',
',523,,,,,,,,523,,,,,523,523,523,523,523,523,,,,523,523,,,,,,,523,,523',
'523,523,523,,,523,523,,,523,523,526,526,526,,526,,,,526,526,,,,526,',
'526,526,526,526,526,526,526,,,,,,526,526,526,526,526,526,526,,,526,',
',,,,,526,,,526,526,526,526,526,526,526,526,526,526,526,526,,526,526',
',526,526,526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,,,526,,526',
',,,,,,,526,,,,,526,526,526,526,526,526,,,,526,526,,,,,,,526,,526,526',
'526,526,,,526,526,,,526,526,528,528,528,,528,,,,528,528,,,,528,,528',
'528,528,528,528,528,528,,,,,,528,528,528,528,528,528,528,,,528,,,,,',
',528,,,528,528,528,528,528,528,528,528,,528,528,528,,528,528,,528,528',
'528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,,,,,,528,,,,,,,,528',
',,,,528,528,528,528,528,528,,,,528,528,,,,,,,528,,,528,528,528,,,528',
'528,,,528,528,534,534,534,534,534,,,,534,534,,,,534,,534,534,534,534',
'534,534,534,,,,,,534,534,534,534,534,534,534,,,534,,,,,,534,534,534',
'534,534,534,534,534,534,534,534,534,,534,534,534,,534,534,,534,534,534',
',,,,,,,,,,,,,,,,,,,534,,,534,,,534,534,,,534,,534,,,,534,,,,,,,,534',
',,,,534,534,534,534,534,534,,,,534,534,,,,,,534,534,,,534,534,534,,',
'534,534,,,534,534,543,543,543,,543,,,,543,543,,,,543,,543,543,543,543',
'543,543,543,,,,,,543,543,543,543,543,543,543,,,543,,,,,,,543,,,543,543',
'543,543,543,543,543,543,543,543,543,543,,543,543,,543,543,543,,,,,,',
',,,,,,,,,,,,,543,,,543,,,543,543,,,543,,543,,543,,543,,,,,,,,543,,,',
',543,543,543,543,543,543,,,,543,543,,,,,,,543,,543,543,543,543,,,543',
'543,,,543,543,555,555,555,,555,,,,555,555,,,,555,,555,555,555,555,555',
'555,555,,,,,,555,555,555,555,555,555,555,,,555,,,,,,,555,,,555,555,555',
'555,555,555,555,555,,555,555,555,,555,555,,555,555,555,,,,,,,,,,,,,',
',,,,,,555,,,555,,,555,555,,,555,,,,,,555,,,,,,,,555,,,,,555,555,555',
'555,555,555,,,,555,555,,,,,,,555,,,555,555,555,,,555,555,,,555,555,558',
'558,558,,558,,,,558,558,,,,558,,558,558,558,558,558,558,558,,,,,,558',
'558,558,558,558,558,558,,,558,,,,,,,558,,,558,558,558,558,558,558,558',
'558,,558,558,558,,558,558,,558,558,558,,,,,,,,,,,,,,,,,,,,558,,,558',
',,558,558,,,558,,,,,,558,,,,,,,,558,,,,,558,558,558,558,558,558,,,,558',
'558,,,,,,,558,,,558,558,558,,,558,558,,,558,558,592,592,592,,592,,,',
'592,592,,,,592,,592,592,592,592,592,592,592,,,,,,592,592,592,592,592',
'592,592,,,592,,,,,,,592,,,592,592,592,592,592,592,592,592,,592,592,592',
',592,592,,592,592,592,,,,,,,,,,,,,,,,,,,,592,,,592,,,592,592,,,592,',
',,,,592,,,,,,,,592,,,,,592,592,592,592,592,592,,,,592,592,,,,,,,592',
',,592,592,592,,,592,592,,,592,592,615,615,615,,615,,,,615,615,,,,615',
',615,615,615,615,615,615,615,,,,,,615,615,615,615,615,615,615,,,615',
',,,,,,615,,,615,615,615,615,615,615,615,615,615,615,615,615,,615,615',
',615,615,615,,,,,,,,,,,,,,,,,,,,615,,,615,,,615,615,,,615,,615,,615',
',615,,,,,,,,615,,,,,615,615,615,615,615,615,,,,615,615,,,,,,,615,,615',
'615,615,615,,,615,615,,,615,615,627,627,627,,627,,,,627,627,,,,627,',
'627,627,627,627,627,627,627,,,,,,627,627,627,627,627,627,627,,,627,',
',,,,,627,,,627,627,627,627,627,627,627,627,,627,627,627,,627,627,,627',
'627,627,,,,,,,,,,,,,,,,,,,,627,,,627,,,627,627,,,627,,,,,,627,,,,,,',
',627,,,,,627,627,627,627,627,627,,,,627,627,,,,,,,627,,,627,627,627',
',,627,627,,,627,627,633,633,633,,633,,,,633,633,,,,633,,633,633,633',
'633,633,633,633,,,,,,633,633,633,633,633,633,633,,,633,,,,,,,633,,,633',
'633,633,633,633,633,633,633,,633,633,633,,633,633,,633,633,633,,,,,',
',,,,,,,,,,,,,,633,,,633,,,633,633,,,633,,,,,,633,,,,,,,,633,,,,,633',
'633,633,633,633,633,,,,633,633,,,,,,,633,,,633,633,633,,,633,633,,,633',
'633,662,662,662,,662,,,,662,662,,,,662,,662,662,662,662,662,662,662',
',,,,,662,662,662,662,662,662,662,,,662,,,,,,,662,,,662,662,662,662,662',
'662,662,662,,662,662,662,,662,662,,662,662,662,,,,,,,,,,,,,,,,,,,,662',
',,662,,,662,662,,,662,,662,,,,662,,,,,,,,662,,,,,662,662,662,662,662',
'662,,,,662,662,,,,,,,662,,,662,662,662,,,662,662,,,662,662,663,663,663',
',663,,,,663,663,,,,663,,663,663,663,663,663,663,663,,,,,,663,663,663',
'663,663,663,663,,,663,,,,,,,663,,,663,663,663,663,663,663,663,663,,663',
'663,663,,663,663,,663,663,663,,,,,,,,,,,,,,,,,,,,663,,,663,,,663,663',
',,663,,,,,,663,,,,,,,,663,,,,,663,663,663,663,663,663,,,,663,663,,,',
',,,663,,,663,663,663,,,663,663,,,663,663,664,664,664,,664,,,,664,664',
',,,664,,664,664,664,664,664,664,664,,,,,,664,664,664,664,664,664,664',
',,664,,,,,,,664,,,664,664,664,664,664,664,664,664,664,664,664,664,,664',
'664,,664,664,664,,,,,,,,,,,,,,,,,,,,664,,,664,,,664,664,,,664,,664,',
'664,,664,,,,,,,,664,,,,,664,664,664,664,664,664,,,,664,664,,,,,,,664',
',664,664,664,664,,,664,664,,,664,664,667,667,667,667,667,,,,667,667',
',,,667,,667,667,667,667,667,667,667,,,,,,667,667,667,667,667,667,667',
',,667,,,,,,667,667,,667,667,667,667,667,667,667,667,667,,667,667,667',
',667,667,,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667,',
'667,,,,667,,,,,,,,667,,,,,667,667,667,667,667,667,,,,667,667,,,,,,,667',
',,667,667,667,,,667,667,,,667,667,668,668,668,,668,,,,668,668,,,,668',
',668,668,668,668,668,668,668,,,,,,668,668,668,668,668,668,668,,,668',
',,,,,,668,,,668,668,668,668,668,668,668,668,,668,668,668,,668,668,,668',
'668,668,,,,,,,,,,,,,,,,,,,,668,,,668,,,668,668,,,668,,,,,,668,,,,,,',
',668,,,,,668,668,668,668,668,668,,,,668,668,,,,,,,668,,,668,668,668',
',,668,668,,,668,668,671,671,671,,671,,,,671,671,,,,671,,671,671,671',
'671,671,671,671,,,,,,671,671,671,671,671,671,671,,,671,,,,,,,671,,,671',
'671,671,671,671,671,671,671,671,671,671,671,,671,671,,671,671,671,,',
',,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,671,,671,,671,,,,,,,,671',
',,,,671,671,671,671,671,671,,,,671,671,,,,,,,671,,671,671,671,671,,',
'671,671,,,671,671,672,672,672,,672,,,,672,672,,,,672,,672,672,672,672',
'672,672,672,,,,,,672,672,672,672,672,672,672,,,672,,,,,,,672,,,672,672',
'672,672,672,672,672,672,672,672,672,672,,672,672,,672,672,672,,,,,,',
',,,,,,,,,,,,,672,,,672,,,672,672,,,672,,,,672,,672,,,,,,,,672,,,,,672',
'672,672,672,672,672,,,,672,672,,,,,,,672,,672,672,672,672,,,672,672',
',,672,672,673,673,673,,673,,,,673,673,,,,673,,673,673,673,673,673,673',
'673,,,,,,673,673,673,673,673,673,673,,,673,,,,,,,673,,,673,673,673,673',
'673,673,673,673,,673,673,673,,673,673,,673,673,673,,,,,,,,,,,,,,,,,',
',,673,,,673,,,673,673,,,673,,,,,,673,,,,,,,,673,,,,,673,673,673,673',
'673,673,,,,673,673,,,,,,,673,,,673,673,673,,,673,673,,,673,673,674,674',
'674,,674,,,,674,674,,,,674,,674,674,674,674,674,674,674,,,,,,674,674',
'674,674,674,674,674,,,674,,,,,,,674,,,674,674,674,674,674,674,674,674',
',674,674,674,,674,674,,674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674',
'674,,,674,,,,,,674,,,,,,,,674,,,,,674,674,674,674,674,674,,,,674,674',
',,,,,,674,,,674,674,674,,,674,674,,,674,674,679,679,679,,679,,,,679',
'679,,,,679,,679,679,679,679,679,679,679,,,,,,679,679,679,679,679,679',
'679,,,679,,,,,,,679,,,679,679,679,679,679,679,679,679,,679,679,679,',
'679,679,,679,679,679,,,,,,,,,,,,,,,,,,,,679,,,679,,,679,679,,,679,,',
',,,679,,,,,,,,679,,,,,679,679,679,679,679,679,,,,679,679,,,,,,,679,',
',679,679,679,,,679,679,,,679,679,680,680,680,,680,,,,680,680,,,,680',
',680,680,680,680,680,680,680,,,,,,680,680,680,680,680,680,680,,,680',
',,,,,,680,,,680,680,680,680,680,680,680,680,,680,680,680,,680,680,,680',
'680,680,,,,,,,,,,,,,,,,,,,,680,,,680,,,680,680,,,680,,,,,,680,,,,,,',
',680,,,,,680,680,680,680,680,680,,,,680,680,,,,,,,680,,,680,680,680',
',,680,680,,,680,680,704,704,704,,704,,,,704,704,,,,704,,704,704,704',
'704,704,704,704,,,,,,704,704,704,704,704,704,704,,,704,,,,,,,704,,,704',
'704,704,704,704,704,704,704,,704,704,704,,704,704,,704,704,704,,,,,',
',,,,,,,,,,,,,,704,,,704,,,704,704,,,704,,,,,,704,,,,,,,,704,,,,,704',
'704,704,704,704,704,,,,704,704,,,,,,,704,,,704,704,704,,,704,704,,,704',
'704,707,707,707,,707,,,,707,707,,,,707,,707,707,707,707,707,707,707',
',,,,,707,707,707,707,707,707,707,,,707,,,,,,,707,,,707,707,707,707,707',
'707,707,707,,707,707,707,,707,707,,707,707,707,,,,,,,,,,,,,,,,,,,,707',
',,707,,,707,707,,,707,,,,,,707,,,,,,,,707,,,,,707,707,707,707,707,707',
',,,707,707,,,,,,,707,,,707,707,707,,,707,707,,,707,707,722,722,722,',
'722,,,,722,722,,,,722,,722,722,722,722,722,722,722,,,,,,722,722,722',
'722,722,722,722,,,722,,,,,,,722,,,722,722,722,722,722,722,722,722,,722',
'722,722,,722,722,,722,722,722,,,,,,,,,,,,,,,,,,,,722,,,722,,,722,722',
',,722,,,,,,722,,,,,,,,722,,,,,722,722,722,722,722,722,,,,722,722,,,',
',,,722,,,722,722,722,,,722,722,,,722,722,727,727,727,,727,,,,727,727',
',,,727,,727,727,727,727,727,727,727,,,,,,727,727,727,727,727,727,727',
',,727,,,,,,,727,,,727,727,727,727,727,727,727,727,,727,727,727,,727',
'727,,727,727,727,,,,,,,,,,,,,,,,,,,,727,,,727,,,727,727,,,727,,727,',
',,727,,,,,,,,727,,,,,727,727,727,727,727,727,,,,727,727,,,,,,,727,,',
'727,727,727,,,727,727,,,727,727,732,732,732,,732,,,,732,732,,,,732,',
'732,732,732,732,732,732,732,,,,,,732,732,732,732,732,732,732,,,732,',
',,,,,732,,,732,732,732,732,732,732,732,732,732,732,732,732,,732,732',
',732,732,732,,,,,,,,,,,,,,,,,,,,732,,,732,,,732,732,,,732,,732,,,,732',
',,,,,,,732,,,,,732,732,732,732,732,732,,,,732,732,,,,,,,732,,732,732',
'732,732,,,732,732,,,732,732,735,735,735,,735,,,,735,735,,,,735,,735',
'735,735,735,735,735,735,,,,,,735,735,735,735,735,735,735,,,735,,,,,',
',735,,,735,735,735,735,735,735,735,735,735,735,735,735,,735,735,,735',
'735,735,,,,,,,,,,,,,,,,,,,,735,,,735,,,735,735,,,735,,,,,,735,,,,,,',
',735,,,,,735,735,735,735,735,735,,,,735,735,,,,,,,735,,735,735,735,735',
',,735,735,,,735,735,751,751,751,,751,,,,751,751,,,,751,,751,751,751',
'751,751,751,751,,,,,,751,751,751,751,751,751,751,,,751,,,,,,,751,,,751',
'751,751,751,751,751,751,751,,751,751,751,,751,751,,751,751,751,,,,,',
',,,,,,,,,,,,,,751,,,751,,,751,751,,,751,,,,,,751,,,,,,,,751,,,,,751',
'751,751,751,751,751,,,,751,751,,,,,,,751,,,751,751,751,,,751,751,,,751',
'751,772,772,772,,772,,,,772,772,,,,772,,772,772,772,772,772,772,772',
',,,,,772,772,772,772,772,772,772,,,772,,,,,,,772,,,772,772,772,772,772',
'772,772,772,,772,772,772,,772,772,,772,772,772,,,,,,,,,,,,,,,,,,,,772',
',,772,,,772,772,,,772,,772,,,,772,,,,,,,,772,,,,,772,772,772,772,772',
'772,,,,772,772,,,,,,,772,,,772,772,772,,,772,772,,,772,772,784,784,784',
',784,,,,784,784,,,,784,,784,784,784,784,784,784,784,,,,,,784,784,784',
'784,784,784,784,,,784,,,,,,,784,,,784,784,784,784,784,784,784,784,784',
'784,784,784,,784,784,,784,784,784,,,,,,,,,,,,,,,,,,,,784,,,784,,,784',
'784,,,784,,784,,784,,784,,,,,,,,784,,,,,784,784,784,784,784,784,,,,784',
'784,,,,,,,784,,784,784,784,784,,,784,784,,,784,784,806,806,806,,806',
',,,806,806,,,,806,,806,806,806,806,806,806,806,,,,,,806,806,806,806',
'806,806,806,,,806,,,,,,,806,,,806,806,806,806,806,806,806,806,,806,806',
'806,,806,806,,806,806,806,,,,,,,,,,,,,,,,,,,,806,,,806,,,806,806,,,806',
',,,,,806,,,,,,,,806,,,,,806,806,806,806,806,806,,,,806,806,,,,,,,806',
',,806,806,806,,,806,806,,,806,806,814,814,814,,814,,,,814,814,,,,814',
',814,814,814,814,814,814,814,,,,,,814,814,814,814,814,814,814,,,814',
',,,,,,814,,,814,814,814,814,814,814,814,814,,814,814,814,,814,814,,814',
'814,814,,,,,,,,,,,,,,,,,,,,814,,,814,,,814,814,,,814,,,,,,814,,,,,,',
',814,,,,,814,814,814,814,814,814,,,,814,814,,,,,,,814,,,814,814,814',
',,814,814,,,814,814,827,827,827,,827,,,,827,827,,,,827,,827,827,827',
'827,827,827,827,,,,,,827,827,827,827,827,827,827,,,827,,,,,,,827,,,827',
'827,827,827,827,827,827,827,,827,827,827,,827,827,,827,827,827,,,,,',
',,,,,,,,,,,,,,827,,,827,,,827,827,,,827,,,,,,827,,,,,,,,827,,,,,827',
'827,827,827,827,827,,,,827,827,,,,,,,827,,,827,827,827,,,827,827,,,827',
'827,828,828,828,,828,,,,828,828,,,,828,,828,828,828,828,828,828,828',
',,,,,828,828,828,828,828,828,828,,,828,,,,,,,828,,,828,828,828,828,828',
'828,828,828,,828,828,828,,828,828,,828,828,828,,,,,,,,,,,,,,,,,,,,828',
',,828,,,828,828,,,828,,,,,,828,,,,,,,,828,,,,,828,828,828,828,828,828',
',,,828,828,,,,,,,828,,,828,828,828,,,828,828,,,828,828,829,829,829,',
'829,,,,829,829,,,,829,,829,829,829,829,829,829,829,,,,,,829,829,829',
'829,829,829,829,,,829,,,,,,,829,,,829,829,829,829,829,829,829,829,,829',
'829,829,,829,829,,829,829,829,,,,,,,,,,,,,,,,,,,,829,,,829,,,829,829',
',,829,,,,,,829,,,,,,,,829,,,,,829,829,829,829,829,829,,,,829,829,,,',
',,,829,,,829,829,829,,,829,829,,,829,829,830,830,830,,830,,,,830,830',
',,,830,,830,830,830,830,830,830,830,,,,,,830,830,830,830,830,830,830',
',,830,,,,,,,830,,,830,830,830,830,830,830,830,830,,830,830,830,,830',
'830,,830,830,830,,,,,,,,,,,,,,,,,,,,830,,,830,,,830,830,,,830,,,,,,830',
',,,,,,,830,,,,,830,830,830,830,830,830,,,,830,830,,,,,,,830,,,830,830',
'830,,,830,830,,,830,830,832,832,832,,832,,,,832,832,,,,832,,832,832',
'832,832,832,832,832,,,,,,832,832,832,832,832,832,832,,,832,,,,,,,832',
',,832,832,832,832,832,832,832,832,,832,832,832,,832,832,,832,832,832',
',,,,,,,,,,,,,,,,,,,832,,,832,,,832,832,,,832,,,,,,832,,,,,,,,832,,,',
',832,832,832,832,832,832,,,,832,832,,,,,,,832,,,832,832,832,,,832,832',
',,832,832,889,889,889,,889,,,,889,889,,,,889,,889,889,889,889,889,889',
'889,,,,,,889,889,889,889,889,889,889,,,889,,,,,,,889,,,889,889,889,889',
'889,889,889,889,,889,889,889,,889,889,,889,889,889,,,,,,,,,,,,,,,,,',
',,889,,,889,,,889,889,,,889,,,,,,889,,,,,,,,889,,,,,889,889,889,889',
'889,889,,,,889,889,,,,,,,889,,,889,889,889,,,889,889,,,889,889,903,903',
'903,,903,,,,903,903,,,,903,,903,903,903,903,903,903,903,,,,,,903,903',
'903,903,903,903,903,,,903,,,,,,,903,,,903,903,903,903,903,903,903,903',
',903,903,903,,903,903,,903,903,903,,,,,,,,,,,,,,,,,,,,903,,,903,,,903',
'903,,,903,,,,,,903,,,,,,,,903,,,,,903,903,903,903,903,903,,,,903,903',
',,,,,,903,,,903,903,903,,,903,903,,,903,903,923,923,923,,923,,,,923',
'923,,,,923,,923,923,923,923,923,923,923,,,,,,923,923,923,923,923,923',
'923,,,923,,,,,,,923,,,923,923,923,923,923,923,923,923,923,923,923,923',
',923,923,,923,923,923,,,,,,,,,,,,,,,,,,,,923,,,923,,,923,923,,,923,',
',,923,,923,,,,,,,,923,,,,,923,923,923,923,923,923,,,,923,923,,,,,,,923',
',923,923,923,923,,,923,923,,,923,923,924,924,924,,924,,,,924,924,,,',
'924,,924,924,924,924,924,924,924,,,,,,924,924,924,924,924,924,924,,',
'924,,,,,,,924,,,924,924,924,924,924,924,924,924,,924,924,924,,924,924',
',924,924,924,,,,,,,,,,,,,,,,,,,,924,,,924,,,924,924,,,924,,,,,,924,',
',,,,,,924,,,,,924,924,924,924,924,924,,,,924,924,,,,,,,924,,,924,924',
'924,,,924,924,,,924,924,971,971,971,,971,,,,971,971,,,,971,,971,971',
'971,971,971,971,971,,,,,,971,971,971,971,971,971,971,,,971,,,,,,,971',
',,971,971,971,971,971,971,971,971,,971,971,971,,971,971,,971,971,971',
',,,,,,,,,,,,,,,,,,,971,,,971,,,971,971,,,971,,971,,,,971,,,,,,,,971',
',,,,971,971,971,971,971,971,,,,971,971,,,,,,,971,,,971,971,971,,,971',
'971,,,971,971,1045,1045,1045,,1045,,,,1045,1045,,,,1045,,1045,1045,1045',
'1045,1045,1045,1045,,,,,,1045,1045,1045,1045,1045,1045,1045,,,1045,',
',,,,,1045,,,1045,1045,1045,1045,1045,1045,1045,1045,1045,1045,1045,1045',
',1045,1045,,1045,1045,1045,,,,,,,,,,,,,,,,,,,,1045,,,1045,,,1045,1045',
',,1045,,1045,,1045,,1045,,,,,,,,1045,,,,,1045,1045,1045,1045,1045,1045',
',,,1045,1045,,,,,,,1045,,1045,1045,1045,1045,,,1045,1045,,,1045,1045',
'37,37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37',
'37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37',
',,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37',
'37,37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38',
',,,38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38',
',,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,',
'38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,',
',38,,,38,,,38,38,38,,,38,38,74,74,74,,74,,,,74,74,,,,74,,74,74,74,74',
'74,74,74,,,,,,74,74,74,74,74,74,74,,,74,,,,,,,74,,,74,74,74,74,74,74',
'74,74,,74,74,74,,74,74,,,,74,,,,,,,,,,,,,,,,,,,,74,,,74,,,74,74,,,74',
',74,,,,,,,,,,,,,,,,,74,74,74,74,74,74,,,,74,74,,,,,,,74,,,74,74,74,',
',74,74,322,322,322,,322,,,,322,322,,,,322,,322,322,322,322,322,322,322',
',,,,,322,322,322,322,322,322,322,,,322,,,,,,,322,,,322,322,322,322,322',
'322,322,322,,322,322,322,,322,322,,,,322,,,,,,,,,,,,,,,,,,,,322,,,322',
',,322,322,,,322,,,,,,,,,,,,,,,,,,,322,322,322,322,322,322,,,,322,322',
',,,322,,,322,,,322,322,322,,,322,322,339,339,339,,339,,,,339,339,,,',
'339,,339,339,339,339,339,339,339,,,,,,339,339,339,339,339,339,339,,',
'339,,,,,,,339,,,339,339,339,339,339,339,339,339,,339,339,339,,339,339',
',,,339,,,,,,,,,,,,,,,,,,,,339,,,339,,,339,339,,,339,,,,,,,,,,,,,,,,',
',,339,339,339,339,339,339,,,,339,339,,,,,,,339,,,339,339,339,,,339,339',
'376,376,376,,376,,,,376,376,,,,376,,376,376,376,376,376,376,376,,,,',
',376,376,376,376,376,376,376,,,376,,,,,,,376,,,376,376,376,376,376,376',
'376,376,,376,376,376,,376,376,,,,376,,,,,,,,,,,,,,,,,,,,376,,,376,,',
'376,376,,,376,,,,,,,,,,,,,,,,,,,376,376,376,376,376,376,,,,376,376,',
',,,,,376,,,376,376,376,,,376,376,378,378,378,,378,,,,378,378,,,,378',
',378,378,378,378,378,378,378,,,,,,378,378,378,378,378,378,378,,,378',
',,,,,,378,,,378,378,378,378,378,378,378,378,,378,378,378,,378,378,,',
',378,,,,,,,,,,,,,,,,,,,,378,,,378,,,378,378,,,378,,,,,,,,,,,,,,,,,,',
'378,378,378,378,378,378,,,,378,378,,,,,,,378,,,378,378,378,,,378,378',
'541,541,541,,541,,,,541,541,,,,541,,541,541,541,541,541,541,541,,,,',
',541,541,541,541,541,541,541,,,541,,,,,,,541,,,541,541,541,541,541,541',
'541,541,,541,541,541,,541,541,,,,541,,,,,,,,,,,,,,,,,,,,541,,,541,,',
'541,541,,,541,,,,,,,,,,,,,,,,,,,541,541,541,541,541,541,,,,541,541,',
',,,,,541,,,541,541,541,,,541,541,549,549,549,,549,,,,549,549,,,,549',
',549,549,549,549,549,549,549,,,,,,549,549,549,549,549,549,549,,,549',
',,,,,,549,,,549,549,549,549,549,549,549,549,,549,549,549,,549,549,,',
',549,,,,,,,,,,,,,,,,,,,,549,,,549,,,549,549,,,549,,,,,,,,,,,,,,,,,,',
'549,549,549,549,549,549,,,,549,549,,,,,,,549,,,549,549,549,,,549,549',
'710,710,710,,710,,,,710,710,,,,710,,710,710,710,710,710,710,710,,,,',
',710,710,710,710,710,710,710,,,710,,,,,,,710,,,710,710,710,710,710,710',
'710,710,,710,710,710,,710,710,,,,710,,,,,,,,,,,,,,,,,,,,710,,,710,,',
'710,710,,,710,,,,,,,,,,,,,,,,,,,710,710,710,710,710,710,,,,710,710,',
',,,,,710,,,710,710,710,,,710,710,721,721,721,,721,,,,721,721,,,,721',
',721,721,721,721,721,721,721,,,,,,721,721,721,721,721,721,721,,,721',
',,,,,,721,,,721,721,721,721,721,721,721,721,,721,721,721,,721,721,,',
',721,,,,,,,,,,,,,,,,,,,,721,,,721,,,721,721,,,721,,,,,,,,,,,,,,,,,,',
'721,721,721,721,721,721,,,,721,721,,,,,,,721,,,721,721,721,,,721,721',
'936,936,936,,936,,,,936,936,,,,936,,936,936,936,936,936,936,936,,,,',
',936,936,936,936,936,936,936,,,936,,,,,,,936,,,936,936,936,936,936,936',
'936,936,,936,936,936,,936,936,,,,936,,,,,,,,,,,,,,,,,,,,936,,,936,,',
'936,936,,,936,,,,,,,,,,,,,,,,,,,936,936,936,936,936,936,,,,936,936,',
',,,,,936,,,936,936,936,,,936,936,945,945,945,,945,,,,945,945,,,,945',
',945,945,945,945,945,945,945,,,,,,945,945,945,945,945,945,945,,,945',
',,,,,,945,,,945,945,945,945,945,945,945,945,,945,945,945,,945,945,,',
',945,,,,,,,,,,,,,,,,,,,,945,,,945,,,945,945,,,945,,,,,,,,,,,,,,,,,,',
'945,945,945,945,945,945,,,,945,945,,,,,,,945,,,945,945,945,,,945,945',
'996,996,996,,996,,,,996,996,,,,996,,996,996,996,996,996,996,996,,,,',
',996,996,996,996,996,996,996,,,996,,,,,,,996,,,996,996,996,996,996,996',
'996,996,,996,996,996,,996,996,,,,996,,,,,,,,,,,,,,,,,,,,996,,,996,,',
'996,996,,,996,,,,,,,,,,,,,,,,,,,996,996,996,996,996,996,,,,996,996,',
',,,,,996,,,996,996,996,,,996,996,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11',
',,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11',
'11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11',
'11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,,,,,11,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12',
'12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12',
',12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12',
'12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,,,,,12',
'77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77',
'77,,,,77,77,77,77,77,77,77,77,77,77,,,,,,77,77,77,77,77,77,77,77,77',
'77,77,77,,77,,,,,,,77,77,,77,77,77,77,77,77,77,,,77,77,,,,77,77,77,77',
',,,,,77,,,,,,,,77,77,,77,77,77,77,77,77,77,77,77,77,77,,,77,,,,,,,,',
',,,,,,,,,,,77,,,,,77,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,,,,105,105,105,105,105',
'105,105,105,105,105,,,,,,105,105,105,105,105,105,105,105,105,105,105',
'105,,105,,,,,,,105,105,,105,105,105,105,105,105,105,,,105,105,,,,105',
'105,105,105,,,,,,,,,,,,,,105,105,,105,105,105,105,105,105,105,105,105',
'105,105,,,105,,,,,,,,,,,,,,,,,,,,105,,,,,105,427,427,427,427,427,427',
'427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427',
'427,,,,427,427,427,427,427,427,427,427,427,427,,,,,,427,427,427,427',
'427,427,427,427,427,,,427,,,,,,,,,427,427,,427,427,427,427,427,427,427',
',,427,427,,,,427,427,427,427,,,,,,,,,,,,,,427,427,,427,427,427,427,427',
'427,427,427,427,427,427,,,427,427,,,,,,,,,,427,,,,,,,,,427,,,,,427,659',
'659,659,659,659,659,659,659,659,659,659,659,659,659,659,659,659,659',
'659,659,659,659,659,659,,,,659,659,659,659,659,659,659,659,659,659,',
',,,,659,659,659,659,659,659,659,659,659,,,659,,,,,,,,,659,659,,659,659',
'659,659,659,659,659,,,659,659,,,,659,659,659,659,,,,,,,,,,,,,,659,659',
',659,659,659,659,659,659,659,659,659,659,659,,,659,659,,,,,,,,,,659',
',,,,,,,,659,,,,,659,793,793,793,793,793,793,793,793,793,793,793,793',
'793,793,793,793,793,793,793,793,793,793,793,793,,,,793,793,793,793,793',
'793,793,793,793,793,,,,,,793,793,793,793,793,793,793,793,793,,,793,',
',,,,,,,793,793,,793,793,793,793,793,793,793,,,793,793,,,,793,793,793',
'793,,,,,,,,,,,,,,793,793,,793,793,793,793,793,793,793,793,793,793,793',
',,793,,,,,,,,,,231,231,,,231,,,,,,793,,,231,231,793,231,231,231,231',
'231,231,231,,,231,231,,,,231,231,231,231,,,,,,231,,,,,,,,231,231,,231',
'231,231,231,231,231,231,231,231,231,231,,,231,,,,,,,,,,232,232,,,232',
',,,,,231,,,232,232,231,232,232,232,232,232,232,232,,,232,232,,,,232',
'232,232,232,,,,,,232,,,,,,,,232,232,,232,232,232,232,232,232,232,232',
'232,232,232,,953,232,953,953,953,953,953,,,,,281,281,,,281,953,,,,,232',
',,281,281,232,281,281,281,281,281,281,281,,,281,281,953,,,281,281,281',
'281,,,953,953,953,953,,,,,,,,281,281,,281,281,281,281,281,281,281,281',
'281,281,281,,,281,,,,,,,,,953,478,478,,,478,,,,,,281,,,478,478,281,478',
'478,478,478,478,478,478,,,478,478,,,,478,478,478,478,,,,,,478,,,,,,',
',478,478,,478,478,478,478,478,478,478,478,478,478,478,,,478,,,,,,,,',
',479,479,,,479,,,,,,478,,,479,479,478,479,479,479,479,479,479,479,,',
'479,479,,,,479,479,479,479,,,,,,479,,,,,,,,479,479,,479,479,479,479',
'479,479,479,479,479,479,479,,,479,,,,,,,,,,544,544,,,544,,,,,,479,,',
'544,544,479,544,544,544,544,544,544,544,,,544,544,,,,544,544,544,544',
',,,,,544,,,,,,,,544,544,,544,544,544,544,544,544,544,544,544,544,544',
',,544,,,,,,,,,,545,545,,,545,,,,,,544,,,545,545,544,545,545,545,545',
'545,545,545,,,545,545,,,,545,545,545,545,,,,,,545,,,,,,,,545,545,,545',
'545,545,545,545,545,545,545,545,545,545,,,545,,,,,,,,,,553,553,,,553',
',,,,,545,,,553,553,545,553,553,553,553,553,553,553,,,553,553,,,,553',
'553,553,553,,,,,,553,,,,,,,,553,553,,553,553,553,553,553,553,553,553',
'553,553,553,,,553,,,,,,,,,,554,554,,,554,,,,,,553,,,554,554,553,554',
'554,554,554,554,554,554,,,554,554,,,,554,554,554,554,,,,,,554,,,,,,',
',554,554,,554,554,554,554,554,554,554,554,554,554,554,,,554,,,,,,,,',
',616,616,,,616,,,,,,554,,,616,616,554,616,616,616,616,616,616,616,,',
'616,616,,,,616,616,616,616,,,,,,616,,,,,,,,616,616,,616,616,616,616',
'616,616,616,616,616,616,616,,,616,,,,,,,,,,617,617,,,617,,,,,,616,,',
'617,617,616,617,617,617,617,617,617,617,,,617,617,,,,617,617,617,617',
',,,,,617,,,,,,,,617,617,,617,617,617,617,617,617,617,617,617,617,617',
',,617,,,,,,,,,,665,665,,,665,,,,,,617,,,665,665,617,665,665,665,665',
'665,665,665,,,665,665,,,,665,665,665,665,,,,,,665,,,,,,,,665,665,,665',
'665,665,665,665,665,665,665,665,665,665,,,665,,,,,,,,,,666,666,,,666',
',,,,,665,,,666,666,665,666,666,666,666,666,666,666,,,666,666,,,,666',
'666,666,666,,,,,,666,,,,,,,,666,666,,666,666,666,666,666,666,666,666',
'666,666,666,,,666,,,,,,,,,,782,782,,,782,,,,,,666,,,782,782,666,782',
'782,782,782,782,782,782,,,782,782,,,,782,782,782,782,,,,,,782,,,,,,',
',782,782,,782,782,782,782,782,782,782,782,782,782,782,,,782,,,,,,,,',
',783,783,,,783,,,,,,782,,,783,783,782,783,783,783,783,783,783,783,,',
'783,783,,,,783,783,783,783,,,,,,783,,,,,,,,783,783,,783,783,783,783',
'783,783,783,783,783,783,783,,,783,,,,,,,,,,1041,1041,,,1041,,,,,,783',
',,1041,1041,783,1041,1041,1041,1041,1041,1041,1041,,,1041,1041,,,,1041',
'1041,1041,1041,,,,,,1041,,,,,,,,1041,1041,,1041,1041,1041,1041,1041',
'1041,1041,1041,1041,1041,1041,,,1041,,,,,,,,,,1046,1046,,,1046,,,,,',
'1041,,,1046,1046,1041,1046,1046,1046,1046,1046,1046,1046,,,1046,1046',
',,,1046,1046,1046,1046,,,,,,1046,,,,,,,,1046,1046,,1046,1046,1046,1046',
'1046,1046,1046,1046,1046,1046,1046,,,1046,955,,955,955,955,955,955,',
',1047,1047,,,1047,,,955,,,1046,,,1047,1047,1046,1047,1047,1047,1047',
'1047,1047,1047,,,1047,1047,,,955,1047,1047,1047,1047,,,,,,1047,955,955',
',,,,,1047,1047,,1047,1047,1047,1047,1047,1047,1047,1047,1047,1047,1047',
',957,1047,957,957,957,957,957,,,,,,955,,,,957,,,,,1047,,,,959,1047,959',
'959,959,959,959,,,,,,,957,,987,959,987,987,987,987,987,,,957,957,,,',
',990,987,990,990,990,990,990,,959,,,,,,,,990,,,959,959,,,987,,,,,957',
',,,987,987,987,987,,,990,992,,992,992,992,992,992,,990,990,990,990,',
',959,1051,992,1051,1051,1051,1051,1051,,,,,,,,987,1065,1051,1065,1065',
'1065,1065,1065,,992,,,,,,990,,1065,,,992,992,,,1051,1067,,1067,1067',
'1067,1067,1067,,,,1051,1051,,,1065,1069,1067,1069,1069,1069,1069,1069',
',1065,1065,1065,1065,,,992,1071,1069,1071,1071,1071,1071,1071,,1067',
',,,,,1051,,1071,,,1067,1067,,,1069,,,,,,1065,,,,,1069,1069,,,1071,1094',
',1094,1094,1094,1094,1094,,,,1071,1071,,,1067,,1094,,,,,,,,,,,,,1069',
',,,,,,,,1094,,,,,,1071,,,,,1094,1094,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',1094' ]
        racc_action_check = arr = ::Array.new(27103, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    21,  1043,    34,   nil,   -96,   nil,   nil,  5247,  1028,
   nil, 24547, 24685,   -46,   nil,   -47,     6,   573,   103,   203,
   -31,   nil,   -73,  5391,  1333,   191,   nil,   -47,   nil,   200,
  5530,  5658,  5788,  5932,  6076,   nil,  1188, 22587, 22727,   nil,
   101,   327,   454,   189,  6220,  6364,   127,  6508,  6652,   669,
  6796,   136,   428,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  6935,   nil,  7077,   nil,   nil,   -23,   nil,  7221,
  7365,   nil,   nil,  7509, 22867,   193,   nil, 24823,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -64,   nil,   nil,   nil,   nil,   nil,
   nil,   181,   183,   187,   189, 24961,   nil,   nil,   nil,   nil,
   nil,   nil,     0,   nil,   nil,   132,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  7653,   nil,
   nil,   nil,   nil,  7797,  7941,  8085,  8229,  8373,   213,   nil,
   865,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   221,   nil,  1333,  8517,  8661,  8805,  8949,  9093,
  9237, 25448, 25521,   nil,   nil,  9381,  9525,  9669,   nil,   nil,
   430,   135,   212,   299,   229,   209,   277,   nil,  9813,  1478,
   288,  9957, 10101, 10245, 10389, 10533, 10677, 10821, 10965, 11109,
 11253, 11397, 11541, 11685, 11829, 11973, 12117, 12261, 12405, 12549,
 12693, 12837, 12981,   nil,   nil,   nil,   nil, 13125,   nil,   nil,
   nil, 25594,   nil,   nil,   283, 13269,   nil,   nil,   294,   nil,
   nil,   nil, 13413,   nil,   nil, 13557,   nil,  1478,   nil,   274,
   308,   nil, 13701,   358, 13845,   nil,   nil, 13989, 14133,   nil,
   nil,   121,   nil,   nil, 14277,  1173,   nil,   307,  1623,   352,
   393,   363, 23007,  1768,   431,   432,   459,   439,   473,   nil,
   412,   386,   -19,   nil,   nil,   nil,   441,   247,   425, 23147,
   nil,   558,   487,  2203,  2348,   497,   nil,   499, 14421,   nil,
 14565,  1913,  1318,   442, 14709, 14853,   nil,   nil,   583,   638,
   -11,    -9, 14997,  2058,  2203,   453,   566,   481,   -19,    21,
   492,   563,    22,   596,   nil,   nil, 23287,   nil, 23427,   -53,
   206,   245,   365,   403,   464,   491,   500,   577,   nil,   592,
   nil,   nil,   nil,   nil,   nil,   302,   nil,   520,   nil,   206,
   nil,   521,   652,   nil,   534,   nil,   563,   -42,   nil,   567,
   -31,   nil,   684,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil, 25099,   nil,   nil,
   nil,   nil,   594,   nil,   nil,   581, 15141,   604,   nil,   nil,
   605,   nil,   528,   239,   753,   nil,   nil,  1043,   nil,   nil,
   nil,   nil,   nil,  1188,   676,   nil,   nil,   689,   693,   567,
   569,  7077,   nil,   nil,   nil,   264,   392,   750,   nil,   nil,
 15280, 15412,   nil,   nil,   nil,   -14,   nil,   752, 25667, 25740,
 15550,   266, 15694, 15838, 15982,  2493,  2638,   777,  1070,   779,
   783,   798,   803,  4088,  4233,  3967,  2783,  2928,  3073,  3218,
  3363,  3508,   871,   927,  3653,  3798,  1623,   862,   863,   nil,
 16121,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   748,
   753,   nil,   nil, 16251,   nil,   nil, 16395,   nil, 16539,   nil,
   172,   nil,   nil,   nil, 16683,  1463,   758,   757,   nil,   nil,
   772, 23567,   778, 16827, 25813, 25886,   591,   818,   nil, 23707,
   785,   nil,   829, 25959, 26032, 16971,  3943,  1768, 17115,   910,
   921,   806,   nil,   nil,   160,   283,   838,   822,   nil,   329,
   848,   nil,   715,   nil,   810,   811,   nil,   813,   815,   818,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   810,   784,
   nil,   nil, 17259,   nil,   nil,   nil,   913,   nil,   nil,   nil,
   918,   nil,   nil,   921,  2348,   966,   nil,  2493,    35,   984,
   996,   991,   999,   nil,   nil, 17403, 26105, 26178,    25,   nil,
   267,   304,   247,   nil,   619,   nil,   902, 17547,   nil,   920,
   nil,   nil,   nil, 17691,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   300,   nil,   nil,   688,   nil,
   nil,   nil,   882,   nil,   nil,   884,   nil,  2638,   nil, 25237,
   nil,   893, 17835, 17979, 18123, 26251, 26324, 18267, 18411,   701,
   932, 18555, 18699, 18843, 18987,   931,   nil,   nil,   nil, 19131,
 19275,   932,   nil,   nil,   nil,   279,   294,   520,   652,   908,
   907,   nil,   -65,  1010,   -10,   nil,   927,   nil,  1033,   nil,
   nil,   922,   nil,   964, 19419,   nil,   nil, 19563,   nil,   -96,
 23847,   927,   nil,   931,    -5,    23,   992,    95,   621,  1009,
   974, 23987, 19707,  1039,   157,   220,   nil, 19851,   nil,   nil,
   nil,   nil, 19995,   nil,   nil, 20139,   nil,   nil,   nil,    22,
   995,   318,   nil,   nil,   600,  5494,   nil,  6899,   nil, 15244,
   nil, 20283,   nil,   845,   nil,   995,   267,   999,   nil,   nil,
   nil,   nil,   773,   nil,  1114,   nil,   nil,   nil,   nil,   nil,
  1121,   nil, 20427,  1005,    34,    35,   156,   167,  2783,   nil,
   624,   nil, 26397, 26470, 20571,   nil,   nil,   nil,   795,  2928,
  3073, 15343, 16085, 25375,   161,  1026,  3218,   nil,   nil,   323,
   nil,   nil,   nil,  1020,   nil,  1005, 20715,  1012,   310,   340,
   784,   912,   nil,  1913, 20859,   nil,  1011,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil, 21003, 21147, 21291,
 21435,   364, 21579,   nil,   nil, 16115,   nil,  3363,   nil,   nil,
  1030,   nil,   -55,   nil,   nil,   nil,   nil,  1026,    66,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  3508,   nil,  1027,  1069,
   nil,   nil,   414,   nil,  3653,  3798,  1033,  1039,  1037,   nil,
   nil,   nil,  1042,  1047,   nil,  1048,  1052,   nil,  1053,   nil,
   nil,  1059,   852,  1057,   947,   nil,  1186,   nil,   nil, 21723,
   nil,  3943,  1187,   nil,   nil,    36,    58,  1188,   395,   660,
   nil,  1074,  4088, 21867,   577,  1192,   nil,  1076,   663,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1066,   nil,   nil,  1095,
   403,   nil,   nil, 22011, 22155,  2058,  1096,  1098,   nil,  1099,
  1100,  1101,   nil,  1135,  1122,  1104, 24127,   nil,   nil,   nil,
   nil,  4233,  4378,   nil,    -8, 24267,   nil,   nil,  1153,  1260,
   905,   nil,   nil, 25583,   nil, 26680,   nil, 26751,   nil, 26776,
   nil,   nil,   nil,   nil,   385,  2769,  1141,   nil,    -1,   nil,
   nil, 22299,  4523,   nil,   nil,  1264,   716,   nil,   nil,  1266,
   nil,   nil,  1186,   nil,   348,   nil,   nil, 26791,   nil,   nil,
 26806,   nil, 26845,   nil,   nil,  1169, 24407,   723,  1224,   nil,
  1274,  4668,    50,    51,   734,  1228,    52,   nil,   nil,   nil,
   426,   nil,   nil,   nil,  1156,  1159,  1171,  1172,  1173,  2914,
  1180,  3059,  4813,   nil,    41,   nil,   nil,  4958,   nil,  5103,
  1181,   nil,   nil,  1182,  1185,  1187,  1188,   nil,  1189,   nil,
   751, 26543,   nil,   nil,  1312, 22443, 26616, 26689,    53,   nil,
  1319, 26860,   nil,   nil,   nil,   nil,  3204,  1192,   820,   nil,
   nil,   nil,  1313,  1317,   nil, 26875,   nil, 26899,   nil, 26914,
   nil, 26929,   nil,   nil,  1237,  1240,   nil,  1205,   122,   123,
   124,   184,   nil,  1211,  1212,   nil,   nil,   nil,  1213,  1216,
  1217,  1218,   125,   nil, 26968,   nil,   nil,   nil,   nil,  1220,
   nil ]

racc_action_default = [
    -1,  -656,  -655,  -656,    -2,  -642,    -4,    -5,  -656,    -8,
    -9,  -656,  -656,  -656,   -35,  -656,  -656,   -39,  -656,  -656,
  -299,   -51,  -644,  -656,   -56,   -61,   -62,   -63,   -67,  -276,
  -276,  -276,  -314,  -348,  -349,   -79,  -655,   -83,   -91,   -93,
  -656,  -543,  -544,  -656,  -656,  -656,  -656,  -656,  -656,  -235,
  -656,  -644,  -249,  -290,  -291,  -292,  -293,  -294,  -295,  -296,
  -297,  -298,  -628,  -301,  -303,  -310,  -312,  -322,  -428,  -656,
  -656,   -58,   -58,  -642,  -656,  -332,  -339,  -656,  -350,  -351,
  -353,  -354,  -355,  -356,  -357,  -358,  -359,  -360,  -361,  -362,
  -371,  -473,  -474,  -475,  -476,  -477,  -478,  -655,  -481,  -655,
  -655,  -655,  -491,  -655,  -655,  -655,  -519,  -525,  -527,  -528,
  -529,  -530,  -626,  -532,  -533,  -627,  -535,  -536,  -537,  -538,
  -539,  -540,  -541,  -542,  -547,  -548,  1101,    -3,  -643,  -651,
  -652,  -653,    -7,  -656,  -656,  -656,  -656,  -656,  -656,   -23,
  -656,  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -130,
  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,
  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,
  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,
  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,
  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,
  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,
  -194,  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,
  -204,  -205,   -28,  -131,  -655,  -656,  -656,  -656,  -656,  -656,
  -655,  -656,  -656,  -638,  -639,  -656,  -656,  -644,  -645,   -55,
  -656,  -543,  -544,  -656,  -299,  -656,  -656,  -241,  -656,  -655,
  -656,  -218,  -219,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
  -656,  -656,  -656,  -250,  -251,  -252,  -253,  -656,  -364,  -457,
  -436,  -656,  -640,  -641,   -68,  -656,  -321,  -363,  -656,  -450,
  -452,   -74,  -655,  -447,   -75,  -644,   -76,  -256,  -271,  -655,
  -655,  -275,  -656,  -281,  -656,  -655,  -620,  -656,  -656,   -77,
   -78,  -642,   -17,   -18,  -656,   -21,   -22,   -81,  -655,  -644,
  -656,   -84,   -87,  -655,   -99,  -100,  -656,  -656,  -107,  -314,
  -317,  -644,  -440,  -348,  -349,  -352,  -448,  -656,   -89,  -656,
   -95,  -309,  -656,  -220,  -221,  -526,  -229,  -230,  -656,  -242,
  -656,  -655,  -305,  -644,  -655,  -655,  -323,  -324,  -575,   -57,
  -656,  -656,  -656,  -655,  -655,  -642,  -656,  -643,  -543,  -544,
  -656,  -656,  -299,  -656,  -381,  -382,  -656,  -335,  -656,  -122,
  -123,  -165,  -166,  -167,  -183,  -188,  -195,  -198,  -342,  -656,
  -543,  -544,  -615,  -616,  -479,  -656,  -503,  -656,  -505,  -656,
  -507,  -656,  -656,  -486,  -656,  -655,  -656,  -656,  -499,  -656,
  -656,  -501,  -656,  -518,  -520,  -521,  -522,  -523,    -6,  -654,
   -29,   -30,   -31,   -32,   -33,   -10,   -11,  -656,   -25,   -26,
   -27,  -132,  -656,   -36,   -38,  -286,  -656,  -656,  -285,   -37,
  -656,   -40,  -656,  -299,   -48,   -50,  -206,  -261,  -281,   -52,
   -53,   -41,  -207,  -261,  -644,  -266,  -267,  -655,  -655,  -629,
  -630,  -276,  -445,  -631,  -632,  -630,  -629,  -276,  -444,  -446,
  -631,  -632,   -47,  -215,   -54,  -644,  -320,  -656,  -656,  -656,
  -655,  -309,  -656,  -656,  -656,  -216,  -217,  -222,  -223,  -224,
  -225,  -226,  -227,  -231,  -232,  -233,  -234,  -236,  -237,  -238,
  -239,  -240,  -243,  -244,  -245,  -246,  -644,  -254,  -656,  -458,
  -276,  -629,  -630,   -65,   -69,  -277,  -441,  -454,  -457,  -644,
  -644,  -316,  -272,  -656,  -280,  -273,  -656,  -278,  -656,  -282,
  -656,  -623,  -625,   -16,  -643,   -20,  -644,   -80,  -307,   -96,
   -85,  -656,  -644,  -655,  -656,  -656,  -106,  -656,  -526,  -656,
   -92,   -97,  -656,  -656,  -656,  -656,  -255,  -247,  -656,  -465,
  -656,  -644,  -304,  -257,  -648,  -648,  -656,  -656,  -618,  -648,
  -656,  -429,  -575,  -432,  -614,  -614,  -558,  -560,  -560,  -560,
  -574,  -576,  -577,  -578,  -579,  -580,  -581,  -582,  -583,  -656,
  -585,  -587,  -589,  -594,  -596,  -597,  -599,  -604,  -606,  -607,
  -609,  -610,  -611,  -656,  -655,  -372,  -373,  -655,  -656,  -656,
  -656,  -656,  -656,  -367,  -460,  -655,  -656,  -656,  -309,   -58,
  -117,  -118,  -656,  -120,  -656,  -299,  -655,  -656,  -340,  -553,
  -345,  -636,  -637,  -656,  -480,  -504,  -509,  -510,  -512,  -482,
  -506,  -483,  -508,  -484,  -485,  -656,  -488,  -490,  -656,  -493,
  -495,  -496,  -656,  -497,  -498,  -656,  -524,  -655,   -24,  -656,
   -34,  -289,  -656,  -656,  -655,  -656,  -656,  -656,  -656,  -449,
  -656,  -268,  -270,  -656,  -656,   -70,  -264,  -265,  -442,  -656,
  -656,   -72,  -443,  -319,  -646,  -629,  -630,  -629,  -630,  -644,
  -656,  -435,  -655,   -64,  -437,  -454,  -656,  -455,  -656,  -263,
  -315,  -655,  -279,  -283,  -656,  -621,  -622,  -656,   -19,   -82,
  -656,   -88,   -94,  -644,  -629,  -630,  -655,  -633,  -105,  -656,
   -90,  -656,  -656,  -228,  -644,  -655,  -365,  -655,  -302,  -370,
  -306,  -258,  -650,  -649,  -260,  -650,  -311,  -313,  -619,  -656,
  -644,  -656,  -556,  -557,  -656,  -656,  -567,  -656,  -570,  -656,
  -572,  -656,  -383,  -656,  -385,  -387,  -394,  -644,  -588,  -598,
  -608,  -612,  -655,  -374,  -655,   -59,  -375,  -376,  -327,  -328,
  -656,  -330,  -656,  -644,  -629,  -630,  -633,  -308,  -655,  -117,
  -118,  -119,  -656,  -656,  -655,  -333,  -549,  -551,  -336,  -655,
  -655,  -575,  -575,  -656,  -644,  -656,  -655,  -487,  -489,  -656,
  -492,  -500,  -502,  -656,  -133,  -287,  -656,  -644,  -629,  -630,
  -630,  -629,   -49,  -262,  -656,  -647,  -655,   -43,  -209,   -44,
  -210,   -71,   -45,  -212,   -46,  -211,   -73,  -656,  -656,  -656,
  -656,  -449,  -656,  -417,  -418,  -644,  -420,  -655,  -439,  -438,
  -656,  -451,  -655,  -453,  -274,  -284,  -624,   -86,  -449,   -98,
  -214,  -318,   -13,   -15,  -366,  -368,  -655,  -472,  -466,  -655,
  -467,  -468,  -648,  -430,  -655,  -655,  -422,  -644,  -614,  -595,
  -613,  -559,  -560,  -560,  -586,  -560,  -560,  -605,  -560,  -583,
  -600,  -644,  -656,  -392,  -656,  -584,  -656,  -369,  -377,  -656,
  -379,  -655,  -656,   -60,  -329,  -656,  -449,  -656,  -117,  -118,
  -121,  -644,  -655,  -656,  -656,  -656,  -343,  -644,  -656,  -346,
  -617,  -511,  -514,  -515,  -516,  -517,  -656,  -494,   -12,  -288,
  -449,   -42,  -208,  -269,  -656,  -248,  -614,  -614,  -399,  -655,
  -655,  -655,  -416,  -656,  -644,  -583,  -591,  -592,  -602,  -459,
   -66,  -655,  -655,  -471,  -656,  -656,  -470,  -259,  -656,  -656,
  -656,  -431,  -555,  -656,  -563,  -656,  -565,  -656,  -568,  -656,
  -571,  -573,  -384,  -386,  -390,  -656,  -395,  -325,  -656,  -380,
  -326,  -656,  -655,  -331,  -449,  -656,  -656,  -337,  -341,  -656,
  -552,  -554,  -553,  -513,  -656,  -397,  -398,  -407,  -401,  -409,
  -656,  -412,  -656,  -414,  -419,  -656,  -656,  -590,  -656,  -456,
  -655,  -655,  -543,  -544,  -656,  -656,  -299,  -469,  -433,  -434,
  -644,  -424,  -426,  -427,  -560,  -560,  -560,  -560,  -388,  -656,
  -393,  -656,  -655,  -283,  -655,  -334,  -550,  -655,  -344,  -655,
  -614,  -593,  -400,  -655,  -655,  -655,  -655,  -603,  -655,  -421,
  -601,  -656,  -309,   -14,  -465,  -655,  -656,  -656,  -309,  -423,
  -656,  -656,  -561,  -564,  -566,  -569,  -656,  -391,  -655,  -461,
  -462,  -463,  -656,  -656,  -396,  -656,  -404,  -656,  -406,  -656,
  -410,  -656,  -413,  -415,  -308,  -633,  -464,  -644,  -629,  -630,
  -633,  -308,  -425,  -560,  -389,  -378,  -338,  -347,  -655,  -655,
  -655,  -655,  -449,  -562,  -656,  -402,  -405,  -408,  -411,  -655,
  -403 ]

clist = [
'6,131,236,298,298,298,4,335,335,360,361,280,231,365,320,356,9,239,388',
'612,282,705,9,293,321,363,364,139,223,573,454,350,438,439,144,144,669',
'725,461,467,525,359,359,580,335,359,414,702,604,607,702,514,299,299',
'299,790,451,395,147,147,742,743,472,886,300,300,300,128,874,131,853',
'345,338,420,421,422,423,127,352,645,149,149,508,877,731,734,930,892',
'510,738,867,696,519,781,560,396,966,398,400,403,144,408,411,398,550',
'359,359,359,359,317,588,319,296,309,310,757,445,1037,1011,445,837,746',
'748,750,873,445,875,132,144,640,397,642,1013,1,646,963,412,626,2,628',
'425,138,9,657,640,366,852,942,708,222,375,424,434,427,765,893,281,284',
'291,294,695,659,876,348,878,566,694,705,392,567,357,373,785,389,630',
'351,353,1020,561,354,355,376,902,627,904,933,1027,378,789,629,979,793',
'1037,982,932,702,702,934,525,449,450,298,432,1010,571,19,863,358,474',
'475,739,19,517,518,931,842,692,752,1082,433,444,1059,772,444,462,859',
'240,320,455,444,705,1057,1013,478,944,240,240,240,1033,19,326,326,394',
'740,399,437,437,418,402,648,929,405,407,900,410,471,298,580,911,795',
'796,413,903,298,770,530,298,19,1084,840,941,831,240,240,963,872,240',
'370,869,881,689,516,874,1031,995,461,467,633,,877,455,,335,,,848,320',
'524,524,,,320,608,396,,299,711,131,,335,874,547,,,720,299,,300,,544',
',698,,,588,799,551,300,535,293,,19,1014,,359,553,240,240,240,240,19',
'609,610,713,,1043,335,1060,335,,,716,563,568,952,896,540,,,1085,716',
'131,548,616,,515,1034,,1015,1035,1016,,1017,534,564,520,,798,,,646,752',
'947,533,883,,565,569,,920,,317,,536,874,,317,,542,,,,,649,,1036,,1038',
'1029,,,,985,986,,773,954,956,705,958,960,,961,716,,,,19,240,442,240',
'240,442,240,670,665,,611,442,240,240,844,821,658,1088,,,702,826,,144',
'298,19,,677,524,524,,,676,682,,907,908,807,,1083,,,,,462,461,467,147',
'847,580,580,455,,1089,,1090,974,1091,,690,,240,,,,,,,240,149,588,240',
'588,817,819,471,677,,,822,824,676,1099,752,335,752,,298,,1064,19,,335',
',19,1076,,,326,19,,551,,724,798,905,906,860,,551,462,,,,455,326,588',
'588,,462,,728,,,452,,445,19,701,844,473,1052,1053,1054,1055,,445,445',
'240,19,19,471,445,445,,,778,,,,471,,624,939,624,762,972,901,764,298',
'935,,675,716,,1018,752,,681,,768,769,788,771,,,,766,794,,,949,462,,',
',455,,,,,,,,,,,787,,,1093,,,,,1001,,,298,435,448,693,,471,921,839,,',
'975,,752,,752,,,,,,6,1022,444,462,1092,,803,455,,29,,,444,444,670,29',
'9,,444,444,804,,1061,,838,335,812,144,240,752,29,,,,471,833,335,,670',
'29,29,29,551,29,524,,,,816,445,588,147,,849,677,,,682,527,676,529,,',
'531,532,866,,,857,,861,29,,149,,,29,29,,909,29,,19,,935,,,935,,326,',
'240,437,,,,,326,670,,298,897,,894,,890,240,890,,862,,570,,,,1062,,1063',
',916,,462,,,,,,455,,,,,670,,,29,,895,,,29,29,29,29,29,,,,,473,471,452',
'19,444,,19,,,,524,866,144,935,240,,,,,,,,,,,968,240,,,,943,,240,,,,833',
',948,976,,1077,,661,,,,,,716,,,,946,,,19,359,,,,868,442,240,,969,19',
',,,967,359,442,442,,,970,670,442,442,,973,29,29,29,29,29,29,29,978,',
',,29,29,29,977,989,991,993,981,,335,,,,,29,,326,866,335,,,,999,1000',
',,,326,,,988,988,988,476,,,,703,870,,570,870,706,,,,,,,,29,,,1024,,',
',29,,,29,,927,,,,1025,,,335,1028,,,,,1026,,,,29,,,1044,29,19,,,,29,',
'240,521,,1049,,19,19,,818,820,1046,857,19,1058,823,825,758,,1066,1068',
'1070,1072,,1073,,537,29,,,298,442,,,,,890,,29,29,29,,,928,,988,988,988',
'988,,988,,,462,19,,,455,850,,562,,,,1086,1087,,,,,890,670,,19,1095,1096',
'1097,1098,471,,,19,19,,471,1100,,805,,,,,,,,,703,570,936,,988,988,988',
'988,,,240,,19,,,988,,,,,,,,19,240,,1030,,,927,,,927,845,927,,846,,,',
',,,,,,,,,,,,,,922,,858,997,,,29,703,19,19,570,,1004,818,820,825,823',
',,,,,,,,,880,,,,,,683,,,,,,,19,32,,870,,,928,32,448,928,,928,,,927,',
'927,,927,,927,29,32,,1040,,,,,19,29,32,32,32,,32,,699,700,,,,919,927',
',29,,,,,19,,,,709,19,,19,936,,712,936,,32,936,,936,,32,32,,922,32,240',
',,,,,730,,,,,928,,928,,928,,928,29,,,29,,,,,,,,29,,,,,,,,,,,928,29,',
',,,,29,,,,,,,32,,,,,32,32,32,32,32,,,936,,936,,936,29,936,,,,,29,29',
',,29,,,,,570,29,29,,,,,29,29,936,16,,,,,,16,,,,,,,,,,,,,,,,,,,,,,,,',
',,,16,,,,1023,,,,,,,,,,,,,,,,32,32,32,32,32,32,32,,16,,,32,32,32,,,',
',374,851,,,,,,32,,,,,,,,,,,,,,,,,29,,,,,,29,18,,,885,29,29,18,,,,,29',
'32,,,,,,,32,,,32,16,,,,,,29,,,16,,18,,,,,,910,32,,,,32,,,,,32,,29,,',
',,,,,,,18,,,,,,,,,29,,,,,,,32,29,29,,,,,,,,,32,32,32,,,,,,,,,,,,,29',
',29,,,,,,,951,,,,29,29,16,,440,,,440,,18,962,,,440,,,,,18,,,,,,,,,16',
',,,,,,,,980,,,29,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,',
',,,32,,16,,,,16,,,29,,16,,,,18,,18,,,18,,,,,,18,,,,29,,,,,29,,29,,16',
'18,,,,,,,,,,,16,16,29,32,,,,,,,,,32,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,',
',,,,,,,,,,,18,,,,18,,,,,18,,,,,,,,,,32,,,32,,,,,,,,32,,,,,,,18,,,,,32',
',,,,,32,18,18,,,,,,,,,,,,20,,,,,,20,,,,32,,,,,,32,32,,,32,,,,,,32,32',
',,,,32,32,20,328,328,,,,,,,,,,,,,,,,,,,16,,,,,,,20,,,,,,,,,,372,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,16,20,,16,,,32,,,,20',
',32,,,,,32,32,,,,,,32,,,,,,,,,18,,,,,,,,,32,,,,,,,,,,,16,41,,,,,440',
'41,,,16,,32,,,,440,440,,,,,440,440,,,,,,,,32,,,,41,324,324,,32,32,,',
',20,,443,,,443,18,,,18,,443,,,,,,,,41,32,,32,,,20,,,,368,,,390,32,32',
',,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,18,,,,18,,,32,32,,18,18,16,,,,18,18',
'41,,,,,16,16,20,,41,,20,16,,,328,20,,,,32,,,,,,,,,,440,,328,,,,,,,,',
',,,20,,,,,32,,,,16,,,20,20,,,,,,,,,,,,625,32,625,16,,,32,,32,,,16,16',
',,,,,,,,,,,32,,,41,18,,,,,,,,,,16,18,18,,,,,,18,,,16,,,41,,,,,,,,,,',
',18,,,,42,,,,,,42,,,,,,,,,,,,,18,16,16,,,1007,,,,,,,,,,42,325,325,,18',
',,,,,,,18,18,,41,,16,,41,,,,324,41,,,,42,,,,,,,,,,369,18,324,391,,,',
',16,,,,18,,41,,,,20,,,,,,,328,41,41,,16,,,,328,16,,16,,,390,,390,,,',
',,,,,,18,18,,42,,,,,,,,,42,,,,,,,,,,,,,,,,,,,18,,,,,,20,,,20,,,,,,,',
',,,,,,,,,,,,18,,,,,,,,,,,,,,,,,,,,,18,,,,,18,,18,,20,,,,,,443,,,42,20',
',,,,,443,443,,,,,443,443,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,328,,,41,,,',
',,,324,328,,,,,,,324,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,42,,,,325,42,',
',,,,,,,,,,,20,,,325,,41,,,41,,,20,20,,,42,,915,20,,,,,,,,,42,42,,,,',
',,,443,,,,391,,391,,,,,,,,,,,,,,,,41,20,,,,,,,,,41,,,,,,,,,,20,,,,,',
',,20,20,,,,,,,,,,,,,,,,,,,,,,,,324,,20,,,,,,,,,324,,20,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,625,,,,,20,20,,,1006,,,,,,,,,,,,41,,,,,,,,,,,41',
'41,,,20,,,41,42,,,,,,,325,,,,,,,,325,,,,,625,,,,,20,,,,,,,,,,,,,,247',
'41,,,,,,20,,297,297,297,20,,20,,,,,,41,343,344,,346,347,,349,41,41,',
'42,,,42,,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,,,41,,,,,,,,,,,,,,,,,,42,,,,',
',,,,,42,,,,,,390,,,,,41,41,,,1002,,,,,,,,,,,,,,,,,,,,,,,,,,,41,325,',
',,,,,,,,,325,,,,,,,,,,,,390,,,,,41,,,,,,,,,,,,,,,,,,,,,41,,,,,41,,41',
',,,,,,,,297,447,,42,453,297,,,,,453,,,,42,42,,,,,,42,,247,,,485,486',
'487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503',
'504,505,506,,,,,507,,,,,,,,297,,42,,,,,297,,,297,,,,,,,297,,297,,42',
'297,297,,,,,,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,556,,557,,42,,297',
'297,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,391,,,,,42,42,,,1003,,,,,,,,,,,,,',
',,,,,,,,,,,,,42,,,,,,,,,,,,,,297,,,,,,,,,,391,,,,,42,,,,,,,,,,,,,,,',
',,,,,42,,,,,42,,42,297,,453,453,453,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,297,,,297,,297,,,,,,,,,,,,,,,297,,,,,,,,,,,,723,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,297,,,,,,,,,,,,,,,,,,,,,,,297,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,297,453,297,,,,813,,,297,297,453,453,',
',,,453,453,,,,,,,,,,,,,,,,,,,,,,,,297,,,297,,,,,,,,,,,,,,,453,,,,,297',
',,,,297,,,297,,,,,,,,,,,,,,,,297,,,,,,,,,,,,,,,,,,,,,297,,,,,,,,,,,',
'297,,,,,,,,,,,,,,,,,,,,,,297,,,,,,,,453,,,,,,,,,,,,,453,453,453,453',
',925,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,297,453,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,297,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,297' ]
        racc_goto_table = arr = ::Array.new(3857, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,120,39,45,45,45,2,79,79,23,23,173,37,23,14,104,9,26,69,115,37,221',
'9,87,62,41,41,21,21,172,35,39,28,28,70,70,36,15,49,49,89,30,30,205,79',
'30,69,90,108,108,90,51,84,84,84,123,32,190,73,73,155,155,32,109,86,86',
'86,8,211,120,17,77,63,23,23,23,23,5,9,194,74,74,174,216,85,85,160,111',
'49,85,164,52,35,67,12,6,151,6,6,6,70,6,6,6,64,30,30,30,30,58,210,59',
'57,57,57,150,24,217,166,24,162,208,208,208,161,24,161,7,70,195,191,195',
'167,1,195,148,191,68,3,68,10,11,9,13,195,5,16,18,20,22,25,9,29,31,42',
'44,48,50,50,50,54,75,159,80,159,83,88,221,100,103,106,117,119,124,125',
'126,127,151,128,129,130,131,132,133,134,164,135,136,137,138,139,140',
'217,141,152,90,90,158,89,30,30,45,14,165,168,34,169,170,30,30,171,34',
'177,178,161,180,182,149,166,26,26,183,184,26,87,185,34,14,6,26,221,151',
'167,37,186,34,34,34,160,34,34,34,189,172,192,84,84,7,193,196,159,197',
'198,67,199,70,45,205,200,201,202,203,204,45,115,190,45,34,151,52,162',
'36,34,34,148,209,34,34,213,150,35,87,211,214,164,49,49,220,,216,6,,79',
',,36,14,6,6,,,14,23,6,,84,64,120,,79,211,39,,,64,84,,86,,37,,174,,,210',
'194,62,86,9,87,,34,161,,30,37,34,34,34,34,34,14,14,35,,17,79,111,79',
',,49,6,6,155,36,63,,,109,49,120,77,37,,57,161,,159,161,159,,159,8,84',
'57,,195,,,195,149,85,5,149,,86,86,,36,,58,,59,211,,58,,59,,,,,6,,159',
',159,123,,,,155,155,,35,208,208,221,208,208,,208,49,,,,34,34,34,34,34',
'34,34,39,37,,5,34,34,34,89,51,21,161,,,90,51,,70,45,34,,87,6,6,,,6,87',
',172,172,35,,159,,,,,87,49,49,73,64,205,205,6,,159,,159,36,159,,39,',
'34,,,,,,,34,74,210,34,210,32,32,70,87,,,32,32,6,159,149,79,149,,45,',
'155,34,,79,,34,15,,,34,34,,62,,30,195,12,12,28,,62,87,,,,6,34,210,210',
',87,,102,,,76,,24,34,86,89,76,208,208,208,208,,24,24,34,34,34,70,24',
'24,,,41,,,,70,,34,12,34,14,108,35,14,45,210,,50,49,,149,149,,50,,102',
'102,30,102,,,,120,30,,,12,87,,,,6,,,,,,,,,,,6,,,208,,,,,108,,,45,82',
'82,50,,70,32,104,,,12,,149,,149,,,,,,6,108,26,87,36,,2,6,,53,,,26,26',
'39,53,9,,26,26,21,,115,,173,79,9,70,34,149,53,,,,70,6,79,,39,53,53,53',
'62,53,6,,,,86,24,210,73,,62,87,,,87,82,6,82,,,82,82,39,,,6,,6,53,,74',
',,53,53,,69,53,,34,,210,,,210,,34,,34,84,,,,,34,39,,45,14,,102,,6,34',
'6,,86,,82,,,,12,,12,,14,,87,,,,,,6,,,,,39,,,53,,84,,,53,53,53,53,53',
',,,,76,70,76,34,26,,34,,,,6,39,70,210,34,,,,,,,,,,,23,34,,,,14,,34,',
',,6,,14,23,,35,,82,,,,,,49,,,,6,,,34,30,,,,154,34,34,,14,34,,,,102,30',
'34,34,,,102,39,34,34,,102,53,53,53,53,53,53,53,102,,,,53,53,53,120,157',
'157,157,120,,79,,,,,53,,34,39,79,,,,14,14,,,,34,,,6,6,6,60,,,,82,156',
',82,156,82,,,,,,,,53,,,14,,,,53,,,53,,154,,,,102,,,79,102,,,,,120,,',
',53,,,14,53,34,,,,53,,34,60,,39,,34,34,,76,76,37,6,34,14,76,76,82,,157',
'157,157,157,,157,,60,53,,,45,34,,,,,6,,53,53,53,,,156,,6,6,6,6,,6,,',
'87,34,,,6,76,,60,,,,102,102,,,,,6,39,,34,157,157,157,157,70,,,34,34',
',70,157,,82,,,,,,,,,82,82,212,,6,6,6,6,,,34,,34,,,6,,,,,,,,34,34,,154',
',,154,,,154,82,154,,82,,,,,,,,,,,,,,,,,,76,,82,34,,,53,82,34,34,82,',
'34,76,76,76,76,,,,,,,,,,82,,,,,,60,,,,,,,34,56,,156,,,156,56,82,156',
',156,,,154,,154,,154,,154,53,56,,34,,,,,34,53,56,56,56,,56,,60,60,,',
',82,154,,53,,,,,34,,,,60,34,,34,212,,60,212,,56,212,,212,,56,56,,76',
'56,34,,,,,,60,,,,,156,,156,,156,,156,53,,,53,,,,,,,,53,,,,,,,,,,,156',
'53,,,,,,53,,,,,,,56,,,,,56,56,56,56,56,,,212,,212,,212,53,212,,,,,53',
'53,,,53,,,,,82,53,53,,,,,53,53,212,27,,,,,,27,,,,,,,,,,,,,,,,,,,,,,',
',,,,,27,,,,82,,,,,,,,,,,,,,,,56,56,56,56,56,56,56,,27,,,56,56,56,,,',
',27,60,,,,,,56,,,,,,,,,,,,,,,,,53,,,,,,53,33,,,60,53,53,33,,,,,53,56',
',,,,,,56,,,56,27,,,,,,53,,,27,,33,,,,,,60,56,,,,56,,,,,56,,53,,,,,,',
',,,33,,,,,,,,,53,,,,,,,56,53,53,,,,,,,,,56,56,56,,,,,,,,,,,,,53,,53',
',,,,,,60,,,,53,53,27,,27,,,27,,33,60,,,27,,,,,33,,,,,,,,,27,,,,,,,,',
'60,,,53,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,,,,,,,,,,,,,,,,,,,56,,27',
',,,27,,,53,,27,,,,33,,33,,,33,,,,,,33,,,,53,,,,,53,,53,,27,33,,,,,,',
',,,,27,27,53,56,,,,,,,,,56,,,,,,,,,,,,,,,56,,,,,,,,,,,,,,,,,,,,,,,,',
',,33,,,,33,,,,,33,,,,,,,,,,56,,,56,,,,,,,,56,,,,,,,33,,,,,56,,,,,,56',
'33,33,,,,,,,,,,,,38,,,,,,38,,,,56,,,,,,56,56,,,56,,,,,,56,56,,,,,56',
'56,38,38,38,,,,,,,,,,,,,,,,,,,27,,,,,,,38,,,,,,,,,,38,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,38,,27,,,56,,,,38,,56,,,,,56',
'56,,,,,,56,,,,,,,,,33,,,,,,,,,56,,,,,,,,,,,27,65,,,,,27,65,,,27,,56',
',,,27,27,,,,,27,27,,,,,,,,56,,,,65,65,65,,56,56,,,,38,,38,,,38,33,,',
'33,,38,,,,,,,,65,56,,56,,,38,,,,65,,,65,56,56,,,,,,,,,,,,,,,,,,,,,,',
',,33,,,,,,33,,,,33,,,56,56,,33,33,27,,,,33,33,65,,,,,27,27,38,,65,,38',
'27,,,38,38,,,,56,,,,,,,,,,27,,38,,,,,,,,,,,,38,,,,,56,,,,27,,,38,38',
',,,,,,,,,,,38,56,38,27,,,56,,56,,,27,27,,,,,,,,,,,,56,,,65,33,,,,,,',
',,,27,33,33,,,,,,33,,,27,,,65,,,,,,,,,,,,33,,,,66,,,,,,66,,,,,,,,,,',
',,33,27,27,,,27,,,,,,,,,,66,66,66,,33,,,,,,,,33,33,,65,,27,,65,,,,65',
'65,,,,66,,,,,,,,,,66,33,65,66,,,,,27,,,,33,,65,,,,38,,,,,,,38,65,65',
',27,,,,38,27,,27,,,65,,65,,,,,,,,,,33,33,,66,,,,,,,,,66,,,,,,,,,,,,',
',,,,,,33,,,,,,38,,,38,,,,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,33,',
',,,33,,33,,38,,,,,,38,,,66,38,,,,,,38,38,,,,,38,38,,,,,,,,,,,66,,,,',
',,,,,,,,,,,,,,38,,,65,,,,,,,65,38,,,,,,,65,,,,,,,,,,,,,,,,,,,,,,,,,',
',,66,,,,66,,,,66,66,,,,,,,,,,,,,38,,,66,,65,,,65,,,38,38,,,66,,38,38',
',,,,,,,,66,66,,,,,,,,38,,,,66,,66,,,,,,,,,,,,,,,,65,38,,,,,,,,,65,,',
',,,,,,,38,,,,,,,,38,38,,,,,,,,,,,,,,,,,,,,,,,,65,,38,,,,,,,,,65,,38',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,38,38,,,38,,,,,,,,,,,,65,,,',
',,,,,,,65,65,,,38,,,65,66,,,,,,,66,,,,,,,,66,,,,,38,,,,,38,,,,,,,,,',
',,,,40,65,,,,,,38,,40,40,40,38,,38,,,,,,65,40,40,,40,40,,40,65,65,,66',
',,66,,,,,,,,,,,,,,,,,,,,,65,,,,,,,,,,,65,,,,,,,,,,,,,,,,,,66,,,,,,,',
',,66,,,,,,65,,,,,65,65,,,65,,,,,,,,,,,,,,,,,,,,,,,,,,,65,66,,,,,,,,',
',,66,,,,,,,,,,,,65,,,,,65,,,,,,,,,,,,,,,,,,,,,65,,,,,65,,65,,,,,,,,',
'40,40,,66,40,40,,,,,40,,,,66,66,,,,,,66,,40,,,40,40,40,40,40,40,40,40',
'40,40,40,40,40,40,40,40,40,40,40,40,40,40,,,,,40,,,,,,,,40,,66,,,,,40',
',,40,,,,,,,40,,40,,66,40,40,,,,,,66,66,,,,,,,,,,,,,,,,,,,,,,,,,,66,',
',,,,,40,,40,,66,,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,66,66,,',
'66,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,,,,,,,,,,40,,,,,,,,,,66,,,,,66,',
',,,,,,,,,,,,,,,,,,,66,,,,,66,,66,40,,40,40,40,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,40,,,40,,40,,,,,,,,,,,,,,,40,,,,,,,,,,,,40,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,40,,,,40,,,40,40,40,40,,,,,40',
'40,,,,,,,,,,,,,,,,,,,,,,,,40,,,40,,,,,,,,,,,,,,,40,,,,,40,,,,,40,,,40',
',,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,40,,,,,,,,,,,,,',
',,,,,,,,40,,,,,,,,40,,,,,,,,,,,,,40,40,40,40,,40,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3857, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   133,     4,   138,   nil,    72,    -2,   119,    62,    14,
     2,   131,  -257,  -283,   -22,  -522,  -579,  -655,  -705,   nil,
  -386,    16,   137,   -60,  -110,    76,    -6,  1342,  -193,   -73,
   -28,    14,  -173,  1445,   203,  -200,  -418,    -7,  1819,   -20,
  2811,   -46,  -454,   nil,  -610,   -29,   nil,   nil,   129,  -193,
   128,  -233,  -426,   662,  -353,   nil,  1174,    80,    73,    75,
   693,   nil,   -13,    34,  -235,  1998,  2261,  -529,  -239,   -59,
    23,   nil,   nil,    47,    69,  -270,   322,    25,   nil,   -30,
   114,   nil,   411,  -189,    20,  -480,    32,    -7,  -344,  -260,
  -476,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    91,   nil,   -12,  -186,   -52,   nil,   102,   nil,  -312,  -699,
   nil,  -677,   nil,   nil,   nil,  -347,   nil,    97,   nil,  -454,
    -4,   nil,   nil,  -574,    96,  -215,   112,   112,  -174,   114,
   114,   106,  -603,  -194,  -604,  -791,   111,  -440,  -199,  -716,
  -439,  -716,   nil,   nil,   nil,   nil,   nil,   nil,  -747,  -372,
  -474,  -788,  -641,   nil,   124,  -514,   194,   -28,  -638,  -585,
  -749,  -621,  -572,   nil,  -650,  -747,  -832,  -818,  -154,  -533,
   139,  -361,  -329,   -14,  -197,   nil,   nil,   -77,   -77,   nil,
  -482,   nil,  -293,  -803,  -392,  -502,  -625,   nil,   nil,   148,
   -40,    31,   144,   147,  -323,  -268,  -156,   149,   149,   150,
  -537,  -378,  -378,   156,  -524,  -315,   nil,   nil,  -456,  -470,
  -248,  -677,   249,  -463,  -701,   nil,  -664,  -873,   nil,   nil,
  -106,  -505 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   312,     7,   367,   315,
   nil,   nil,   nil,   nil,   559,   nil,   nil,   nil,   nil,   311,
   313,   nil,   nil,   nil,    14,    15,    21,   245,   nil,   nil,
    17,   nil,   441,   246,   342,   nil,   nil,   783,   244,   477,
    24,   nil,   nil,   362,   nil,    25,    26,    27,   nil,   719,
   nil,   nil,   nil,   332,   nil,    28,   329,   456,    35,   nil,
   nil,    37,    40,    39,   nil,   241,   242,   623,   nil,   146,
   464,   145,   148,    92,    93,   nil,   446,   107,    49,    52,
   277,   552,   303,   nil,   457,   nil,   458,   469,   678,   522,
   301,   285,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    63,   nil,   nil,   286,    67,   nil,    69,   nil,   nil,
    70,   888,    71,    72,    73,   nil,    74,   nil,    75,   nil,
   605,    76,    77,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   290,   279,   727,   856,   614,   889,   754,   587,
   nil,   755,  1032,   926,   575,   nil,   576,   nil,   nil,   577,
   nil,   579,   nil,   834,   nil,   nil,   nil,   585,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   468,   288,   nil,   nil,   697,
   nil,   509,   nil,   nil,   nil,   nil,   nil,    91,    94,    96,
   nil,   nil,   nil,   nil,   nil,   635,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   871,   792,   574,   nil,   578,
   879,   590,   592,   593,   937,   596,   597,   938,   600,   603,
   nil,   306 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 151, :_reduce_1,
  2, 149, :_reduce_2,
  2, 150, :_reduce_3,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  3, 152, :_reduce_6,
  2, 152, :_reduce_none,
  1, 155, :_reduce_none,
  0, 159, :_reduce_9,
  3, 155, :_reduce_10,
  0, 161, :_reduce_11,
  4, 158, :_reduce_12,
  0, 166, :_reduce_13,
  6, 160, :_reduce_14,
  3, 160, :_reduce_15,
  2, 162, :_reduce_16,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  3, 167, :_reduce_19,
  2, 167, :_reduce_20,
  1, 168, :_reduce_none,
  1, 168, :_reduce_22,
  0, 179, :_reduce_23,
  4, 157, :_reduce_24,
  3, 157, :_reduce_25,
  3, 157, :_reduce_26,
  3, 157, :_reduce_27,
  2, 157, :_reduce_28,
  3, 157, :_reduce_29,
  3, 157, :_reduce_30,
  3, 157, :_reduce_31,
  3, 157, :_reduce_32,
  3, 157, :_reduce_33,
  4, 157, :_reduce_34,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  3, 157, :_reduce_38,
  1, 157, :_reduce_none,
  3, 172, :_reduce_40,
  3, 172, :_reduce_41,
  6, 172, :_reduce_42,
  5, 172, :_reduce_43,
  5, 172, :_reduce_44,
  5, 172, :_reduce_45,
  5, 172, :_reduce_46,
  3, 172, :_reduce_47,
  1, 180, :_reduce_48,
  3, 180, :_reduce_49,
  1, 180, :_reduce_none,
  1, 178, :_reduce_none,
  3, 178, :_reduce_52,
  3, 178, :_reduce_53,
  3, 178, :_reduce_54,
  2, 178, :_reduce_55,
  1, 178, :_reduce_none,
  1, 171, :_reduce_57,
  0, 191, :_reduce_58,
  0, 192, :_reduce_59,
  4, 189, :_reduce_60,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 194, :_reduce_none,
  4, 194, :_reduce_64,
  0, 202, :_reduce_65,
  4, 199, :_reduce_66,
  1, 201, :_reduce_67,
  2, 193, :_reduce_68,
  3, 193, :_reduce_69,
  4, 193, :_reduce_70,
  5, 193, :_reduce_71,
  4, 193, :_reduce_72,
  5, 193, :_reduce_73,
  2, 193, :_reduce_74,
  2, 193, :_reduce_75,
  2, 193, :_reduce_76,
  2, 193, :_reduce_77,
  2, 193, :_reduce_78,
  1, 173, :_reduce_none,
  3, 173, :_reduce_80,
  1, 207, :_reduce_none,
  3, 207, :_reduce_82,
  1, 206, :_reduce_83,
  2, 206, :_reduce_84,
  3, 206, :_reduce_85,
  5, 206, :_reduce_86,
  2, 206, :_reduce_87,
  4, 206, :_reduce_88,
  2, 206, :_reduce_89,
  4, 206, :_reduce_90,
  1, 206, :_reduce_91,
  3, 206, :_reduce_92,
  1, 210, :_reduce_none,
  3, 210, :_reduce_94,
  2, 209, :_reduce_95,
  3, 209, :_reduce_96,
  1, 212, :_reduce_97,
  3, 212, :_reduce_98,
  1, 211, :_reduce_99,
  1, 211, :_reduce_100,
  4, 211, :_reduce_101,
  3, 211, :_reduce_102,
  3, 211, :_reduce_103,
  3, 211, :_reduce_104,
  3, 211, :_reduce_105,
  2, 211, :_reduce_106,
  1, 211, :_reduce_107,
  1, 175, :_reduce_108,
  1, 175, :_reduce_109,
  4, 175, :_reduce_110,
  3, 175, :_reduce_111,
  3, 175, :_reduce_112,
  3, 175, :_reduce_113,
  3, 175, :_reduce_114,
  2, 175, :_reduce_115,
  1, 175, :_reduce_116,
  1, 215, :_reduce_117,
  1, 215, :_reduce_none,
  2, 216, :_reduce_119,
  1, 216, :_reduce_120,
  3, 216, :_reduce_121,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_125,
  1, 217, :_reduce_126,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 169, :_reduce_129,
  1, 169, :_reduce_none,
  1, 170, :_reduce_131,
  0, 223, :_reduce_132,
  4, 170, :_reduce_133,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  3, 188, :_reduce_206,
  3, 188, :_reduce_207,
  6, 188, :_reduce_208,
  5, 188, :_reduce_209,
  5, 188, :_reduce_210,
  5, 188, :_reduce_211,
  5, 188, :_reduce_212,
  0, 229, :_reduce_213,
  5, 188, :_reduce_214,
  3, 188, :_reduce_215,
  3, 188, :_reduce_216,
  3, 188, :_reduce_217,
  2, 188, :_reduce_218,
  2, 188, :_reduce_219,
  2, 188, :_reduce_220,
  2, 188, :_reduce_221,
  3, 188, :_reduce_222,
  3, 188, :_reduce_223,
  3, 188, :_reduce_224,
  3, 188, :_reduce_225,
  3, 188, :_reduce_226,
  3, 188, :_reduce_227,
  4, 188, :_reduce_228,
  2, 188, :_reduce_229,
  2, 188, :_reduce_230,
  3, 188, :_reduce_231,
  3, 188, :_reduce_232,
  3, 188, :_reduce_233,
  3, 188, :_reduce_234,
  1, 188, :_reduce_none,
  3, 188, :_reduce_236,
  3, 188, :_reduce_237,
  3, 188, :_reduce_238,
  3, 188, :_reduce_239,
  3, 188, :_reduce_240,
  2, 188, :_reduce_241,
  2, 188, :_reduce_242,
  3, 188, :_reduce_243,
  3, 188, :_reduce_244,
  3, 188, :_reduce_245,
  3, 188, :_reduce_246,
  3, 188, :_reduce_247,
  6, 188, :_reduce_248,
  1, 188, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  3, 226, :_reduce_254,
  3, 226, :_reduce_255,
  1, 230, :_reduce_256,
  1, 231, :_reduce_none,
  2, 231, :_reduce_258,
  4, 231, :_reduce_259,
  2, 231, :_reduce_260,
  1, 224, :_reduce_none,
  3, 224, :_reduce_262,
  3, 235, :_reduce_263,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 183, :_reduce_268,
  4, 183, :_reduce_269,
  2, 183, :_reduce_270,
  1, 205, :_reduce_271,
  2, 205, :_reduce_272,
  2, 205, :_reduce_273,
  4, 205, :_reduce_274,
  1, 205, :_reduce_275,
  0, 239, :_reduce_276,
  2, 198, :_reduce_277,
  2, 238, :_reduce_278,
  2, 237, :_reduce_279,
  1, 237, :_reduce_none,
  1, 232, :_reduce_281,
  2, 232, :_reduce_282,
  3, 232, :_reduce_283,
  4, 232, :_reduce_284,
  1, 177, :_reduce_285,
  1, 177, :_reduce_286,
  3, 176, :_reduce_287,
  4, 176, :_reduce_288,
  2, 176, :_reduce_289,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_300,
  0, 274, :_reduce_301,
  4, 227, :_reduce_302,
  0, 275, :_reduce_303,
  3, 227, :_reduce_304,
  0, 276, :_reduce_305,
  4, 227, :_reduce_306,
  3, 227, :_reduce_307,
  3, 227, :_reduce_308,
  2, 227, :_reduce_309,
  0, 277, :_reduce_310,
  4, 227, :_reduce_311,
  0, 278, :_reduce_312,
  4, 227, :_reduce_313,
  1, 227, :_reduce_314,
  4, 227, :_reduce_315,
  3, 227, :_reduce_316,
  1, 227, :_reduce_317,
  5, 227, :_reduce_318,
  4, 227, :_reduce_319,
  3, 227, :_reduce_320,
  2, 227, :_reduce_321,
  1, 227, :_reduce_none,
  2, 227, :_reduce_323,
  2, 227, :_reduce_324,
  6, 227, :_reduce_325,
  6, 227, :_reduce_326,
  4, 227, :_reduce_327,
  4, 227, :_reduce_328,
  5, 227, :_reduce_329,
  4, 227, :_reduce_330,
  6, 227, :_reduce_331,
  0, 279, :_reduce_332,
  0, 280, :_reduce_333,
  7, 227, :_reduce_334,
  0, 281, :_reduce_335,
  0, 282, :_reduce_336,
  0, 283, :_reduce_337,
  9, 227, :_reduce_338,
  0, 284, :_reduce_339,
  0, 285, :_reduce_340,
  6, 227, :_reduce_341,
  0, 286, :_reduce_342,
  0, 287, :_reduce_343,
  7, 227, :_reduce_344,
  0, 288, :_reduce_345,
  0, 289, :_reduce_346,
  9, 227, :_reduce_347,
  1, 227, :_reduce_348,
  1, 227, :_reduce_349,
  1, 227, :_reduce_350,
  1, 227, :_reduce_351,
  1, 182, :_reduce_352,
  1, 249, :_reduce_none,
  1, 255, :_reduce_none,
  1, 258, :_reduce_none,
  1, 260, :_reduce_none,
  1, 261, :_reduce_none,
  1, 262, :_reduce_none,
  1, 264, :_reduce_none,
  1, 266, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 290, :_reduce_none,
  1, 291, :_reduce_none,
  1, 292, :_reduce_none,
  1, 293, :_reduce_none,
  1, 294, :_reduce_none,
  1, 164, :_reduce_none,
  1, 295, :_reduce_none,
  1, 250, :_reduce_none,
  1, 204, :_reduce_none,
  1, 256, :_reduce_none,
  1, 256, :_reduce_none,
  2, 256, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 257, :_reduce_none,
  5, 257, :_reduce_378,
  1, 259, :_reduce_none,
  2, 259, :_reduce_380,
  1, 265, :_reduce_none,
  1, 265, :_reduce_382,
  1, 296, :_reduce_none,
  3, 296, :_reduce_384,
  1, 299, :_reduce_385,
  3, 299, :_reduce_386,
  1, 298, :_reduce_387,
  4, 298, :_reduce_388,
  6, 298, :_reduce_389,
  3, 298, :_reduce_390,
  5, 298, :_reduce_391,
  2, 298, :_reduce_392,
  4, 298, :_reduce_393,
  1, 298, :_reduce_394,
  3, 298, :_reduce_395,
  4, 300, :_reduce_396,
  2, 300, :_reduce_397,
  2, 300, :_reduce_398,
  1, 300, :_reduce_399,
  2, 305, :_reduce_400,
  1, 305, :_reduce_none,
  6, 306, :_reduce_402,
  8, 306, :_reduce_403,
  4, 306, :_reduce_404,
  6, 306, :_reduce_405,
  4, 306, :_reduce_406,
  2, 306, :_reduce_407,
  6, 306, :_reduce_408,
  2, 306, :_reduce_409,
  4, 306, :_reduce_410,
  6, 306, :_reduce_411,
  2, 306, :_reduce_412,
  4, 306, :_reduce_413,
  2, 306, :_reduce_414,
  4, 306, :_reduce_415,
  1, 306, :_reduce_416,
  1, 310, :_reduce_417,
  1, 310, :_reduce_418,
  3, 311, :_reduce_419,
  1, 311, :_reduce_420,
  4, 311, :_reduce_421,
  1, 312, :_reduce_none,
  4, 312, :_reduce_423,
  1, 313, :_reduce_424,
  3, 313, :_reduce_425,
  1, 314, :_reduce_426,
  1, 314, :_reduce_none,
  0, 318, :_reduce_428,
  0, 319, :_reduce_429,
  4, 254, :_reduce_430,
  4, 316, :_reduce_431,
  1, 316, :_reduce_432,
  3, 317, :_reduce_433,
  3, 317, :_reduce_434,
  3, 321, :_reduce_435,
  2, 195, :_reduce_436,
  4, 195, :_reduce_437,
  5, 195, :_reduce_438,
  5, 195, :_reduce_439,
  0, 324, :_reduce_440,
  3, 253, :_reduce_441,
  4, 253, :_reduce_442,
  4, 253, :_reduce_443,
  3, 253, :_reduce_444,
  3, 253, :_reduce_445,
  3, 253, :_reduce_446,
  2, 253, :_reduce_447,
  1, 253, :_reduce_448,
  4, 253, :_reduce_449,
  0, 325, :_reduce_450,
  4, 252, :_reduce_451,
  0, 326, :_reduce_452,
  4, 252, :_reduce_453,
  0, 327, :_reduce_454,
  0, 328, :_reduce_455,
  4, 200, :_reduce_456,
  0, 329, :_reduce_457,
  0, 330, :_reduce_458,
  4, 322, :_reduce_459,
  0, 332, :_reduce_460,
  6, 263, :_reduce_461,
  1, 331, :_reduce_none,
  1, 331, :_reduce_none,
  6, 163, :_reduce_464,
  0, 163, :_reduce_465,
  1, 333, :_reduce_466,
  1, 333, :_reduce_none,
  1, 333, :_reduce_none,
  2, 334, :_reduce_469,
  1, 334, :_reduce_none,
  2, 165, :_reduce_471,
  1, 165, :_reduce_none,
  1, 240, :_reduce_473,
  1, 240, :_reduce_474,
  1, 240, :_reduce_none,
  1, 241, :_reduce_476,
  1, 336, :_reduce_477,
  1, 336, :_reduce_none,
  2, 336, :_reduce_479,
  3, 337, :_reduce_480,
  1, 337, :_reduce_481,
  3, 242, :_reduce_482,
  3, 243, :_reduce_483,
  3, 244, :_reduce_484,
  3, 244, :_reduce_485,
  1, 341, :_reduce_486,
  3, 341, :_reduce_487,
  1, 342, :_reduce_none,
  2, 342, :_reduce_489,
  3, 246, :_reduce_490,
  0, 345, :_reduce_491,
  4, 246, :_reduce_492,
  1, 344, :_reduce_493,
  3, 344, :_reduce_494,
  3, 245, :_reduce_495,
  3, 245, :_reduce_496,
  3, 247, :_reduce_497,
  3, 247, :_reduce_498,
  1, 346, :_reduce_499,
  3, 346, :_reduce_500,
  1, 347, :_reduce_501,
  3, 347, :_reduce_502,
  1, 338, :_reduce_503,
  2, 338, :_reduce_504,
  1, 339, :_reduce_505,
  2, 339, :_reduce_506,
  1, 340, :_reduce_507,
  2, 340, :_reduce_508,
  1, 343, :_reduce_509,
  0, 349, :_reduce_510,
  3, 343, :_reduce_511,
  0, 350, :_reduce_512,
  4, 343, :_reduce_513,
  1, 348, :_reduce_514,
  1, 348, :_reduce_515,
  1, 348, :_reduce_516,
  1, 348, :_reduce_none,
  2, 221, :_reduce_518,
  1, 221, :_reduce_519,
  1, 351, :_reduce_none,
  1, 351, :_reduce_none,
  1, 351, :_reduce_none,
  1, 351, :_reduce_none,
  3, 222, :_reduce_524,
  1, 335, :_reduce_none,
  2, 335, :_reduce_526,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 214, :_reduce_536,
  1, 214, :_reduce_537,
  1, 214, :_reduce_538,
  1, 214, :_reduce_539,
  1, 214, :_reduce_540,
  1, 214, :_reduce_541,
  1, 214, :_reduce_542,
  1, 248, :_reduce_543,
  1, 248, :_reduce_544,
  1, 181, :_reduce_545,
  1, 181, :_reduce_546,
  1, 186, :_reduce_547,
  1, 186, :_reduce_548,
  0, 352, :_reduce_549,
  4, 267, :_reduce_550,
  1, 267, :_reduce_551,
  3, 271, :_reduce_552,
  0, 354, :_reduce_553,
  3, 271, :_reduce_554,
  4, 353, :_reduce_555,
  2, 353, :_reduce_556,
  2, 353, :_reduce_557,
  1, 353, :_reduce_none,
  2, 356, :_reduce_559,
  0, 356, :_reduce_560,
  6, 320, :_reduce_561,
  8, 320, :_reduce_562,
  4, 320, :_reduce_563,
  6, 320, :_reduce_564,
  4, 320, :_reduce_565,
  6, 320, :_reduce_566,
  2, 320, :_reduce_567,
  4, 320, :_reduce_568,
  6, 320, :_reduce_569,
  2, 320, :_reduce_570,
  4, 320, :_reduce_571,
  2, 320, :_reduce_572,
  4, 320, :_reduce_573,
  1, 320, :_reduce_574,
  0, 320, :_reduce_575,
  1, 315, :_reduce_576,
  1, 315, :_reduce_577,
  1, 315, :_reduce_578,
  1, 315, :_reduce_579,
  1, 297, :_reduce_none,
  1, 297, :_reduce_581,
  1, 358, :_reduce_none,
  1, 359, :_reduce_none,
  3, 359, :_reduce_584,
  1, 307, :_reduce_585,
  3, 307, :_reduce_586,
  1, 360, :_reduce_none,
  2, 361, :_reduce_588,
  1, 361, :_reduce_589,
  2, 362, :_reduce_590,
  1, 362, :_reduce_591,
  1, 301, :_reduce_none,
  3, 301, :_reduce_593,
  1, 355, :_reduce_none,
  3, 355, :_reduce_595,
  1, 363, :_reduce_none,
  1, 363, :_reduce_none,
  2, 302, :_reduce_598,
  1, 302, :_reduce_599,
  3, 364, :_reduce_600,
  3, 365, :_reduce_601,
  1, 308, :_reduce_602,
  3, 308, :_reduce_603,
  1, 357, :_reduce_604,
  3, 357, :_reduce_605,
  1, 366, :_reduce_none,
  1, 366, :_reduce_none,
  2, 309, :_reduce_608,
  1, 309, :_reduce_609,
  1, 367, :_reduce_none,
  1, 367, :_reduce_none,
  2, 304, :_reduce_612,
  2, 303, :_reduce_613,
  0, 303, :_reduce_614,
  1, 272, :_reduce_none,
  0, 368, :_reduce_616,
  4, 272, :_reduce_617,
  1, 251, :_reduce_618,
  2, 251, :_reduce_none,
  1, 234, :_reduce_none,
  3, 234, :_reduce_621,
  3, 369, :_reduce_622,
  2, 369, :_reduce_623,
  4, 369, :_reduce_624,
  2, 369, :_reduce_625,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  1, 273, :_reduce_none,
  1, 273, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  0, 153, :_reduce_none,
  1, 153, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  2, 208, :_reduce_none,
  2, 184, :_reduce_none,
  0, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 268, :_reduce_651,
  1, 268, :_reduce_none,
  1, 156, :_reduce_none,
  2, 156, :_reduce_654,
  0, 154, :_reduce_655 ]

racc_reduce_n = 656

racc_shift_n = 1101

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tBDOT2 => 144,
  :tBDOT3 => 145,
  :tLOWEST => 146,
  :tEQL => 147 }

racc_nt_base = 148

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tBDOT2",
  "tBDOT3",
  "tLOWEST",
  "tEQL",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "@3",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@4",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "@29",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "@36",
  "cases",
  "@37",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "@38",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@39",
  "@40",
  "sym",
  "@41",
  "args_tail",
  "@42",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@43",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG

    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val

                      lexer.cond.pop # local_pop
                      lexer.cmdarg.pop

    result
end

def _reduce_3(val, _values, result)
                      stmt, _ = val
                      result = stmt

    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend

    result
end

def _reduce_10(val, _values, result)
                      (_, lineno), _, iter = val
                      iter.line lineno

                      (_, preexe,) = iter
                      preexe.line lineno

                      result = iter

    result
end

def _reduce_11(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_12(val, _values, result)
                      _, line, stmt, _ = val
                      result = new_iter s(:preexe).line(line), 0, stmt

    result
end

def _reduce_13(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res

    result
end

def _reduce_14(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]

    result
end

def _reduce_15(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]

    result
end

def _reduce_16(val, _values, result)
                      result = new_compstmt val

    result
end

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

def _reduce_20(val, _values, result)
                      result = val[1]
                      debug20 2, val, result

    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
                      yyerror "BEGIN is permitted only at toplevel"

    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_24(val, _values, result)
                      (_, line), lhs, _, rhs = val
                      result = s(:alias, lhs, rhs).line(line).line line

    result
end

def _reduce_25(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, rhs.to_sym).line line

    result
end

def _reduce_26(val, _values, result)
                      (_, line), lhs, rhs = val
                      result = s(:valias, lhs.to_sym, :"$#{rhs}").line line

    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"

    result
end

def _reduce_28(val, _values, result)
                      result = val[1]

    result
end

def _reduce_29(val, _values, result)
                      t, _, c = val
                      result = new_if c, t, nil

    result
end

def _reduce_30(val, _values, result)
                      f, _, c = val
                      result = new_if c, nil, f

    result
end

def _reduce_31(val, _values, result)
                      e, _, c = val
                      result = new_while e, c, true

    result
end

def _reduce_32(val, _values, result)
                      e, _, c = val
                      result = new_until e, c, true

    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val

                      resbody = new_resbody s(:array).line(resbody.line), resbody
                      result = new_rescue body, resbody

    result
end

def _reduce_34(val, _values, result)
                      (_, line), _, stmt, _ = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end

                      result = new_iter s(:postexe).line(line), 0, stmt

    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap

    result
end

def _reduce_37(val, _values, result)
                      lhs, _, rhs = val
                      result = new_assign lhs, s(:svalue, rhs).line(rhs.line)

    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]

    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_43(val, _values, result)
                      prim, _, id, opasgn, rhs = val
                      result = s(:op_asgn, prim, rhs, id.to_sym, opasgn.to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line

    result
end

def _reduce_45(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_46(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      result = s(:op_asgn, lhs1, rhs, lhs2.to_sym, op.to_sym)

    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr

    result
end

def _reduce_49(val, _values, result)
                      expr, (_, line), resbody = val

                      expr = value_expr expr
                      ary  = s(:array).line line
                      result = new_rescue(expr, new_resbody(ary, resbody))

    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :and, lhs, rhs

    result
end

def _reduce_53(val, _values, result)
                      lhs, _, rhs = val
                      result = logical_op :or, lhs, rhs

    result
end

def _reduce_54(val, _values, result)
                      (_, line), _, expr = val
                      result = new_call(expr, :"!").line line
                      # REFACTOR: call_uni_op

    result
end

def _reduce_55(val, _values, result)
                      _, cmd = val
                      result = new_call(cmd, :"!").line cmd.line
                      # TODO: fix line number to tBANG... but causes BAD shift/reduce conflict
                      # REFACTOR: call_uni_op -- see parse26.y

    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = value_expr(val[0])

    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.push true

    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.pop

    result
end

def _reduce_60(val, _values, result)
                      _, expr, _, _ = val
                      result = expr

    result
end

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      blk, _, msg, args = val
                      result = new_call(blk, msg.to_sym, args).line blk.line

    result
end

def _reduce_65(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno

    result
end

def _reduce_66(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend

    result
end

def _reduce_67(val, _values, result)
                      msg, = val
                      result = new_call(nil, msg.to_sym).line lexer.lineno

    result
end

def _reduce_68(val, _values, result)
                      call, args = val
                      result = call.concat args.sexp_body

    result
end

def _reduce_69(val, _values, result)
                      call, args, block = val

                      result = call.concat args.sexp_body

                      if block then
                        block_dup_check result, block

                        result, operation = block, result
                        result.insert 1, operation
                      end

    result
end

def _reduce_70(val, _values, result)
                      lhs, callop, op, args = val
                      result = new_call lhs, op.to_sym, args, callop

    result
end

def _reduce_71(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_72(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_73(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block

    result
end

def _reduce_74(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_75(val, _values, result)
                      (_, line), args = val
                      result = new_yield args
                      result.line line # TODO: push to new_yield

    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)

    result
end

def _reduce_77(val, _values, result)
                      (_, line), args = val
                      result = s(:break, ret_args(args)).line line

    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)

    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = val[1]

    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      _, arg, _ = val
                      l = arg.line

                      result = s(:masgn, s(:array, arg).line(l)).line l

    result
end

def _reduce_83(val, _values, result)
                      head, = val
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_84(val, _values, result)
                      lhs, rhs = val
                      result = s(:masgn, lhs << rhs.compact).line lhs.line

    result
end

def _reduce_85(val, _values, result)
                      head, _, tail = val
                      head << s(:splat, tail).line(tail.line)
                      result = s(:masgn, head).line head.line

    result
end

def _reduce_86(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat).line(splat.line)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result).line result.line

    result
end

def _reduce_87(val, _values, result)
                      head, _ = val
                      l = head.line
                      result = s(:masgn, head << s(:splat).line(l)).line l

    result
end

def _reduce_88(val, _values, result)
                      head, _, _, post = val
                      ary = list_append head, s(:splat).line(head.line)
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_89(val, _values, result)
                      _, node = val
                      l = node.line
                      splat  = s(:splat, node).line l
                      ary    = s(:array, splat).line l
                      result = s(:masgn, ary).line l

    result
end

def _reduce_90(val, _values, result)
                      _, node, _, post = val

                      splat = s(:splat, node).line node.line
                      ary = s(:array, splat).line splat.line
                      ary.concat post.sexp_body
                      result = s(:masgn, ary).line ary.line

    result
end

def _reduce_91(val, _values, result)
                      l = lexer.lineno
                      result = s(:masgn, s(:array, s(:splat).line(l)).line(l)).line l

    result
end

def _reduce_92(val, _values, result)
                      _, _, post = val
                      l = post.line

                      splat = s(:splat).line l
                      ary = s(:array, splat, *post.sexp_body).line l
                      result = s(:masgn, ary).line l

    result
end

# reduce 93 omitted

def _reduce_94(val, _values, result)
                      result = val[1]

    result
end

def _reduce_95(val, _values, result)
                      lhs, _ = val
                      result = s(:array, lhs).line lhs.line

    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[1].compact

    result
end

def _reduce_97(val, _values, result)
                      item, = val
                      result = s(:array, item).line item.line

    result
end

def _reduce_98(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]

    result
end

def _reduce_102(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_103(val, _values, result)
                      recv, _, id = val
                      result = new_attrasgn recv, id

    result
end

def _reduce_104(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      expr, _, id = val
                      l = expr.line

                      result = s(:const, s(:colon2, expr, id.to_sym).line(l), nil).line l

    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      _, id = val
                      l = lexer.lineno

                      result = s(:const, nil, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_108(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line

    result
end

def _reduce_109(val, _values, result)
                      line = lexer.lineno
                      result = self.assignable val[0]
                      result.line = line
                      debug20 9, val, result

    result
end

def _reduce_110(val, _values, result)
                      lhs, _, args, _ = val
                      result = self.aryset lhs, args

    result
end

def _reduce_111(val, _values, result)
                      lhs, op, id = val
                      result = new_attrasgn lhs, id, op

    result
end

def _reduce_112(val, _values, result)
                      lhs, _, id = val
                      result = new_attrasgn lhs, id

    result
end

def _reduce_113(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]

    result
end

def _reduce_114(val, _values, result)
                      expr, _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      l = expr.line
                      result = s(:const, s(:colon2, expr, id.to_sym).line(l)).line l

    result
end

def _reduce_115(val, _values, result)
                      _, id = val

                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      l = lexer.lineno
                      result = s(:const, s(:colon3, id.to_sym).line(l)).line l

    result
end

def _reduce_116(val, _values, result)
                      self.backref_assign_error val[0]

    result
end

def _reduce_117(val, _values, result)
                      yyerror "class/module name must be CONSTANT"

    result
end

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      _, name = val
                      result = s(:colon3, name.to_sym).line lexer.lineno

    result
end

def _reduce_120(val, _values, result)
                      result = val[0].to_sym

    result
end

def _reduce_121(val, _values, result)
                      pval, _, name = val

                      result = s(:colon2, pval, name.to_sym)
                      result.line pval.line

    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]

    result
end

def _reduce_126(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym

    result
end

# reduce 127 omitted

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      id, = val
                      result = s(:lit, id.to_sym).line lexer.lineno

    result
end

# reduce 130 omitted

def _reduce_131(val, _values, result)
                      result = new_undef val[0]

    result
end

def _reduce_132(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_133(val, _values, result)
                      result = new_undef val[0], val[3]

    result
end

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

def _reduce_206(val, _values, result)
                      result = new_assign val[0], val[2]

    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn val

    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn1 val

    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_210(val, _values, result)
                      result = new_op_asgn2 val

    result
end

def _reduce_211(val, _values, result)
                      lhs, _, id, op, rhs = val

                      result = s(:op_asgn, lhs, rhs, id.to_sym, op.to_sym).line lhs.line

    result
end

def _reduce_212(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_213(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_214(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]

    result
end

def _reduce_215(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn

    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last)).line v1.line
                      else
                        result = s(:dot2, v1, v2).line v1.line
                      end

    result
end

def _reduce_217(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last)).line v1.line
                      else
                        result = s(:dot3, v1, v2).line v1.line
                      end

    result
end

def _reduce_218(val, _values, result)
                      v1, _ = val
                      v2 = nil

                      result = s(:dot2, v1, v2).line v1.line

    result
end

def _reduce_219(val, _values, result)
                      v1, _ = val
                      v2 = nil

                      result = s(:dot3, v1, v2).line v1.line

    result
end

def _reduce_220(val, _values, result)
                      _, v2, = val
                      v1 = nil

                      result = s(:dot2, v1, v2).line v2.line

    result
end

def _reduce_221(val, _values, result)
                      _, v2 = val
                      v1 = nil

                      result = s(:dot3, v1, v2).line v2.line

    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])

    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])

    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])

    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])

    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])

    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])

    result
end

def _reduce_228(val, _values, result)
                      lit = s(:lit, val[1]).line lexer.lineno
                      result = new_call(new_call(lit, :"**", argl(val[3])), :"-@")


    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[1], :"+@"

    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"-@"

    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])

    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])

    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])

    result
end

def _reduce_234(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])

    result
end

# reduce 235 omitted

def _reduce_236(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])

    result
end

def _reduce_237(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])

    result
end

def _reduce_238(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])

    result
end

def _reduce_239(val, _values, result)
                      lhs, _, rhs = val
                      result = new_match lhs, rhs

    result
end

def _reduce_240(val, _values, result)
                      lhs, _, rhs = val
                      result = s(:not, new_match(lhs, rhs)).line lhs.line

    result
end

def _reduce_241(val, _values, result)
                      _, arg = val
                      result = new_call arg, :"!"
                      result.line arg.line

    result
end

def _reduce_242(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"

    result
end

def _reduce_243(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])

    result
end

def _reduce_244(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])

    result
end

def _reduce_245(val, _values, result)
                      result = logical_op :and, val[0], val[2]

    result
end

def _reduce_246(val, _values, result)
                      result = logical_op :or, val[0], val[2]

    result
end

def _reduce_247(val, _values, result)
                      (_, line), _, arg = val
                      result = s(:defined, arg).line line

    result
end

def _reduce_248(val, _values, result)
                      c, _, t, _, _, f = val
                      result = s(:if, c, t, f).line c.line

    result
end

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

# reduce 253 omitted

def _reduce_254(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_255(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)

    result
end

def _reduce_256(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 257 omitted

def _reduce_258(val, _values, result)
                      result = args [val[0]]

    result
end

def _reduce_259(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_260(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      body, (_, line), resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody

                      ary = s(:array).line line
                      result  = new_rescue(body, new_resbody(ary, resbody))

    result
end

def _reduce_263(val, _values, result)
                      _, args, _ = val
                      result = args

    result
end

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

def _reduce_268(val, _values, result)
                      result = args val

    result
end

def _reduce_269(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]

    result
end

def _reduce_270(val, _values, result)
                      result = args [array_to_hash(val[0])]

    result
end

def _reduce_271(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val

    result
end

def _reduce_272(val, _values, result)
                      result = call_args val

    result
end

def _reduce_273(val, _values, result)
                      result = call_args [array_to_hash(val[0]), val[1]]

    result
end

def _reduce_274(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2]), val[3]]

    result
end

def _reduce_275(val, _values, result)
                      result = call_args val

    result
end

def _reduce_276(val, _values, result)
                      # parse26.y line 2200

                      # If call_args starts with a open paren '(' or
                      # '[', look-ahead reading of the letters calls
                      # CMDARG_PUSH(0), but the push must be done
                      # after CMDARG_PUSH(1). So this code makes them
                      # consistent by first cancelling the premature
                      # CMDARG_PUSH(0), doing CMDARG_PUSH(1), and
                      # finally redoing CMDARG_PUSH(0).

                      result = yychar = self.last_token_type.first
                      lookahead = [:tLPAREN, :tLPAREN_ARG, :tLPAREN2, :tLBRACK, :tLBRACK2].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.push true
                      lexer.cmdarg.push false if lookahead

    result
end

def _reduce_277(val, _values, result)
                      yychar, args = val

                      # call_args can be followed by tLBRACE_ARG (that
                      # does CMDARG_PUSH(0) in the lexer) but the push
                      # must be done after CMDARG_POP() in the parser.
                      # So this code does CMDARG_POP() to pop 0 pushed
                      # by tLBRACE_ARG, CMDARG_POP() to pop 1 pushed
                      # by command_args, and CMDARG_PUSH(0) to restore
                      # back the flag set by tLBRACE_ARG.

                      lookahead = [:tLBRACE_ARG].include?(yychar)
                      lexer.cmdarg.pop if lookahead
                      lexer.cmdarg.pop
                      lexer.cmdarg.push false if lookahead
                      result = args

    result
end

def _reduce_278(val, _values, result)
                      _, arg = val
                      result = s(:block_pass, arg).line arg.line

    result
end

def _reduce_279(val, _values, result)
                      result = val[1]

    result
end

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      arg, = val
                      lineno = arg.line || lexer.lineno # HACK

                      result = s(:array, arg).line lineno

    result
end

def _reduce_282(val, _values, result)
                      _, arg = val
                      result = s(:array, s(:splat, arg).line(arg.line)).line arg.line

    result
end

def _reduce_283(val, _values, result)
                      args, _, id = val
                      result = self.list_append args, id

    result
end

def _reduce_284(val, _values, result)
                      # TODO: the line number from tSTAR has been dropped
                      args, _, _, id = val
                      line = lexer.lineno
                      result = self.list_append args, s(:splat, id).line(line)

    result
end

def _reduce_285(val, _values, result)
                      result = new_masgn_arg val[0]

    result
end

def _reduce_286(val, _values, result)
                      result = new_masgn_arg val[0], :wrap

    result
end

def _reduce_287(val, _values, result)
                      result = val[0] << val[2]

    result
end

def _reduce_288(val, _values, result)
                      # TODO: make all tXXXX terminals include lexer.lineno
                      arg, _, _, splat = val
                      result = self.arg_concat arg, splat

    result
end

def _reduce_289(val, _values, result)
                      _, arg = val
                      result = s(:splat, arg).line arg.line

    result
end

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

def _reduce_300(val, _values, result)
                      msg, = val
                      result = new_call nil, msg.to_sym

    result
end

def _reduce_301(val, _values, result)
                      lexer.cmdarg.push false
                      result = self.lexer.lineno

    result
end

def _reduce_302(val, _values, result)
                      lexer.cmdarg.pop
                      result = new_begin val

    result
end

def _reduce_303(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                      result = lexer.lineno

    result
end

def _reduce_304(val, _values, result)
                      _, line, _ = val
                      result = s(:begin).line line

    result
end

def _reduce_305(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG

    result
end

def _reduce_306(val, _values, result)
                      _, stmt, _, _, = val
                      # warning "(...) interpreted as grouped expression"
                      result = stmt

    result
end

def _reduce_307(val, _values, result)
                      _, stmt, _ = val
                      result = stmt
                      result ||= s(:nil).line lexer.lineno
                      result.paren = true

    result
end

def _reduce_308(val, _values, result)
                      expr, _, id = val

                      result = s(:colon2, expr, id.to_sym).line expr.line

    result
end

def _reduce_309(val, _values, result)
                      _, id = val

                      result = s(:colon3, id.to_sym).line lexer.lineno

    result
end

def _reduce_310(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_311(val, _values, result)
                      _, line, args, _ = val
                      result = args || s(:array)
                      result.sexp_type = :array # aref_args is :args
                      result.line line

    result
end

def _reduce_312(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_313(val, _values, result)
                      result = new_hash val

    result
end

def _reduce_314(val, _values, result)
                      (_, line), = val
                      result = s(:return).line line

    result
end

def _reduce_315(val, _values, result)
                      result = new_yield val[2]

    result
end

def _reduce_316(val, _values, result)
                      result = new_yield

    result
end

def _reduce_317(val, _values, result)
                      result = new_yield

    result
end

def _reduce_318(val, _values, result)
                      (_, line), _, _, arg, _ = val

                      result = s(:defined, arg).line line

    result
end

def _reduce_319(val, _values, result)
                      _, _, lhs, _ = val
                      result = new_call lhs, :"!"

    result
end

def _reduce_320(val, _values, result)
                      debug20 14, val, result

    result
end

def _reduce_321(val, _values, result)
                      call, iter = val

                      iter.insert 1, call
                      result = iter
                      # FIX: probably not: call.line = iter.line

    result
end

# reduce 322 omitted

def _reduce_323(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter

    result
end

def _reduce_324(val, _values, result)
                      result = val[1] # TODO: fix lineno

    result
end

def _reduce_325(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f

    result
end

def _reduce_326(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t

    result
end

def _reduce_327(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true

    result
end

def _reduce_328(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true

    result
end

def _reduce_329(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line

    result
end

def _reduce_330(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line

    result
end

def _reduce_331(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body

    result
end

def _reduce_332(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_333(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend

    result
end

def _reduce_334(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_335(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_336(val, _values, result)
                      result = self.in_def
                      self.in_def = false

    result
end

def _reduce_337(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend

    result
end

def _reduce_338(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_339(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_340(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend

    result
end

def _reduce_341(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_342(val, _values, result)
                      result = self.in_def

                      self.in_def = true # group = local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      self.comments.push self.lexer.comments

    result
end

def _reduce_343(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_344(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_345(val, _values, result)
                      lexer.lex_state = EXPR_FNAME

    result
end

def _reduce_346(val, _values, result)
                      result = [self.in_def, lexer.lineno]

                      self.in_single += 1 # TODO: remove?

                      self.in_def = true # local_push
                      self.env.extend
                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_state = EXPR_ENDFN|EXPR_LABEL
                      self.comments.push self.lexer.comments

    result
end

def _reduce_347(val, _values, result)
                      _, _recv, _, _, _name, (in_def, _lineno), _args, _body, _ = val

                      result = new_defs val

                      lexer.cond.pop # group = local_pop
                      lexer.cmdarg.pop
                      self.env.unextend
                      self.in_def = in_def

                      self.in_single -= 1

                      # TODO: restore cur_arg ? what's cur_arg?

                      self.lexer.comments # we don't care about comments in the body

    result
end

def _reduce_348(val, _values, result)
                      (_, line), = val
                      result = s(:break).line line

    result
end

def _reduce_349(val, _values, result)
                      (_, line), = val
                      result = s(:next).line line

    result
end

def _reduce_350(val, _values, result)
                      (_, line), = val
                      result = s(:redo).line line

    result
end

def _reduce_351(val, _values, result)
                      (_, line), = val
                      result = s(:retry).line line

    result
end

def _reduce_352(val, _values, result)
                      result = value_expr(val[0])

    result
end

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

# reduce 372 omitted

# reduce 373 omitted

# reduce 374 omitted

# reduce 375 omitted

# reduce 376 omitted

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      (_, line), c, _, t, rest = val

                      result = s(:if, c, t, rest).line line

    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      result = val[1]

    result
end

# reduce 381 omitted

def _reduce_382(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK

    result
end

# reduce 383 omitted

def _reduce_384(val, _values, result)
                      result = val[1]

    result
end

def _reduce_385(val, _values, result)
                      sym, = val

                      result = s(:array, sym).line lexer.lineno

    result
end

def _reduce_386(val, _values, result)
                      result = list_append val[0], val[2]

    result
end

def _reduce_387(val, _values, result)
                      args, = val

                      result = block_var args

    result
end

def _reduce_388(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym

    result
end

def _reduce_389(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2

    result
end

def _reduce_390(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*

    result
end

def _reduce_391(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2

    result
end

def _reduce_392(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"

    result
end

def _reduce_393(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args

    result
end

def _reduce_394(val, _values, result)
                      result = block_var :*

    result
end

def _reduce_395(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args

    result
end

def _reduce_396(val, _values, result)
                      result = call_args val

    result
end

def _reduce_397(val, _values, result)
                      result = call_args val

    result
end

def _reduce_398(val, _values, result)
                      result = call_args val

    result
end

def _reduce_399(val, _values, result)
                      line = lexer.lineno
                      result = call_args val # TODO: push line down
                      result.line line

    result
end

def _reduce_400(val, _values, result)
                      result = args val

    result
end

# reduce 401 omitted

def _reduce_402(val, _values, result)
                      result = args val

    result
end

def _reduce_403(val, _values, result)
                      result = args val

    result
end

def _reduce_404(val, _values, result)
                      result = args val

    result
end

def _reduce_405(val, _values, result)
                      result = args val

    result
end

def _reduce_406(val, _values, result)
                      result = args val

    result
end

def _reduce_407(val, _values, result)
                      result = args(val) << nil

    result
end

def _reduce_408(val, _values, result)
                      result = args val

    result
end

def _reduce_409(val, _values, result)
                      result = args val

    result
end

def _reduce_410(val, _values, result)
                      result = args val

    result
end

def _reduce_411(val, _values, result)
                      result = args val

    result
end

def _reduce_412(val, _values, result)
                      result = args val

    result
end

def _reduce_413(val, _values, result)
                      result = args val

    result
end

def _reduce_414(val, _values, result)
                      result = args val

    result
end

def _reduce_415(val, _values, result)
                      result = args val

    result
end

def _reduce_416(val, _values, result)
                      result = args val

    result
end

def _reduce_417(val, _values, result)
 result = 0
    result
end

def _reduce_418(val, _values, result)
                      self.lexer.command_start = true

    result
end

def _reduce_419(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

def _reduce_420(val, _values, result)
                      result = s(:args).line lexer.lineno

    result
end

def _reduce_421(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val

    result
end

# reduce 422 omitted

def _reduce_423(val, _values, result)
                      result = args val

    result
end

def _reduce_424(val, _values, result)
                      result = args val

    result
end

def _reduce_425(val, _values, result)
                      result = args val

    result
end

def _reduce_426(val, _values, result)
                      id, = val
                      line = lexer.lineno
                      result = s(:shadow, id.to_sym).line line

    result
end

# reduce 427 omitted

def _reduce_428(val, _values, result)
                      self.env.extend :dynamic
                      result = [lexer.lineno, lexer.lpar_beg]
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest

    result
end

def _reduce_429(val, _values, result)
                      lexer.cmdarg.push false

    result
end

def _reduce_430(val, _values, result)
                      (line, lpar), args, _cmdarg, body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.pop

                      call = s(:lambda).line line
                      result = new_iter call, args, body
                      result.line = line
                      self.env.unextend # TODO: dynapush & dynapop

    result
end

def _reduce_431(val, _values, result)
                      result = args val

    result
end

def _reduce_432(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)

    result
end

def _reduce_433(val, _values, result)
                      result = val[1]

    result
end

def _reduce_434(val, _values, result)
                      result = val[1]

    result
end

def _reduce_435(val, _values, result)
                      (_, line), iter, _ = val
                      result = iter.line line

    result
end

def _reduce_436(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      cmd, blk = val

                      result = blk
                      result.insert 1, cmd

    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_438(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_439(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2

    result
end

def _reduce_440(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_441(val, _values, result)
                      call, lineno, args = val

                      result = call.concat args.sexp_body if args
                      result.line lineno

    result
end

def _reduce_442(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]

    result
end

def _reduce_443(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]

    result
end

def _reduce_444(val, _values, result)
                      result = new_call val[0], val[2].to_sym

    result
end

def _reduce_445(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]

    result
end

def _reduce_446(val, _values, result)
                      result = new_call val[0], :call, val[2]

    result
end

def _reduce_447(val, _values, result)
                      result = new_super val[1]

    result
end

def _reduce_448(val, _values, result)
                      result = s(:zsuper).line lexer.lineno

    result
end

def _reduce_449(val, _values, result)
                      result = new_aref val

    result
end

def _reduce_450(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_451(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_452(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

    result
end

def _reduce_453(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend

    result
end

def _reduce_454(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_455(val, _values, result)
 result = lexer.cmdarg.store(false)
    result
end

def _reduce_456(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?

    result
end

def _reduce_457(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno
    result
end

def _reduce_458(val, _values, result)
 lexer.cmdarg.push false
    result
end

def _reduce_459(val, _values, result)
                      line, _cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      lexer.cmdarg.pop
                      self.env.unextend

    result
end

def _reduce_460(val, _values, result)
                      result = self.lexer.lineno

    result
end

def _reduce_461(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]

    result
end

# reduce 462 omitted

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!").line(var.line)) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above

    result
end

def _reduce_465(val, _values, result)
                      result = nil

    result
end

def _reduce_466(val, _values, result)
                      arg, = val
                      result = s(:array, arg).line arg.line

    result
end

# reduce 467 omitted

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      result = val[1]

    result
end

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      (_, line), body = val

                      result = body || s(:nil).line(line)

    result
end

# reduce 472 omitted

def _reduce_473(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

def _reduce_474(val, _values, result)
                      line = lexer.lineno
                      result = s(:lit, val[0])
                      result.line = line

    result
end

# reduce 475 omitted

def _reduce_476(val, _values, result)
                      str, = val
                      str = s(:dstr, str.value) if str.sexp_type == :evstr
                      result = str

    result
end

def _reduce_477(val, _values, result)
                      debug20 23, val, result

    result
end

# reduce 478 omitted

def _reduce_479(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_480(val, _values, result)
                      _, str, (_, func) = val

                      str = dedent str if func =~ RubyLexer::STR_FUNC_ICNTNT

                      result = str

    result
end

def _reduce_481(val, _values, result)
                      result = new_string val

    result
end

def _reduce_482(val, _values, result)
                      result = new_xstring val
                      # TODO: dedent?!?! SERIOUSLY?!?

    result
end

def _reduce_483(val, _values, result)
                      result = new_regexp val

    result
end

def _reduce_484(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_485(val, _values, result)
                      result = val[1]

    result
end

def _reduce_486(val, _values, result)
                      result = new_word_list

    result
end

def _reduce_487(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)

    result
end

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      result = self.literal_concat val[0], val[1]

    result
end

def _reduce_490(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_491(val, _values, result)
 result = lexer.lineno
    result
end

def _reduce_492(val, _values, result)
                      _, line, list, _, = val
                      list.line = line
                      result = list

    result
end

def _reduce_493(val, _values, result)
                      result = new_symbol_list.line lexer.lineno

    result
end

def _reduce_494(val, _values, result)
                      list, * = val
                      result = list.dup << new_symbol_list_entry(val)

    result
end

def _reduce_495(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

def _reduce_496(val, _values, result)
                      result = val[1]

    result
end

def _reduce_497(val, _values, result)
                      result = s(:array).line lexer.lineno # FIX

    result
end

def _reduce_498(val, _values, result)
                      result = val[1]

    result
end

def _reduce_499(val, _values, result)
                      result = new_qword_list

    result
end

def _reduce_500(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)

    result
end

def _reduce_501(val, _values, result)
                      result = new_qsym_list

    result
end

def _reduce_502(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)

    result
end

def _reduce_503(val, _values, result)
                      result = s(:str, "").line lexer.lineno

    result
end

def _reduce_504(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_505(val, _values, result)
                      result = nil

    result
end

def _reduce_506(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_507(val, _values, result)
                      result = nil

    result
end

def _reduce_508(val, _values, result)
                      v1, v2 = val
                      result = literal_concat v1, v2

    result
end

def _reduce_509(val, _values, result)
                      result = new_string val

    result
end

def _reduce_510(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_511(val, _values, result)
                      _, strterm, str = val
                      lexer.lex_strterm = strterm
                      result = s(:evstr, str).line str.line

    result
end

def _reduce_512(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.lex_state,
                                lexer.lineno,
                               ]

                      lexer.cmdarg.push false
                      lexer.cond.push false

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG

    result
end

def _reduce_513(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldlex_state, line = memo
                      # TODO: heredoc_indent

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cmdarg.pop
                      lexer.cond.pop

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt).line line
                        end
                      when nil then
                        result = s(:evstr).line line
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end

    result
end

def _reduce_514(val, _values, result)
 result = s(:gvar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_515(val, _values, result)
 result = s(:ivar, val[0].to_sym).line lexer.lineno
    result
end

def _reduce_516(val, _values, result)
 result = s(:cvar, val[0].to_sym).line lexer.lineno
    result
end

# reduce 517 omitted

def _reduce_518(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym

    result
end

def _reduce_519(val, _values, result)
                      result = val[0].to_sym

    result
end

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

def _reduce_524(val, _values, result)
                      _, result, _ = val

                      lexer.lex_state = EXPR_END

                      result ||= s(:str, "").line lexer.lineno

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym).line result.line
                      when :evstr then
                        result = s(:dsym, "", result).line result.line
                      else
                        debug20 26, val, result
                      end

    result
end

# reduce 525 omitted

def _reduce_526(val, _values, result)
                      result = -val[1] # TODO: pt_testcase

    result
end

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

def _reduce_536(val, _values, result)
 result = s(:nil).line lexer.lineno
    result
end

def _reduce_537(val, _values, result)
 result = s(:self).line lexer.lineno
    result
end

def _reduce_538(val, _values, result)
 result = s(:true).line lexer.lineno
    result
end

def _reduce_539(val, _values, result)
 result = s(:false).line lexer.lineno
    result
end

def _reduce_540(val, _values, result)
 result = s(:str, self.file).line lexer.lineno
    result
end

def _reduce_541(val, _values, result)
 result = s(:lit, lexer.lineno).line lexer.lineno
    result
end

def _reduce_542(val, _values, result)
                      l = lexer.lineno
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding).line(l), :UTF_8).line l
                        else
                          s(:str, "Unsupported!").line l
                        end

    result
end

def _reduce_543(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_544(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)

    result
end

def _reduce_545(val, _values, result)
                      result = self.assignable val[0]

    result
end

def _reduce_546(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result

    result
end

def _reduce_547(val, _values, result)
 result = s(:nth_ref,  val[0]).line lexer.lineno
    result
end

def _reduce_548(val, _values, result)
 result = s(:back_ref, val[0]).line lexer.lineno
    result
end

def _reduce_549(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_550(val, _values, result)
                      result = val[2]

    result
end

def _reduce_551(val, _values, result)
                      result = nil

    result
end

def _reduce_552(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true

    result
end

def _reduce_553(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL

    result
end

def _reduce_554(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true

    result
end

def _reduce_555(val, _values, result)
                      result = args val

    result
end

def _reduce_556(val, _values, result)
                      result = args val

    result
end

def _reduce_557(val, _values, result)
                      result = args val

    result
end

# reduce 558 omitted

def _reduce_559(val, _values, result)
                      result = val[1]

    result
end

def _reduce_560(val, _values, result)
                      result = nil

    result
end

def _reduce_561(val, _values, result)
                      result = args val

    result
end

def _reduce_562(val, _values, result)
                      result = args val

    result
end

def _reduce_563(val, _values, result)
                      result = args val

    result
end

def _reduce_564(val, _values, result)
                      result = args val

    result
end

def _reduce_565(val, _values, result)
                      result = args val

    result
end

def _reduce_566(val, _values, result)
                      result = args val

    result
end

def _reduce_567(val, _values, result)
                      result = args val

    result
end

def _reduce_568(val, _values, result)
                      result = args val

    result
end

def _reduce_569(val, _values, result)
                      result = args val

    result
end

def _reduce_570(val, _values, result)
                      result = args val

    result
end

def _reduce_571(val, _values, result)
                      result = args val

    result
end

def _reduce_572(val, _values, result)
                      result = args val

    result
end

def _reduce_573(val, _values, result)
                      result = args val

    result
end

def _reduce_574(val, _values, result)
                      result = args val

    result
end

def _reduce_575(val, _values, result)
                      result = args val

    result
end

def _reduce_576(val, _values, result)
                      yyerror "formal argument cannot be a constant"

    result
end

def _reduce_577(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"

    result
end

def _reduce_578(val, _values, result)
                      yyerror "formal argument cannot be a global variable"

    result
end

def _reduce_579(val, _values, result)
                      yyerror "formal argument cannot be a class variable"

    result
end

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier

    result
end

# reduce 582 omitted

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      result = val[1]

    result
end

def _reduce_585(val, _values, result)
                      arg, = val

                      case arg
                      when Symbol then
                        result = s(:args, arg).line lexer.lineno
                      when Sexp then
                        result = arg
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end

    result
end

def _reduce_586(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list).line list.line
                      end

                      result << item

    result
end

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), arg = val

                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      kwarg  = s(:kwarg, identifier, arg).line line
                      result = s(:array, kwarg).line line

    result
end

def _reduce_589(val, _values, result)
                      (label, line), = val

                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

def _reduce_590(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), expr = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id, expr).line(line)).line line

    result
end

def _reduce_591(val, _values, result)
                      # TODO: new_kw_arg
                      (label, line), = val
                      id = label.to_sym
                      self.env[id] = :lvar

                      result = s(:array, s(:kwarg, id).line(line)).line line

    result
end

# reduce 592 omitted

def _reduce_593(val, _values, result)
                      list, _, item = val
                      result = list << item.last

    result
end

# reduce 594 omitted

def _reduce_595(val, _values, result)
                      result = args val

    result
end

# reduce 596 omitted

# reduce 597 omitted

def _reduce_598(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"

    result
end

def _reduce_599(val, _values, result)
                      result = :"**"

    result
end

def _reduce_600(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names

    result
end

def _reduce_601(val, _values, result)
                      result = self.assignable val[0], val[2]

    result
end

def _reduce_602(val, _values, result)
                      optblk, = val
                      result = s(:block, optblk).line optblk.line

    result
end

def _reduce_603(val, _values, result)
                      optarg, _, optblk = val
                      result = optarg
                      result << optblk

    result
end

def _reduce_604(val, _values, result)
                      opt, = val
                      result = s(:block, opt).line opt.line

    result
end

def _reduce_605(val, _values, result)
                      result = self.block_append val[0], val[2]

    result
end

# reduce 606 omitted

# reduce 607 omitted

def _reduce_608(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"

    result
end

def _reduce_609(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name

    result
end

# reduce 610 omitted

# reduce 611 omitted

def _reduce_612(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym

    result
end

def _reduce_613(val, _values, result)
                      result = val[1]

    result
end

def _reduce_614(val, _values, result)
                      result = nil

    result
end

# reduce 615 omitted

def _reduce_616(val, _values, result)
                      lexer.lex_state = EXPR_BEG

    result
end

def _reduce_617(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit

    result
end

def _reduce_618(val, _values, result)
                      result = s(:array).line lexer.lineno

    result
end

# reduce 619 omitted

# reduce 620 omitted

def _reduce_621(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash

    result
end

def _reduce_622(val, _values, result)
                      v1, _, v2 = val
                      result = s(:array, v1, v2).line v1.line

    result
end

def _reduce_623(val, _values, result)
                      (label, line), arg = val

                      lit = s(:lit, label.to_sym).line line
                      result = s(:array, lit, arg).line line

    result
end

def _reduce_624(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value).line sym.line

    result
end

def _reduce_625(val, _values, result)
                      _, arg = val
                      line = arg.line
                      result = s(:array, s(:kwsplat, arg).line(line)).line line

    result
end

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

# reduce 643 omitted

# reduce 644 omitted

# reduce 645 omitted

# reduce 646 omitted

# reduce 647 omitted

# reduce 648 omitted

# reduce 649 omitted

# reduce 650 omitted

def _reduce_651(val, _values, result)
 yyerrok
    result
end

# reduce 652 omitted

# reduce 653 omitted

def _reduce_654(val, _values, result)
 yyerrok
    result
end

def _reduce_655(val, _values, result)
 result = nil;
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby30Parser
